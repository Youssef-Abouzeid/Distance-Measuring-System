
Mini_project4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00002c7a  00002d0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800116  00800116  00002d24  2**0
                  ALLOC
  3 .stab         00002208  00000000  00000000  00002d24  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f52  00000000  00000000  00004f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005fde  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000616d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000081b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  000092b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000a238  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000a3b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a67a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000af08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 de 08 	jmp	0x11bc	; 0x11bc <__vector_10>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e7       	ldi	r30, 0x7A	; 122
      7c:	fc e2       	ldi	r31, 0x2C	; 44
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a6 31       	cpi	r26, 0x16	; 22
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a6 e1       	ldi	r26, 0x16	; 22
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 31       	cpi	r26, 0x1F	; 31
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 20 14 	call	0x2840	; 0x2840 <main>
      9e:	0c 94 3b 16 	jmp	0x2c76	; 0x2c76 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__fixunssfsi>:
      a6:	ef 92       	push	r14
      a8:	ff 92       	push	r15
      aa:	0f 93       	push	r16
      ac:	1f 93       	push	r17
      ae:	7b 01       	movw	r14, r22
      b0:	8c 01       	movw	r16, r24
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__gesf2>
      be:	88 23       	and	r24, r24
      c0:	8c f0       	brlt	.+34     	; 0xe4 <__fixunssfsi+0x3e>
      c2:	c8 01       	movw	r24, r16
      c4:	b7 01       	movw	r22, r14
      c6:	20 e0       	ldi	r18, 0x00	; 0
      c8:	30 e0       	ldi	r19, 0x00	; 0
      ca:	40 e0       	ldi	r20, 0x00	; 0
      cc:	5f e4       	ldi	r21, 0x4F	; 79
      ce:	0e 94 cb 01 	call	0x396	; 0x396 <__subsf3>
      d2:	0e 94 5f 04 	call	0x8be	; 0x8be <__fixsfsi>
      d6:	9b 01       	movw	r18, r22
      d8:	ac 01       	movw	r20, r24
      da:	20 50       	subi	r18, 0x00	; 0
      dc:	30 40       	sbci	r19, 0x00	; 0
      de:	40 40       	sbci	r20, 0x00	; 0
      e0:	50 48       	sbci	r21, 0x80	; 128
      e2:	06 c0       	rjmp	.+12     	; 0xf0 <__fixunssfsi+0x4a>
      e4:	c8 01       	movw	r24, r16
      e6:	b7 01       	movw	r22, r14
      e8:	0e 94 5f 04 	call	0x8be	; 0x8be <__fixsfsi>
      ec:	9b 01       	movw	r18, r22
      ee:	ac 01       	movw	r20, r24
      f0:	b9 01       	movw	r22, r18
      f2:	ca 01       	movw	r24, r20
      f4:	1f 91       	pop	r17
      f6:	0f 91       	pop	r16
      f8:	ff 90       	pop	r15
      fa:	ef 90       	pop	r14
      fc:	08 95       	ret

000000fe <_fpadd_parts>:
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	e5 e8       	ldi	r30, 0x85	; 133
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <__prologue_saves__>
     10a:	dc 01       	movw	r26, r24
     10c:	2b 01       	movw	r4, r22
     10e:	fa 01       	movw	r30, r20
     110:	9c 91       	ld	r25, X
     112:	92 30       	cpi	r25, 0x02	; 2
     114:	08 f4       	brcc	.+2      	; 0x118 <_fpadd_parts+0x1a>
     116:	39 c1       	rjmp	.+626    	; 0x38a <_fpadd_parts+0x28c>
     118:	eb 01       	movw	r28, r22
     11a:	88 81       	ld	r24, Y
     11c:	82 30       	cpi	r24, 0x02	; 2
     11e:	08 f4       	brcc	.+2      	; 0x122 <_fpadd_parts+0x24>
     120:	33 c1       	rjmp	.+614    	; 0x388 <_fpadd_parts+0x28a>
     122:	94 30       	cpi	r25, 0x04	; 4
     124:	69 f4       	brne	.+26     	; 0x140 <_fpadd_parts+0x42>
     126:	84 30       	cpi	r24, 0x04	; 4
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x2e>
     12a:	2f c1       	rjmp	.+606    	; 0x38a <_fpadd_parts+0x28c>
     12c:	11 96       	adiw	r26, 0x01	; 1
     12e:	9c 91       	ld	r25, X
     130:	11 97       	sbiw	r26, 0x01	; 1
     132:	89 81       	ldd	r24, Y+1	; 0x01
     134:	98 17       	cp	r25, r24
     136:	09 f4       	brne	.+2      	; 0x13a <_fpadd_parts+0x3c>
     138:	28 c1       	rjmp	.+592    	; 0x38a <_fpadd_parts+0x28c>
     13a:	ae e0       	ldi	r26, 0x0E	; 14
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	25 c1       	rjmp	.+586    	; 0x38a <_fpadd_parts+0x28c>
     140:	84 30       	cpi	r24, 0x04	; 4
     142:	09 f4       	brne	.+2      	; 0x146 <_fpadd_parts+0x48>
     144:	21 c1       	rjmp	.+578    	; 0x388 <_fpadd_parts+0x28a>
     146:	82 30       	cpi	r24, 0x02	; 2
     148:	a9 f4       	brne	.+42     	; 0x174 <_fpadd_parts+0x76>
     14a:	92 30       	cpi	r25, 0x02	; 2
     14c:	09 f0       	breq	.+2      	; 0x150 <_fpadd_parts+0x52>
     14e:	1d c1       	rjmp	.+570    	; 0x38a <_fpadd_parts+0x28c>
     150:	9a 01       	movw	r18, r20
     152:	ad 01       	movw	r20, r26
     154:	88 e0       	ldi	r24, 0x08	; 8
     156:	ea 01       	movw	r28, r20
     158:	09 90       	ld	r0, Y+
     15a:	ae 01       	movw	r20, r28
     15c:	e9 01       	movw	r28, r18
     15e:	09 92       	st	Y+, r0
     160:	9e 01       	movw	r18, r28
     162:	81 50       	subi	r24, 0x01	; 1
     164:	c1 f7       	brne	.-16     	; 0x156 <_fpadd_parts+0x58>
     166:	e2 01       	movw	r28, r4
     168:	89 81       	ldd	r24, Y+1	; 0x01
     16a:	11 96       	adiw	r26, 0x01	; 1
     16c:	9c 91       	ld	r25, X
     16e:	89 23       	and	r24, r25
     170:	81 83       	std	Z+1, r24	; 0x01
     172:	08 c1       	rjmp	.+528    	; 0x384 <_fpadd_parts+0x286>
     174:	92 30       	cpi	r25, 0x02	; 2
     176:	09 f4       	brne	.+2      	; 0x17a <_fpadd_parts+0x7c>
     178:	07 c1       	rjmp	.+526    	; 0x388 <_fpadd_parts+0x28a>
     17a:	12 96       	adiw	r26, 0x02	; 2
     17c:	2d 90       	ld	r2, X+
     17e:	3c 90       	ld	r3, X
     180:	13 97       	sbiw	r26, 0x03	; 3
     182:	eb 01       	movw	r28, r22
     184:	8a 81       	ldd	r24, Y+2	; 0x02
     186:	9b 81       	ldd	r25, Y+3	; 0x03
     188:	14 96       	adiw	r26, 0x04	; 4
     18a:	ad 90       	ld	r10, X+
     18c:	bd 90       	ld	r11, X+
     18e:	cd 90       	ld	r12, X+
     190:	dc 90       	ld	r13, X
     192:	17 97       	sbiw	r26, 0x07	; 7
     194:	ec 80       	ldd	r14, Y+4	; 0x04
     196:	fd 80       	ldd	r15, Y+5	; 0x05
     198:	0e 81       	ldd	r16, Y+6	; 0x06
     19a:	1f 81       	ldd	r17, Y+7	; 0x07
     19c:	91 01       	movw	r18, r2
     19e:	28 1b       	sub	r18, r24
     1a0:	39 0b       	sbc	r19, r25
     1a2:	b9 01       	movw	r22, r18
     1a4:	37 ff       	sbrs	r19, 7
     1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <_fpadd_parts+0xb2>
     1a8:	66 27       	eor	r22, r22
     1aa:	77 27       	eor	r23, r23
     1ac:	62 1b       	sub	r22, r18
     1ae:	73 0b       	sbc	r23, r19
     1b0:	60 32       	cpi	r22, 0x20	; 32
     1b2:	71 05       	cpc	r23, r1
     1b4:	0c f0       	brlt	.+2      	; 0x1b8 <_fpadd_parts+0xba>
     1b6:	61 c0       	rjmp	.+194    	; 0x27a <_fpadd_parts+0x17c>
     1b8:	12 16       	cp	r1, r18
     1ba:	13 06       	cpc	r1, r19
     1bc:	6c f5       	brge	.+90     	; 0x218 <_fpadd_parts+0x11a>
     1be:	37 01       	movw	r6, r14
     1c0:	48 01       	movw	r8, r16
     1c2:	06 2e       	mov	r0, r22
     1c4:	04 c0       	rjmp	.+8      	; 0x1ce <_fpadd_parts+0xd0>
     1c6:	96 94       	lsr	r9
     1c8:	87 94       	ror	r8
     1ca:	77 94       	ror	r7
     1cc:	67 94       	ror	r6
     1ce:	0a 94       	dec	r0
     1d0:	d2 f7       	brpl	.-12     	; 0x1c6 <_fpadd_parts+0xc8>
     1d2:	21 e0       	ldi	r18, 0x01	; 1
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	40 e0       	ldi	r20, 0x00	; 0
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	04 c0       	rjmp	.+8      	; 0x1e4 <_fpadd_parts+0xe6>
     1dc:	22 0f       	add	r18, r18
     1de:	33 1f       	adc	r19, r19
     1e0:	44 1f       	adc	r20, r20
     1e2:	55 1f       	adc	r21, r21
     1e4:	6a 95       	dec	r22
     1e6:	d2 f7       	brpl	.-12     	; 0x1dc <_fpadd_parts+0xde>
     1e8:	21 50       	subi	r18, 0x01	; 1
     1ea:	30 40       	sbci	r19, 0x00	; 0
     1ec:	40 40       	sbci	r20, 0x00	; 0
     1ee:	50 40       	sbci	r21, 0x00	; 0
     1f0:	2e 21       	and	r18, r14
     1f2:	3f 21       	and	r19, r15
     1f4:	40 23       	and	r20, r16
     1f6:	51 23       	and	r21, r17
     1f8:	21 15       	cp	r18, r1
     1fa:	31 05       	cpc	r19, r1
     1fc:	41 05       	cpc	r20, r1
     1fe:	51 05       	cpc	r21, r1
     200:	21 f0       	breq	.+8      	; 0x20a <_fpadd_parts+0x10c>
     202:	21 e0       	ldi	r18, 0x01	; 1
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	40 e0       	ldi	r20, 0x00	; 0
     208:	50 e0       	ldi	r21, 0x00	; 0
     20a:	79 01       	movw	r14, r18
     20c:	8a 01       	movw	r16, r20
     20e:	e6 28       	or	r14, r6
     210:	f7 28       	or	r15, r7
     212:	08 29       	or	r16, r8
     214:	19 29       	or	r17, r9
     216:	3c c0       	rjmp	.+120    	; 0x290 <_fpadd_parts+0x192>
     218:	23 2b       	or	r18, r19
     21a:	d1 f1       	breq	.+116    	; 0x290 <_fpadd_parts+0x192>
     21c:	26 0e       	add	r2, r22
     21e:	37 1e       	adc	r3, r23
     220:	35 01       	movw	r6, r10
     222:	46 01       	movw	r8, r12
     224:	06 2e       	mov	r0, r22
     226:	04 c0       	rjmp	.+8      	; 0x230 <_fpadd_parts+0x132>
     228:	96 94       	lsr	r9
     22a:	87 94       	ror	r8
     22c:	77 94       	ror	r7
     22e:	67 94       	ror	r6
     230:	0a 94       	dec	r0
     232:	d2 f7       	brpl	.-12     	; 0x228 <_fpadd_parts+0x12a>
     234:	21 e0       	ldi	r18, 0x01	; 1
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	40 e0       	ldi	r20, 0x00	; 0
     23a:	50 e0       	ldi	r21, 0x00	; 0
     23c:	04 c0       	rjmp	.+8      	; 0x246 <_fpadd_parts+0x148>
     23e:	22 0f       	add	r18, r18
     240:	33 1f       	adc	r19, r19
     242:	44 1f       	adc	r20, r20
     244:	55 1f       	adc	r21, r21
     246:	6a 95       	dec	r22
     248:	d2 f7       	brpl	.-12     	; 0x23e <_fpadd_parts+0x140>
     24a:	21 50       	subi	r18, 0x01	; 1
     24c:	30 40       	sbci	r19, 0x00	; 0
     24e:	40 40       	sbci	r20, 0x00	; 0
     250:	50 40       	sbci	r21, 0x00	; 0
     252:	2a 21       	and	r18, r10
     254:	3b 21       	and	r19, r11
     256:	4c 21       	and	r20, r12
     258:	5d 21       	and	r21, r13
     25a:	21 15       	cp	r18, r1
     25c:	31 05       	cpc	r19, r1
     25e:	41 05       	cpc	r20, r1
     260:	51 05       	cpc	r21, r1
     262:	21 f0       	breq	.+8      	; 0x26c <_fpadd_parts+0x16e>
     264:	21 e0       	ldi	r18, 0x01	; 1
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	40 e0       	ldi	r20, 0x00	; 0
     26a:	50 e0       	ldi	r21, 0x00	; 0
     26c:	59 01       	movw	r10, r18
     26e:	6a 01       	movw	r12, r20
     270:	a6 28       	or	r10, r6
     272:	b7 28       	or	r11, r7
     274:	c8 28       	or	r12, r8
     276:	d9 28       	or	r13, r9
     278:	0b c0       	rjmp	.+22     	; 0x290 <_fpadd_parts+0x192>
     27a:	82 15       	cp	r24, r2
     27c:	93 05       	cpc	r25, r3
     27e:	2c f0       	brlt	.+10     	; 0x28a <_fpadd_parts+0x18c>
     280:	1c 01       	movw	r2, r24
     282:	aa 24       	eor	r10, r10
     284:	bb 24       	eor	r11, r11
     286:	65 01       	movw	r12, r10
     288:	03 c0       	rjmp	.+6      	; 0x290 <_fpadd_parts+0x192>
     28a:	ee 24       	eor	r14, r14
     28c:	ff 24       	eor	r15, r15
     28e:	87 01       	movw	r16, r14
     290:	11 96       	adiw	r26, 0x01	; 1
     292:	9c 91       	ld	r25, X
     294:	d2 01       	movw	r26, r4
     296:	11 96       	adiw	r26, 0x01	; 1
     298:	8c 91       	ld	r24, X
     29a:	98 17       	cp	r25, r24
     29c:	09 f4       	brne	.+2      	; 0x2a0 <_fpadd_parts+0x1a2>
     29e:	45 c0       	rjmp	.+138    	; 0x32a <_fpadd_parts+0x22c>
     2a0:	99 23       	and	r25, r25
     2a2:	39 f0       	breq	.+14     	; 0x2b2 <_fpadd_parts+0x1b4>
     2a4:	a8 01       	movw	r20, r16
     2a6:	97 01       	movw	r18, r14
     2a8:	2a 19       	sub	r18, r10
     2aa:	3b 09       	sbc	r19, r11
     2ac:	4c 09       	sbc	r20, r12
     2ae:	5d 09       	sbc	r21, r13
     2b0:	06 c0       	rjmp	.+12     	; 0x2be <_fpadd_parts+0x1c0>
     2b2:	a6 01       	movw	r20, r12
     2b4:	95 01       	movw	r18, r10
     2b6:	2e 19       	sub	r18, r14
     2b8:	3f 09       	sbc	r19, r15
     2ba:	40 0b       	sbc	r20, r16
     2bc:	51 0b       	sbc	r21, r17
     2be:	57 fd       	sbrc	r21, 7
     2c0:	08 c0       	rjmp	.+16     	; 0x2d2 <_fpadd_parts+0x1d4>
     2c2:	11 82       	std	Z+1, r1	; 0x01
     2c4:	33 82       	std	Z+3, r3	; 0x03
     2c6:	22 82       	std	Z+2, r2	; 0x02
     2c8:	24 83       	std	Z+4, r18	; 0x04
     2ca:	35 83       	std	Z+5, r19	; 0x05
     2cc:	46 83       	std	Z+6, r20	; 0x06
     2ce:	57 83       	std	Z+7, r21	; 0x07
     2d0:	1d c0       	rjmp	.+58     	; 0x30c <_fpadd_parts+0x20e>
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	81 83       	std	Z+1, r24	; 0x01
     2d6:	33 82       	std	Z+3, r3	; 0x03
     2d8:	22 82       	std	Z+2, r2	; 0x02
     2da:	88 27       	eor	r24, r24
     2dc:	99 27       	eor	r25, r25
     2de:	dc 01       	movw	r26, r24
     2e0:	82 1b       	sub	r24, r18
     2e2:	93 0b       	sbc	r25, r19
     2e4:	a4 0b       	sbc	r26, r20
     2e6:	b5 0b       	sbc	r27, r21
     2e8:	84 83       	std	Z+4, r24	; 0x04
     2ea:	95 83       	std	Z+5, r25	; 0x05
     2ec:	a6 83       	std	Z+6, r26	; 0x06
     2ee:	b7 83       	std	Z+7, r27	; 0x07
     2f0:	0d c0       	rjmp	.+26     	; 0x30c <_fpadd_parts+0x20e>
     2f2:	22 0f       	add	r18, r18
     2f4:	33 1f       	adc	r19, r19
     2f6:	44 1f       	adc	r20, r20
     2f8:	55 1f       	adc	r21, r21
     2fa:	24 83       	std	Z+4, r18	; 0x04
     2fc:	35 83       	std	Z+5, r19	; 0x05
     2fe:	46 83       	std	Z+6, r20	; 0x06
     300:	57 83       	std	Z+7, r21	; 0x07
     302:	82 81       	ldd	r24, Z+2	; 0x02
     304:	93 81       	ldd	r25, Z+3	; 0x03
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	93 83       	std	Z+3, r25	; 0x03
     30a:	82 83       	std	Z+2, r24	; 0x02
     30c:	24 81       	ldd	r18, Z+4	; 0x04
     30e:	35 81       	ldd	r19, Z+5	; 0x05
     310:	46 81       	ldd	r20, Z+6	; 0x06
     312:	57 81       	ldd	r21, Z+7	; 0x07
     314:	da 01       	movw	r26, r20
     316:	c9 01       	movw	r24, r18
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	a1 09       	sbc	r26, r1
     31c:	b1 09       	sbc	r27, r1
     31e:	8f 5f       	subi	r24, 0xFF	; 255
     320:	9f 4f       	sbci	r25, 0xFF	; 255
     322:	af 4f       	sbci	r26, 0xFF	; 255
     324:	bf 43       	sbci	r27, 0x3F	; 63
     326:	28 f3       	brcs	.-54     	; 0x2f2 <_fpadd_parts+0x1f4>
     328:	0b c0       	rjmp	.+22     	; 0x340 <_fpadd_parts+0x242>
     32a:	91 83       	std	Z+1, r25	; 0x01
     32c:	33 82       	std	Z+3, r3	; 0x03
     32e:	22 82       	std	Z+2, r2	; 0x02
     330:	ea 0c       	add	r14, r10
     332:	fb 1c       	adc	r15, r11
     334:	0c 1d       	adc	r16, r12
     336:	1d 1d       	adc	r17, r13
     338:	e4 82       	std	Z+4, r14	; 0x04
     33a:	f5 82       	std	Z+5, r15	; 0x05
     33c:	06 83       	std	Z+6, r16	; 0x06
     33e:	17 83       	std	Z+7, r17	; 0x07
     340:	83 e0       	ldi	r24, 0x03	; 3
     342:	80 83       	st	Z, r24
     344:	24 81       	ldd	r18, Z+4	; 0x04
     346:	35 81       	ldd	r19, Z+5	; 0x05
     348:	46 81       	ldd	r20, Z+6	; 0x06
     34a:	57 81       	ldd	r21, Z+7	; 0x07
     34c:	57 ff       	sbrs	r21, 7
     34e:	1a c0       	rjmp	.+52     	; 0x384 <_fpadd_parts+0x286>
     350:	c9 01       	movw	r24, r18
     352:	aa 27       	eor	r26, r26
     354:	97 fd       	sbrc	r25, 7
     356:	a0 95       	com	r26
     358:	ba 2f       	mov	r27, r26
     35a:	81 70       	andi	r24, 0x01	; 1
     35c:	90 70       	andi	r25, 0x00	; 0
     35e:	a0 70       	andi	r26, 0x00	; 0
     360:	b0 70       	andi	r27, 0x00	; 0
     362:	56 95       	lsr	r21
     364:	47 95       	ror	r20
     366:	37 95       	ror	r19
     368:	27 95       	ror	r18
     36a:	82 2b       	or	r24, r18
     36c:	93 2b       	or	r25, r19
     36e:	a4 2b       	or	r26, r20
     370:	b5 2b       	or	r27, r21
     372:	84 83       	std	Z+4, r24	; 0x04
     374:	95 83       	std	Z+5, r25	; 0x05
     376:	a6 83       	std	Z+6, r26	; 0x06
     378:	b7 83       	std	Z+7, r27	; 0x07
     37a:	82 81       	ldd	r24, Z+2	; 0x02
     37c:	93 81       	ldd	r25, Z+3	; 0x03
     37e:	01 96       	adiw	r24, 0x01	; 1
     380:	93 83       	std	Z+3, r25	; 0x03
     382:	82 83       	std	Z+2, r24	; 0x02
     384:	df 01       	movw	r26, r30
     386:	01 c0       	rjmp	.+2      	; 0x38a <_fpadd_parts+0x28c>
     388:	d2 01       	movw	r26, r4
     38a:	cd 01       	movw	r24, r26
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	e2 e1       	ldi	r30, 0x12	; 18
     392:	0c 94 dc 15 	jmp	0x2bb8	; 0x2bb8 <__epilogue_restores__>

00000396 <__subsf3>:
     396:	a0 e2       	ldi	r26, 0x20	; 32
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	e1 ed       	ldi	r30, 0xD1	; 209
     39c:	f1 e0       	ldi	r31, 0x01	; 1
     39e:	0c 94 cc 15 	jmp	0x2b98	; 0x2b98 <__prologue_saves__+0x18>
     3a2:	69 83       	std	Y+1, r22	; 0x01
     3a4:	7a 83       	std	Y+2, r23	; 0x02
     3a6:	8b 83       	std	Y+3, r24	; 0x03
     3a8:	9c 83       	std	Y+4, r25	; 0x04
     3aa:	2d 83       	std	Y+5, r18	; 0x05
     3ac:	3e 83       	std	Y+6, r19	; 0x06
     3ae:	4f 83       	std	Y+7, r20	; 0x07
     3b0:	58 87       	std	Y+8, r21	; 0x08
     3b2:	e9 e0       	ldi	r30, 0x09	; 9
     3b4:	ee 2e       	mov	r14, r30
     3b6:	f1 2c       	mov	r15, r1
     3b8:	ec 0e       	add	r14, r28
     3ba:	fd 1e       	adc	r15, r29
     3bc:	ce 01       	movw	r24, r28
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	b7 01       	movw	r22, r14
     3c2:	0e 94 88 05 	call	0xb10	; 0xb10 <__unpack_f>
     3c6:	8e 01       	movw	r16, r28
     3c8:	0f 5e       	subi	r16, 0xEF	; 239
     3ca:	1f 4f       	sbci	r17, 0xFF	; 255
     3cc:	ce 01       	movw	r24, r28
     3ce:	05 96       	adiw	r24, 0x05	; 5
     3d0:	b8 01       	movw	r22, r16
     3d2:	0e 94 88 05 	call	0xb10	; 0xb10 <__unpack_f>
     3d6:	8a 89       	ldd	r24, Y+18	; 0x12
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	89 27       	eor	r24, r25
     3dc:	8a 8b       	std	Y+18, r24	; 0x12
     3de:	c7 01       	movw	r24, r14
     3e0:	b8 01       	movw	r22, r16
     3e2:	ae 01       	movw	r20, r28
     3e4:	47 5e       	subi	r20, 0xE7	; 231
     3e6:	5f 4f       	sbci	r21, 0xFF	; 255
     3e8:	0e 94 7f 00 	call	0xfe	; 0xfe <_fpadd_parts>
     3ec:	0e 94 b3 04 	call	0x966	; 0x966 <__pack_f>
     3f0:	a0 96       	adiw	r28, 0x20	; 32
     3f2:	e6 e0       	ldi	r30, 0x06	; 6
     3f4:	0c 94 e8 15 	jmp	0x2bd0	; 0x2bd0 <__epilogue_restores__+0x18>

000003f8 <__addsf3>:
     3f8:	a0 e2       	ldi	r26, 0x20	; 32
     3fa:	b0 e0       	ldi	r27, 0x00	; 0
     3fc:	e2 e0       	ldi	r30, 0x02	; 2
     3fe:	f2 e0       	ldi	r31, 0x02	; 2
     400:	0c 94 cc 15 	jmp	0x2b98	; 0x2b98 <__prologue_saves__+0x18>
     404:	69 83       	std	Y+1, r22	; 0x01
     406:	7a 83       	std	Y+2, r23	; 0x02
     408:	8b 83       	std	Y+3, r24	; 0x03
     40a:	9c 83       	std	Y+4, r25	; 0x04
     40c:	2d 83       	std	Y+5, r18	; 0x05
     40e:	3e 83       	std	Y+6, r19	; 0x06
     410:	4f 83       	std	Y+7, r20	; 0x07
     412:	58 87       	std	Y+8, r21	; 0x08
     414:	f9 e0       	ldi	r31, 0x09	; 9
     416:	ef 2e       	mov	r14, r31
     418:	f1 2c       	mov	r15, r1
     41a:	ec 0e       	add	r14, r28
     41c:	fd 1e       	adc	r15, r29
     41e:	ce 01       	movw	r24, r28
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	b7 01       	movw	r22, r14
     424:	0e 94 88 05 	call	0xb10	; 0xb10 <__unpack_f>
     428:	8e 01       	movw	r16, r28
     42a:	0f 5e       	subi	r16, 0xEF	; 239
     42c:	1f 4f       	sbci	r17, 0xFF	; 255
     42e:	ce 01       	movw	r24, r28
     430:	05 96       	adiw	r24, 0x05	; 5
     432:	b8 01       	movw	r22, r16
     434:	0e 94 88 05 	call	0xb10	; 0xb10 <__unpack_f>
     438:	c7 01       	movw	r24, r14
     43a:	b8 01       	movw	r22, r16
     43c:	ae 01       	movw	r20, r28
     43e:	47 5e       	subi	r20, 0xE7	; 231
     440:	5f 4f       	sbci	r21, 0xFF	; 255
     442:	0e 94 7f 00 	call	0xfe	; 0xfe <_fpadd_parts>
     446:	0e 94 b3 04 	call	0x966	; 0x966 <__pack_f>
     44a:	a0 96       	adiw	r28, 0x20	; 32
     44c:	e6 e0       	ldi	r30, 0x06	; 6
     44e:	0c 94 e8 15 	jmp	0x2bd0	; 0x2bd0 <__epilogue_restores__+0x18>

00000452 <__mulsf3>:
     452:	a0 e2       	ldi	r26, 0x20	; 32
     454:	b0 e0       	ldi	r27, 0x00	; 0
     456:	ef e2       	ldi	r30, 0x2F	; 47
     458:	f2 e0       	ldi	r31, 0x02	; 2
     45a:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <__prologue_saves__>
     45e:	69 83       	std	Y+1, r22	; 0x01
     460:	7a 83       	std	Y+2, r23	; 0x02
     462:	8b 83       	std	Y+3, r24	; 0x03
     464:	9c 83       	std	Y+4, r25	; 0x04
     466:	2d 83       	std	Y+5, r18	; 0x05
     468:	3e 83       	std	Y+6, r19	; 0x06
     46a:	4f 83       	std	Y+7, r20	; 0x07
     46c:	58 87       	std	Y+8, r21	; 0x08
     46e:	ce 01       	movw	r24, r28
     470:	01 96       	adiw	r24, 0x01	; 1
     472:	be 01       	movw	r22, r28
     474:	67 5f       	subi	r22, 0xF7	; 247
     476:	7f 4f       	sbci	r23, 0xFF	; 255
     478:	0e 94 88 05 	call	0xb10	; 0xb10 <__unpack_f>
     47c:	ce 01       	movw	r24, r28
     47e:	05 96       	adiw	r24, 0x05	; 5
     480:	be 01       	movw	r22, r28
     482:	6f 5e       	subi	r22, 0xEF	; 239
     484:	7f 4f       	sbci	r23, 0xFF	; 255
     486:	0e 94 88 05 	call	0xb10	; 0xb10 <__unpack_f>
     48a:	99 85       	ldd	r25, Y+9	; 0x09
     48c:	92 30       	cpi	r25, 0x02	; 2
     48e:	88 f0       	brcs	.+34     	; 0x4b2 <__mulsf3+0x60>
     490:	89 89       	ldd	r24, Y+17	; 0x11
     492:	82 30       	cpi	r24, 0x02	; 2
     494:	c8 f0       	brcs	.+50     	; 0x4c8 <__mulsf3+0x76>
     496:	94 30       	cpi	r25, 0x04	; 4
     498:	19 f4       	brne	.+6      	; 0x4a0 <__mulsf3+0x4e>
     49a:	82 30       	cpi	r24, 0x02	; 2
     49c:	51 f4       	brne	.+20     	; 0x4b2 <__mulsf3+0x60>
     49e:	04 c0       	rjmp	.+8      	; 0x4a8 <__mulsf3+0x56>
     4a0:	84 30       	cpi	r24, 0x04	; 4
     4a2:	29 f4       	brne	.+10     	; 0x4ae <__mulsf3+0x5c>
     4a4:	92 30       	cpi	r25, 0x02	; 2
     4a6:	81 f4       	brne	.+32     	; 0x4c8 <__mulsf3+0x76>
     4a8:	8e e0       	ldi	r24, 0x0E	; 14
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	c6 c0       	rjmp	.+396    	; 0x63a <__mulsf3+0x1e8>
     4ae:	92 30       	cpi	r25, 0x02	; 2
     4b0:	49 f4       	brne	.+18     	; 0x4c4 <__mulsf3+0x72>
     4b2:	20 e0       	ldi	r18, 0x00	; 0
     4b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b6:	8a 89       	ldd	r24, Y+18	; 0x12
     4b8:	98 13       	cpse	r25, r24
     4ba:	21 e0       	ldi	r18, 0x01	; 1
     4bc:	2a 87       	std	Y+10, r18	; 0x0a
     4be:	ce 01       	movw	r24, r28
     4c0:	09 96       	adiw	r24, 0x09	; 9
     4c2:	bb c0       	rjmp	.+374    	; 0x63a <__mulsf3+0x1e8>
     4c4:	82 30       	cpi	r24, 0x02	; 2
     4c6:	49 f4       	brne	.+18     	; 0x4da <__mulsf3+0x88>
     4c8:	20 e0       	ldi	r18, 0x00	; 0
     4ca:	9a 85       	ldd	r25, Y+10	; 0x0a
     4cc:	8a 89       	ldd	r24, Y+18	; 0x12
     4ce:	98 13       	cpse	r25, r24
     4d0:	21 e0       	ldi	r18, 0x01	; 1
     4d2:	2a 8b       	std	Y+18, r18	; 0x12
     4d4:	ce 01       	movw	r24, r28
     4d6:	41 96       	adiw	r24, 0x11	; 17
     4d8:	b0 c0       	rjmp	.+352    	; 0x63a <__mulsf3+0x1e8>
     4da:	2d 84       	ldd	r2, Y+13	; 0x0d
     4dc:	3e 84       	ldd	r3, Y+14	; 0x0e
     4de:	4f 84       	ldd	r4, Y+15	; 0x0f
     4e0:	58 88       	ldd	r5, Y+16	; 0x10
     4e2:	6d 88       	ldd	r6, Y+21	; 0x15
     4e4:	7e 88       	ldd	r7, Y+22	; 0x16
     4e6:	8f 88       	ldd	r8, Y+23	; 0x17
     4e8:	98 8c       	ldd	r9, Y+24	; 0x18
     4ea:	ee 24       	eor	r14, r14
     4ec:	ff 24       	eor	r15, r15
     4ee:	87 01       	movw	r16, r14
     4f0:	aa 24       	eor	r10, r10
     4f2:	bb 24       	eor	r11, r11
     4f4:	65 01       	movw	r12, r10
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	50 e0       	ldi	r21, 0x00	; 0
     4fa:	60 e0       	ldi	r22, 0x00	; 0
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	e0 e0       	ldi	r30, 0x00	; 0
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	c1 01       	movw	r24, r2
     504:	81 70       	andi	r24, 0x01	; 1
     506:	90 70       	andi	r25, 0x00	; 0
     508:	89 2b       	or	r24, r25
     50a:	e9 f0       	breq	.+58     	; 0x546 <__mulsf3+0xf4>
     50c:	e6 0c       	add	r14, r6
     50e:	f7 1c       	adc	r15, r7
     510:	08 1d       	adc	r16, r8
     512:	19 1d       	adc	r17, r9
     514:	9a 01       	movw	r18, r20
     516:	ab 01       	movw	r20, r22
     518:	2a 0d       	add	r18, r10
     51a:	3b 1d       	adc	r19, r11
     51c:	4c 1d       	adc	r20, r12
     51e:	5d 1d       	adc	r21, r13
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	a0 e0       	ldi	r26, 0x00	; 0
     526:	b0 e0       	ldi	r27, 0x00	; 0
     528:	e6 14       	cp	r14, r6
     52a:	f7 04       	cpc	r15, r7
     52c:	08 05       	cpc	r16, r8
     52e:	19 05       	cpc	r17, r9
     530:	20 f4       	brcc	.+8      	; 0x53a <__mulsf3+0xe8>
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	a0 e0       	ldi	r26, 0x00	; 0
     538:	b0 e0       	ldi	r27, 0x00	; 0
     53a:	ba 01       	movw	r22, r20
     53c:	a9 01       	movw	r20, r18
     53e:	48 0f       	add	r20, r24
     540:	59 1f       	adc	r21, r25
     542:	6a 1f       	adc	r22, r26
     544:	7b 1f       	adc	r23, r27
     546:	aa 0c       	add	r10, r10
     548:	bb 1c       	adc	r11, r11
     54a:	cc 1c       	adc	r12, r12
     54c:	dd 1c       	adc	r13, r13
     54e:	97 fe       	sbrs	r9, 7
     550:	08 c0       	rjmp	.+16     	; 0x562 <__mulsf3+0x110>
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	a0 e0       	ldi	r26, 0x00	; 0
     558:	b0 e0       	ldi	r27, 0x00	; 0
     55a:	a8 2a       	or	r10, r24
     55c:	b9 2a       	or	r11, r25
     55e:	ca 2a       	or	r12, r26
     560:	db 2a       	or	r13, r27
     562:	31 96       	adiw	r30, 0x01	; 1
     564:	e0 32       	cpi	r30, 0x20	; 32
     566:	f1 05       	cpc	r31, r1
     568:	49 f0       	breq	.+18     	; 0x57c <__mulsf3+0x12a>
     56a:	66 0c       	add	r6, r6
     56c:	77 1c       	adc	r7, r7
     56e:	88 1c       	adc	r8, r8
     570:	99 1c       	adc	r9, r9
     572:	56 94       	lsr	r5
     574:	47 94       	ror	r4
     576:	37 94       	ror	r3
     578:	27 94       	ror	r2
     57a:	c3 cf       	rjmp	.-122    	; 0x502 <__mulsf3+0xb0>
     57c:	fa 85       	ldd	r31, Y+10	; 0x0a
     57e:	ea 89       	ldd	r30, Y+18	; 0x12
     580:	2b 89       	ldd	r18, Y+19	; 0x13
     582:	3c 89       	ldd	r19, Y+20	; 0x14
     584:	8b 85       	ldd	r24, Y+11	; 0x0b
     586:	9c 85       	ldd	r25, Y+12	; 0x0c
     588:	28 0f       	add	r18, r24
     58a:	39 1f       	adc	r19, r25
     58c:	2e 5f       	subi	r18, 0xFE	; 254
     58e:	3f 4f       	sbci	r19, 0xFF	; 255
     590:	17 c0       	rjmp	.+46     	; 0x5c0 <__mulsf3+0x16e>
     592:	ca 01       	movw	r24, r20
     594:	81 70       	andi	r24, 0x01	; 1
     596:	90 70       	andi	r25, 0x00	; 0
     598:	89 2b       	or	r24, r25
     59a:	61 f0       	breq	.+24     	; 0x5b4 <__mulsf3+0x162>
     59c:	16 95       	lsr	r17
     59e:	07 95       	ror	r16
     5a0:	f7 94       	ror	r15
     5a2:	e7 94       	ror	r14
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	a0 e0       	ldi	r26, 0x00	; 0
     5aa:	b0 e8       	ldi	r27, 0x80	; 128
     5ac:	e8 2a       	or	r14, r24
     5ae:	f9 2a       	or	r15, r25
     5b0:	0a 2b       	or	r16, r26
     5b2:	1b 2b       	or	r17, r27
     5b4:	76 95       	lsr	r23
     5b6:	67 95       	ror	r22
     5b8:	57 95       	ror	r21
     5ba:	47 95       	ror	r20
     5bc:	2f 5f       	subi	r18, 0xFF	; 255
     5be:	3f 4f       	sbci	r19, 0xFF	; 255
     5c0:	77 fd       	sbrc	r23, 7
     5c2:	e7 cf       	rjmp	.-50     	; 0x592 <__mulsf3+0x140>
     5c4:	0c c0       	rjmp	.+24     	; 0x5de <__mulsf3+0x18c>
     5c6:	44 0f       	add	r20, r20
     5c8:	55 1f       	adc	r21, r21
     5ca:	66 1f       	adc	r22, r22
     5cc:	77 1f       	adc	r23, r23
     5ce:	17 fd       	sbrc	r17, 7
     5d0:	41 60       	ori	r20, 0x01	; 1
     5d2:	ee 0c       	add	r14, r14
     5d4:	ff 1c       	adc	r15, r15
     5d6:	00 1f       	adc	r16, r16
     5d8:	11 1f       	adc	r17, r17
     5da:	21 50       	subi	r18, 0x01	; 1
     5dc:	30 40       	sbci	r19, 0x00	; 0
     5de:	40 30       	cpi	r20, 0x00	; 0
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	59 07       	cpc	r21, r25
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	69 07       	cpc	r22, r25
     5e8:	90 e4       	ldi	r25, 0x40	; 64
     5ea:	79 07       	cpc	r23, r25
     5ec:	60 f3       	brcs	.-40     	; 0x5c6 <__mulsf3+0x174>
     5ee:	2b 8f       	std	Y+27, r18	; 0x1b
     5f0:	3c 8f       	std	Y+28, r19	; 0x1c
     5f2:	db 01       	movw	r26, r22
     5f4:	ca 01       	movw	r24, r20
     5f6:	8f 77       	andi	r24, 0x7F	; 127
     5f8:	90 70       	andi	r25, 0x00	; 0
     5fa:	a0 70       	andi	r26, 0x00	; 0
     5fc:	b0 70       	andi	r27, 0x00	; 0
     5fe:	80 34       	cpi	r24, 0x40	; 64
     600:	91 05       	cpc	r25, r1
     602:	a1 05       	cpc	r26, r1
     604:	b1 05       	cpc	r27, r1
     606:	61 f4       	brne	.+24     	; 0x620 <__mulsf3+0x1ce>
     608:	47 fd       	sbrc	r20, 7
     60a:	0a c0       	rjmp	.+20     	; 0x620 <__mulsf3+0x1ce>
     60c:	e1 14       	cp	r14, r1
     60e:	f1 04       	cpc	r15, r1
     610:	01 05       	cpc	r16, r1
     612:	11 05       	cpc	r17, r1
     614:	29 f0       	breq	.+10     	; 0x620 <__mulsf3+0x1ce>
     616:	40 5c       	subi	r20, 0xC0	; 192
     618:	5f 4f       	sbci	r21, 0xFF	; 255
     61a:	6f 4f       	sbci	r22, 0xFF	; 255
     61c:	7f 4f       	sbci	r23, 0xFF	; 255
     61e:	40 78       	andi	r20, 0x80	; 128
     620:	1a 8e       	std	Y+26, r1	; 0x1a
     622:	fe 17       	cp	r31, r30
     624:	11 f0       	breq	.+4      	; 0x62a <__mulsf3+0x1d8>
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	8a 8f       	std	Y+26, r24	; 0x1a
     62a:	4d 8f       	std	Y+29, r20	; 0x1d
     62c:	5e 8f       	std	Y+30, r21	; 0x1e
     62e:	6f 8f       	std	Y+31, r22	; 0x1f
     630:	78 a3       	std	Y+32, r23	; 0x20
     632:	83 e0       	ldi	r24, 0x03	; 3
     634:	89 8f       	std	Y+25, r24	; 0x19
     636:	ce 01       	movw	r24, r28
     638:	49 96       	adiw	r24, 0x19	; 25
     63a:	0e 94 b3 04 	call	0x966	; 0x966 <__pack_f>
     63e:	a0 96       	adiw	r28, 0x20	; 32
     640:	e2 e1       	ldi	r30, 0x12	; 18
     642:	0c 94 dc 15 	jmp	0x2bb8	; 0x2bb8 <__epilogue_restores__>

00000646 <__divsf3>:
     646:	a8 e1       	ldi	r26, 0x18	; 24
     648:	b0 e0       	ldi	r27, 0x00	; 0
     64a:	e9 e2       	ldi	r30, 0x29	; 41
     64c:	f3 e0       	ldi	r31, 0x03	; 3
     64e:	0c 94 c8 15 	jmp	0x2b90	; 0x2b90 <__prologue_saves__+0x10>
     652:	69 83       	std	Y+1, r22	; 0x01
     654:	7a 83       	std	Y+2, r23	; 0x02
     656:	8b 83       	std	Y+3, r24	; 0x03
     658:	9c 83       	std	Y+4, r25	; 0x04
     65a:	2d 83       	std	Y+5, r18	; 0x05
     65c:	3e 83       	std	Y+6, r19	; 0x06
     65e:	4f 83       	std	Y+7, r20	; 0x07
     660:	58 87       	std	Y+8, r21	; 0x08
     662:	b9 e0       	ldi	r27, 0x09	; 9
     664:	eb 2e       	mov	r14, r27
     666:	f1 2c       	mov	r15, r1
     668:	ec 0e       	add	r14, r28
     66a:	fd 1e       	adc	r15, r29
     66c:	ce 01       	movw	r24, r28
     66e:	01 96       	adiw	r24, 0x01	; 1
     670:	b7 01       	movw	r22, r14
     672:	0e 94 88 05 	call	0xb10	; 0xb10 <__unpack_f>
     676:	8e 01       	movw	r16, r28
     678:	0f 5e       	subi	r16, 0xEF	; 239
     67a:	1f 4f       	sbci	r17, 0xFF	; 255
     67c:	ce 01       	movw	r24, r28
     67e:	05 96       	adiw	r24, 0x05	; 5
     680:	b8 01       	movw	r22, r16
     682:	0e 94 88 05 	call	0xb10	; 0xb10 <__unpack_f>
     686:	29 85       	ldd	r18, Y+9	; 0x09
     688:	22 30       	cpi	r18, 0x02	; 2
     68a:	08 f4       	brcc	.+2      	; 0x68e <__divsf3+0x48>
     68c:	7e c0       	rjmp	.+252    	; 0x78a <__divsf3+0x144>
     68e:	39 89       	ldd	r19, Y+17	; 0x11
     690:	32 30       	cpi	r19, 0x02	; 2
     692:	10 f4       	brcc	.+4      	; 0x698 <__divsf3+0x52>
     694:	b8 01       	movw	r22, r16
     696:	7c c0       	rjmp	.+248    	; 0x790 <__divsf3+0x14a>
     698:	8a 85       	ldd	r24, Y+10	; 0x0a
     69a:	9a 89       	ldd	r25, Y+18	; 0x12
     69c:	89 27       	eor	r24, r25
     69e:	8a 87       	std	Y+10, r24	; 0x0a
     6a0:	24 30       	cpi	r18, 0x04	; 4
     6a2:	11 f0       	breq	.+4      	; 0x6a8 <__divsf3+0x62>
     6a4:	22 30       	cpi	r18, 0x02	; 2
     6a6:	31 f4       	brne	.+12     	; 0x6b4 <__divsf3+0x6e>
     6a8:	23 17       	cp	r18, r19
     6aa:	09 f0       	breq	.+2      	; 0x6ae <__divsf3+0x68>
     6ac:	6e c0       	rjmp	.+220    	; 0x78a <__divsf3+0x144>
     6ae:	6e e0       	ldi	r22, 0x0E	; 14
     6b0:	71 e0       	ldi	r23, 0x01	; 1
     6b2:	6e c0       	rjmp	.+220    	; 0x790 <__divsf3+0x14a>
     6b4:	34 30       	cpi	r19, 0x04	; 4
     6b6:	39 f4       	brne	.+14     	; 0x6c6 <__divsf3+0x80>
     6b8:	1d 86       	std	Y+13, r1	; 0x0d
     6ba:	1e 86       	std	Y+14, r1	; 0x0e
     6bc:	1f 86       	std	Y+15, r1	; 0x0f
     6be:	18 8a       	std	Y+16, r1	; 0x10
     6c0:	1c 86       	std	Y+12, r1	; 0x0c
     6c2:	1b 86       	std	Y+11, r1	; 0x0b
     6c4:	04 c0       	rjmp	.+8      	; 0x6ce <__divsf3+0x88>
     6c6:	32 30       	cpi	r19, 0x02	; 2
     6c8:	21 f4       	brne	.+8      	; 0x6d2 <__divsf3+0x8c>
     6ca:	84 e0       	ldi	r24, 0x04	; 4
     6cc:	89 87       	std	Y+9, r24	; 0x09
     6ce:	b7 01       	movw	r22, r14
     6d0:	5f c0       	rjmp	.+190    	; 0x790 <__divsf3+0x14a>
     6d2:	2b 85       	ldd	r18, Y+11	; 0x0b
     6d4:	3c 85       	ldd	r19, Y+12	; 0x0c
     6d6:	8b 89       	ldd	r24, Y+19	; 0x13
     6d8:	9c 89       	ldd	r25, Y+20	; 0x14
     6da:	28 1b       	sub	r18, r24
     6dc:	39 0b       	sbc	r19, r25
     6de:	3c 87       	std	Y+12, r19	; 0x0c
     6e0:	2b 87       	std	Y+11, r18	; 0x0b
     6e2:	ed 84       	ldd	r14, Y+13	; 0x0d
     6e4:	fe 84       	ldd	r15, Y+14	; 0x0e
     6e6:	0f 85       	ldd	r16, Y+15	; 0x0f
     6e8:	18 89       	ldd	r17, Y+16	; 0x10
     6ea:	ad 88       	ldd	r10, Y+21	; 0x15
     6ec:	be 88       	ldd	r11, Y+22	; 0x16
     6ee:	cf 88       	ldd	r12, Y+23	; 0x17
     6f0:	d8 8c       	ldd	r13, Y+24	; 0x18
     6f2:	ea 14       	cp	r14, r10
     6f4:	fb 04       	cpc	r15, r11
     6f6:	0c 05       	cpc	r16, r12
     6f8:	1d 05       	cpc	r17, r13
     6fa:	40 f4       	brcc	.+16     	; 0x70c <__divsf3+0xc6>
     6fc:	ee 0c       	add	r14, r14
     6fe:	ff 1c       	adc	r15, r15
     700:	00 1f       	adc	r16, r16
     702:	11 1f       	adc	r17, r17
     704:	21 50       	subi	r18, 0x01	; 1
     706:	30 40       	sbci	r19, 0x00	; 0
     708:	3c 87       	std	Y+12, r19	; 0x0c
     70a:	2b 87       	std	Y+11, r18	; 0x0b
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	40 e0       	ldi	r20, 0x00	; 0
     712:	50 e0       	ldi	r21, 0x00	; 0
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	a0 e0       	ldi	r26, 0x00	; 0
     71a:	b0 e4       	ldi	r27, 0x40	; 64
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	ea 14       	cp	r14, r10
     722:	fb 04       	cpc	r15, r11
     724:	0c 05       	cpc	r16, r12
     726:	1d 05       	cpc	r17, r13
     728:	40 f0       	brcs	.+16     	; 0x73a <__divsf3+0xf4>
     72a:	28 2b       	or	r18, r24
     72c:	39 2b       	or	r19, r25
     72e:	4a 2b       	or	r20, r26
     730:	5b 2b       	or	r21, r27
     732:	ea 18       	sub	r14, r10
     734:	fb 08       	sbc	r15, r11
     736:	0c 09       	sbc	r16, r12
     738:	1d 09       	sbc	r17, r13
     73a:	b6 95       	lsr	r27
     73c:	a7 95       	ror	r26
     73e:	97 95       	ror	r25
     740:	87 95       	ror	r24
     742:	ee 0c       	add	r14, r14
     744:	ff 1c       	adc	r15, r15
     746:	00 1f       	adc	r16, r16
     748:	11 1f       	adc	r17, r17
     74a:	6f 5f       	subi	r22, 0xFF	; 255
     74c:	7f 4f       	sbci	r23, 0xFF	; 255
     74e:	6f 31       	cpi	r22, 0x1F	; 31
     750:	71 05       	cpc	r23, r1
     752:	31 f7       	brne	.-52     	; 0x720 <__divsf3+0xda>
     754:	da 01       	movw	r26, r20
     756:	c9 01       	movw	r24, r18
     758:	8f 77       	andi	r24, 0x7F	; 127
     75a:	90 70       	andi	r25, 0x00	; 0
     75c:	a0 70       	andi	r26, 0x00	; 0
     75e:	b0 70       	andi	r27, 0x00	; 0
     760:	80 34       	cpi	r24, 0x40	; 64
     762:	91 05       	cpc	r25, r1
     764:	a1 05       	cpc	r26, r1
     766:	b1 05       	cpc	r27, r1
     768:	61 f4       	brne	.+24     	; 0x782 <__divsf3+0x13c>
     76a:	27 fd       	sbrc	r18, 7
     76c:	0a c0       	rjmp	.+20     	; 0x782 <__divsf3+0x13c>
     76e:	e1 14       	cp	r14, r1
     770:	f1 04       	cpc	r15, r1
     772:	01 05       	cpc	r16, r1
     774:	11 05       	cpc	r17, r1
     776:	29 f0       	breq	.+10     	; 0x782 <__divsf3+0x13c>
     778:	20 5c       	subi	r18, 0xC0	; 192
     77a:	3f 4f       	sbci	r19, 0xFF	; 255
     77c:	4f 4f       	sbci	r20, 0xFF	; 255
     77e:	5f 4f       	sbci	r21, 0xFF	; 255
     780:	20 78       	andi	r18, 0x80	; 128
     782:	2d 87       	std	Y+13, r18	; 0x0d
     784:	3e 87       	std	Y+14, r19	; 0x0e
     786:	4f 87       	std	Y+15, r20	; 0x0f
     788:	58 8b       	std	Y+16, r21	; 0x10
     78a:	be 01       	movw	r22, r28
     78c:	67 5f       	subi	r22, 0xF7	; 247
     78e:	7f 4f       	sbci	r23, 0xFF	; 255
     790:	cb 01       	movw	r24, r22
     792:	0e 94 b3 04 	call	0x966	; 0x966 <__pack_f>
     796:	68 96       	adiw	r28, 0x18	; 24
     798:	ea e0       	ldi	r30, 0x0A	; 10
     79a:	0c 94 e4 15 	jmp	0x2bc8	; 0x2bc8 <__epilogue_restores__+0x10>

0000079e <__gtsf2>:
     79e:	a8 e1       	ldi	r26, 0x18	; 24
     7a0:	b0 e0       	ldi	r27, 0x00	; 0
     7a2:	e5 ed       	ldi	r30, 0xD5	; 213
     7a4:	f3 e0       	ldi	r31, 0x03	; 3
     7a6:	0c 94 cc 15 	jmp	0x2b98	; 0x2b98 <__prologue_saves__+0x18>
     7aa:	69 83       	std	Y+1, r22	; 0x01
     7ac:	7a 83       	std	Y+2, r23	; 0x02
     7ae:	8b 83       	std	Y+3, r24	; 0x03
     7b0:	9c 83       	std	Y+4, r25	; 0x04
     7b2:	2d 83       	std	Y+5, r18	; 0x05
     7b4:	3e 83       	std	Y+6, r19	; 0x06
     7b6:	4f 83       	std	Y+7, r20	; 0x07
     7b8:	58 87       	std	Y+8, r21	; 0x08
     7ba:	89 e0       	ldi	r24, 0x09	; 9
     7bc:	e8 2e       	mov	r14, r24
     7be:	f1 2c       	mov	r15, r1
     7c0:	ec 0e       	add	r14, r28
     7c2:	fd 1e       	adc	r15, r29
     7c4:	ce 01       	movw	r24, r28
     7c6:	01 96       	adiw	r24, 0x01	; 1
     7c8:	b7 01       	movw	r22, r14
     7ca:	0e 94 88 05 	call	0xb10	; 0xb10 <__unpack_f>
     7ce:	8e 01       	movw	r16, r28
     7d0:	0f 5e       	subi	r16, 0xEF	; 239
     7d2:	1f 4f       	sbci	r17, 0xFF	; 255
     7d4:	ce 01       	movw	r24, r28
     7d6:	05 96       	adiw	r24, 0x05	; 5
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 88 05 	call	0xb10	; 0xb10 <__unpack_f>
     7de:	89 85       	ldd	r24, Y+9	; 0x09
     7e0:	82 30       	cpi	r24, 0x02	; 2
     7e2:	40 f0       	brcs	.+16     	; 0x7f4 <__gtsf2+0x56>
     7e4:	89 89       	ldd	r24, Y+17	; 0x11
     7e6:	82 30       	cpi	r24, 0x02	; 2
     7e8:	28 f0       	brcs	.+10     	; 0x7f4 <__gtsf2+0x56>
     7ea:	c7 01       	movw	r24, r14
     7ec:	b8 01       	movw	r22, r16
     7ee:	0e 94 00 06 	call	0xc00	; 0xc00 <__fpcmp_parts_f>
     7f2:	01 c0       	rjmp	.+2      	; 0x7f6 <__gtsf2+0x58>
     7f4:	8f ef       	ldi	r24, 0xFF	; 255
     7f6:	68 96       	adiw	r28, 0x18	; 24
     7f8:	e6 e0       	ldi	r30, 0x06	; 6
     7fa:	0c 94 e8 15 	jmp	0x2bd0	; 0x2bd0 <__epilogue_restores__+0x18>

000007fe <__gesf2>:
     7fe:	a8 e1       	ldi	r26, 0x18	; 24
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e5 e0       	ldi	r30, 0x05	; 5
     804:	f4 e0       	ldi	r31, 0x04	; 4
     806:	0c 94 cc 15 	jmp	0x2b98	; 0x2b98 <__prologue_saves__+0x18>
     80a:	69 83       	std	Y+1, r22	; 0x01
     80c:	7a 83       	std	Y+2, r23	; 0x02
     80e:	8b 83       	std	Y+3, r24	; 0x03
     810:	9c 83       	std	Y+4, r25	; 0x04
     812:	2d 83       	std	Y+5, r18	; 0x05
     814:	3e 83       	std	Y+6, r19	; 0x06
     816:	4f 83       	std	Y+7, r20	; 0x07
     818:	58 87       	std	Y+8, r21	; 0x08
     81a:	89 e0       	ldi	r24, 0x09	; 9
     81c:	e8 2e       	mov	r14, r24
     81e:	f1 2c       	mov	r15, r1
     820:	ec 0e       	add	r14, r28
     822:	fd 1e       	adc	r15, r29
     824:	ce 01       	movw	r24, r28
     826:	01 96       	adiw	r24, 0x01	; 1
     828:	b7 01       	movw	r22, r14
     82a:	0e 94 88 05 	call	0xb10	; 0xb10 <__unpack_f>
     82e:	8e 01       	movw	r16, r28
     830:	0f 5e       	subi	r16, 0xEF	; 239
     832:	1f 4f       	sbci	r17, 0xFF	; 255
     834:	ce 01       	movw	r24, r28
     836:	05 96       	adiw	r24, 0x05	; 5
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 88 05 	call	0xb10	; 0xb10 <__unpack_f>
     83e:	89 85       	ldd	r24, Y+9	; 0x09
     840:	82 30       	cpi	r24, 0x02	; 2
     842:	40 f0       	brcs	.+16     	; 0x854 <__gesf2+0x56>
     844:	89 89       	ldd	r24, Y+17	; 0x11
     846:	82 30       	cpi	r24, 0x02	; 2
     848:	28 f0       	brcs	.+10     	; 0x854 <__gesf2+0x56>
     84a:	c7 01       	movw	r24, r14
     84c:	b8 01       	movw	r22, r16
     84e:	0e 94 00 06 	call	0xc00	; 0xc00 <__fpcmp_parts_f>
     852:	01 c0       	rjmp	.+2      	; 0x856 <__gesf2+0x58>
     854:	8f ef       	ldi	r24, 0xFF	; 255
     856:	68 96       	adiw	r28, 0x18	; 24
     858:	e6 e0       	ldi	r30, 0x06	; 6
     85a:	0c 94 e8 15 	jmp	0x2bd0	; 0x2bd0 <__epilogue_restores__+0x18>

0000085e <__ltsf2>:
     85e:	a8 e1       	ldi	r26, 0x18	; 24
     860:	b0 e0       	ldi	r27, 0x00	; 0
     862:	e5 e3       	ldi	r30, 0x35	; 53
     864:	f4 e0       	ldi	r31, 0x04	; 4
     866:	0c 94 cc 15 	jmp	0x2b98	; 0x2b98 <__prologue_saves__+0x18>
     86a:	69 83       	std	Y+1, r22	; 0x01
     86c:	7a 83       	std	Y+2, r23	; 0x02
     86e:	8b 83       	std	Y+3, r24	; 0x03
     870:	9c 83       	std	Y+4, r25	; 0x04
     872:	2d 83       	std	Y+5, r18	; 0x05
     874:	3e 83       	std	Y+6, r19	; 0x06
     876:	4f 83       	std	Y+7, r20	; 0x07
     878:	58 87       	std	Y+8, r21	; 0x08
     87a:	89 e0       	ldi	r24, 0x09	; 9
     87c:	e8 2e       	mov	r14, r24
     87e:	f1 2c       	mov	r15, r1
     880:	ec 0e       	add	r14, r28
     882:	fd 1e       	adc	r15, r29
     884:	ce 01       	movw	r24, r28
     886:	01 96       	adiw	r24, 0x01	; 1
     888:	b7 01       	movw	r22, r14
     88a:	0e 94 88 05 	call	0xb10	; 0xb10 <__unpack_f>
     88e:	8e 01       	movw	r16, r28
     890:	0f 5e       	subi	r16, 0xEF	; 239
     892:	1f 4f       	sbci	r17, 0xFF	; 255
     894:	ce 01       	movw	r24, r28
     896:	05 96       	adiw	r24, 0x05	; 5
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 88 05 	call	0xb10	; 0xb10 <__unpack_f>
     89e:	89 85       	ldd	r24, Y+9	; 0x09
     8a0:	82 30       	cpi	r24, 0x02	; 2
     8a2:	40 f0       	brcs	.+16     	; 0x8b4 <__ltsf2+0x56>
     8a4:	89 89       	ldd	r24, Y+17	; 0x11
     8a6:	82 30       	cpi	r24, 0x02	; 2
     8a8:	28 f0       	brcs	.+10     	; 0x8b4 <__ltsf2+0x56>
     8aa:	c7 01       	movw	r24, r14
     8ac:	b8 01       	movw	r22, r16
     8ae:	0e 94 00 06 	call	0xc00	; 0xc00 <__fpcmp_parts_f>
     8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <__ltsf2+0x58>
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	68 96       	adiw	r28, 0x18	; 24
     8b8:	e6 e0       	ldi	r30, 0x06	; 6
     8ba:	0c 94 e8 15 	jmp	0x2bd0	; 0x2bd0 <__epilogue_restores__+0x18>

000008be <__fixsfsi>:
     8be:	ac e0       	ldi	r26, 0x0C	; 12
     8c0:	b0 e0       	ldi	r27, 0x00	; 0
     8c2:	e5 e6       	ldi	r30, 0x65	; 101
     8c4:	f4 e0       	ldi	r31, 0x04	; 4
     8c6:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__prologue_saves__+0x20>
     8ca:	69 83       	std	Y+1, r22	; 0x01
     8cc:	7a 83       	std	Y+2, r23	; 0x02
     8ce:	8b 83       	std	Y+3, r24	; 0x03
     8d0:	9c 83       	std	Y+4, r25	; 0x04
     8d2:	ce 01       	movw	r24, r28
     8d4:	01 96       	adiw	r24, 0x01	; 1
     8d6:	be 01       	movw	r22, r28
     8d8:	6b 5f       	subi	r22, 0xFB	; 251
     8da:	7f 4f       	sbci	r23, 0xFF	; 255
     8dc:	0e 94 88 05 	call	0xb10	; 0xb10 <__unpack_f>
     8e0:	8d 81       	ldd	r24, Y+5	; 0x05
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	61 f1       	breq	.+88     	; 0x93e <__stack+0x3f>
     8e6:	82 30       	cpi	r24, 0x02	; 2
     8e8:	50 f1       	brcs	.+84     	; 0x93e <__stack+0x3f>
     8ea:	84 30       	cpi	r24, 0x04	; 4
     8ec:	21 f4       	brne	.+8      	; 0x8f6 <__fixsfsi+0x38>
     8ee:	8e 81       	ldd	r24, Y+6	; 0x06
     8f0:	88 23       	and	r24, r24
     8f2:	51 f1       	breq	.+84     	; 0x948 <__stack+0x49>
     8f4:	2e c0       	rjmp	.+92     	; 0x952 <__stack+0x53>
     8f6:	2f 81       	ldd	r18, Y+7	; 0x07
     8f8:	38 85       	ldd	r19, Y+8	; 0x08
     8fa:	37 fd       	sbrc	r19, 7
     8fc:	20 c0       	rjmp	.+64     	; 0x93e <__stack+0x3f>
     8fe:	6e 81       	ldd	r22, Y+6	; 0x06
     900:	2f 31       	cpi	r18, 0x1F	; 31
     902:	31 05       	cpc	r19, r1
     904:	1c f0       	brlt	.+6      	; 0x90c <__stack+0xd>
     906:	66 23       	and	r22, r22
     908:	f9 f0       	breq	.+62     	; 0x948 <__stack+0x49>
     90a:	23 c0       	rjmp	.+70     	; 0x952 <__stack+0x53>
     90c:	8e e1       	ldi	r24, 0x1E	; 30
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	82 1b       	sub	r24, r18
     912:	93 0b       	sbc	r25, r19
     914:	29 85       	ldd	r18, Y+9	; 0x09
     916:	3a 85       	ldd	r19, Y+10	; 0x0a
     918:	4b 85       	ldd	r20, Y+11	; 0x0b
     91a:	5c 85       	ldd	r21, Y+12	; 0x0c
     91c:	04 c0       	rjmp	.+8      	; 0x926 <__stack+0x27>
     91e:	56 95       	lsr	r21
     920:	47 95       	ror	r20
     922:	37 95       	ror	r19
     924:	27 95       	ror	r18
     926:	8a 95       	dec	r24
     928:	d2 f7       	brpl	.-12     	; 0x91e <__stack+0x1f>
     92a:	66 23       	and	r22, r22
     92c:	b1 f0       	breq	.+44     	; 0x95a <__stack+0x5b>
     92e:	50 95       	com	r21
     930:	40 95       	com	r20
     932:	30 95       	com	r19
     934:	21 95       	neg	r18
     936:	3f 4f       	sbci	r19, 0xFF	; 255
     938:	4f 4f       	sbci	r20, 0xFF	; 255
     93a:	5f 4f       	sbci	r21, 0xFF	; 255
     93c:	0e c0       	rjmp	.+28     	; 0x95a <__stack+0x5b>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e0       	ldi	r21, 0x00	; 0
     946:	09 c0       	rjmp	.+18     	; 0x95a <__stack+0x5b>
     948:	2f ef       	ldi	r18, 0xFF	; 255
     94a:	3f ef       	ldi	r19, 0xFF	; 255
     94c:	4f ef       	ldi	r20, 0xFF	; 255
     94e:	5f e7       	ldi	r21, 0x7F	; 127
     950:	04 c0       	rjmp	.+8      	; 0x95a <__stack+0x5b>
     952:	20 e0       	ldi	r18, 0x00	; 0
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	40 e0       	ldi	r20, 0x00	; 0
     958:	50 e8       	ldi	r21, 0x80	; 128
     95a:	b9 01       	movw	r22, r18
     95c:	ca 01       	movw	r24, r20
     95e:	2c 96       	adiw	r28, 0x0c	; 12
     960:	e2 e0       	ldi	r30, 0x02	; 2
     962:	0c 94 ec 15 	jmp	0x2bd8	; 0x2bd8 <__epilogue_restores__+0x20>

00000966 <__pack_f>:
     966:	df 92       	push	r13
     968:	ef 92       	push	r14
     96a:	ff 92       	push	r15
     96c:	0f 93       	push	r16
     96e:	1f 93       	push	r17
     970:	fc 01       	movw	r30, r24
     972:	e4 80       	ldd	r14, Z+4	; 0x04
     974:	f5 80       	ldd	r15, Z+5	; 0x05
     976:	06 81       	ldd	r16, Z+6	; 0x06
     978:	17 81       	ldd	r17, Z+7	; 0x07
     97a:	d1 80       	ldd	r13, Z+1	; 0x01
     97c:	80 81       	ld	r24, Z
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	48 f4       	brcc	.+18     	; 0x994 <__pack_f+0x2e>
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	a0 e1       	ldi	r26, 0x10	; 16
     988:	b0 e0       	ldi	r27, 0x00	; 0
     98a:	e8 2a       	or	r14, r24
     98c:	f9 2a       	or	r15, r25
     98e:	0a 2b       	or	r16, r26
     990:	1b 2b       	or	r17, r27
     992:	a5 c0       	rjmp	.+330    	; 0xade <__pack_f+0x178>
     994:	84 30       	cpi	r24, 0x04	; 4
     996:	09 f4       	brne	.+2      	; 0x99a <__pack_f+0x34>
     998:	9f c0       	rjmp	.+318    	; 0xad8 <__pack_f+0x172>
     99a:	82 30       	cpi	r24, 0x02	; 2
     99c:	21 f4       	brne	.+8      	; 0x9a6 <__pack_f+0x40>
     99e:	ee 24       	eor	r14, r14
     9a0:	ff 24       	eor	r15, r15
     9a2:	87 01       	movw	r16, r14
     9a4:	05 c0       	rjmp	.+10     	; 0x9b0 <__pack_f+0x4a>
     9a6:	e1 14       	cp	r14, r1
     9a8:	f1 04       	cpc	r15, r1
     9aa:	01 05       	cpc	r16, r1
     9ac:	11 05       	cpc	r17, r1
     9ae:	19 f4       	brne	.+6      	; 0x9b6 <__pack_f+0x50>
     9b0:	e0 e0       	ldi	r30, 0x00	; 0
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	96 c0       	rjmp	.+300    	; 0xae2 <__pack_f+0x17c>
     9b6:	62 81       	ldd	r22, Z+2	; 0x02
     9b8:	73 81       	ldd	r23, Z+3	; 0x03
     9ba:	9f ef       	ldi	r25, 0xFF	; 255
     9bc:	62 38       	cpi	r22, 0x82	; 130
     9be:	79 07       	cpc	r23, r25
     9c0:	0c f0       	brlt	.+2      	; 0x9c4 <__pack_f+0x5e>
     9c2:	5b c0       	rjmp	.+182    	; 0xa7a <__pack_f+0x114>
     9c4:	22 e8       	ldi	r18, 0x82	; 130
     9c6:	3f ef       	ldi	r19, 0xFF	; 255
     9c8:	26 1b       	sub	r18, r22
     9ca:	37 0b       	sbc	r19, r23
     9cc:	2a 31       	cpi	r18, 0x1A	; 26
     9ce:	31 05       	cpc	r19, r1
     9d0:	2c f0       	brlt	.+10     	; 0x9dc <__pack_f+0x76>
     9d2:	20 e0       	ldi	r18, 0x00	; 0
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	40 e0       	ldi	r20, 0x00	; 0
     9d8:	50 e0       	ldi	r21, 0x00	; 0
     9da:	2a c0       	rjmp	.+84     	; 0xa30 <__pack_f+0xca>
     9dc:	b8 01       	movw	r22, r16
     9de:	a7 01       	movw	r20, r14
     9e0:	02 2e       	mov	r0, r18
     9e2:	04 c0       	rjmp	.+8      	; 0x9ec <__pack_f+0x86>
     9e4:	76 95       	lsr	r23
     9e6:	67 95       	ror	r22
     9e8:	57 95       	ror	r21
     9ea:	47 95       	ror	r20
     9ec:	0a 94       	dec	r0
     9ee:	d2 f7       	brpl	.-12     	; 0x9e4 <__pack_f+0x7e>
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	a0 e0       	ldi	r26, 0x00	; 0
     9f6:	b0 e0       	ldi	r27, 0x00	; 0
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__pack_f+0x9c>
     9fa:	88 0f       	add	r24, r24
     9fc:	99 1f       	adc	r25, r25
     9fe:	aa 1f       	adc	r26, r26
     a00:	bb 1f       	adc	r27, r27
     a02:	2a 95       	dec	r18
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__pack_f+0x94>
     a06:	01 97       	sbiw	r24, 0x01	; 1
     a08:	a1 09       	sbc	r26, r1
     a0a:	b1 09       	sbc	r27, r1
     a0c:	8e 21       	and	r24, r14
     a0e:	9f 21       	and	r25, r15
     a10:	a0 23       	and	r26, r16
     a12:	b1 23       	and	r27, r17
     a14:	00 97       	sbiw	r24, 0x00	; 0
     a16:	a1 05       	cpc	r26, r1
     a18:	b1 05       	cpc	r27, r1
     a1a:	21 f0       	breq	.+8      	; 0xa24 <__pack_f+0xbe>
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	9a 01       	movw	r18, r20
     a26:	ab 01       	movw	r20, r22
     a28:	28 2b       	or	r18, r24
     a2a:	39 2b       	or	r19, r25
     a2c:	4a 2b       	or	r20, r26
     a2e:	5b 2b       	or	r21, r27
     a30:	da 01       	movw	r26, r20
     a32:	c9 01       	movw	r24, r18
     a34:	8f 77       	andi	r24, 0x7F	; 127
     a36:	90 70       	andi	r25, 0x00	; 0
     a38:	a0 70       	andi	r26, 0x00	; 0
     a3a:	b0 70       	andi	r27, 0x00	; 0
     a3c:	80 34       	cpi	r24, 0x40	; 64
     a3e:	91 05       	cpc	r25, r1
     a40:	a1 05       	cpc	r26, r1
     a42:	b1 05       	cpc	r27, r1
     a44:	39 f4       	brne	.+14     	; 0xa54 <__pack_f+0xee>
     a46:	27 ff       	sbrs	r18, 7
     a48:	09 c0       	rjmp	.+18     	; 0xa5c <__pack_f+0xf6>
     a4a:	20 5c       	subi	r18, 0xC0	; 192
     a4c:	3f 4f       	sbci	r19, 0xFF	; 255
     a4e:	4f 4f       	sbci	r20, 0xFF	; 255
     a50:	5f 4f       	sbci	r21, 0xFF	; 255
     a52:	04 c0       	rjmp	.+8      	; 0xa5c <__pack_f+0xf6>
     a54:	21 5c       	subi	r18, 0xC1	; 193
     a56:	3f 4f       	sbci	r19, 0xFF	; 255
     a58:	4f 4f       	sbci	r20, 0xFF	; 255
     a5a:	5f 4f       	sbci	r21, 0xFF	; 255
     a5c:	e0 e0       	ldi	r30, 0x00	; 0
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	20 30       	cpi	r18, 0x00	; 0
     a62:	a0 e0       	ldi	r26, 0x00	; 0
     a64:	3a 07       	cpc	r19, r26
     a66:	a0 e0       	ldi	r26, 0x00	; 0
     a68:	4a 07       	cpc	r20, r26
     a6a:	a0 e4       	ldi	r26, 0x40	; 64
     a6c:	5a 07       	cpc	r21, r26
     a6e:	10 f0       	brcs	.+4      	; 0xa74 <__pack_f+0x10e>
     a70:	e1 e0       	ldi	r30, 0x01	; 1
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	79 01       	movw	r14, r18
     a76:	8a 01       	movw	r16, r20
     a78:	27 c0       	rjmp	.+78     	; 0xac8 <__pack_f+0x162>
     a7a:	60 38       	cpi	r22, 0x80	; 128
     a7c:	71 05       	cpc	r23, r1
     a7e:	64 f5       	brge	.+88     	; 0xad8 <__pack_f+0x172>
     a80:	fb 01       	movw	r30, r22
     a82:	e1 58       	subi	r30, 0x81	; 129
     a84:	ff 4f       	sbci	r31, 0xFF	; 255
     a86:	d8 01       	movw	r26, r16
     a88:	c7 01       	movw	r24, r14
     a8a:	8f 77       	andi	r24, 0x7F	; 127
     a8c:	90 70       	andi	r25, 0x00	; 0
     a8e:	a0 70       	andi	r26, 0x00	; 0
     a90:	b0 70       	andi	r27, 0x00	; 0
     a92:	80 34       	cpi	r24, 0x40	; 64
     a94:	91 05       	cpc	r25, r1
     a96:	a1 05       	cpc	r26, r1
     a98:	b1 05       	cpc	r27, r1
     a9a:	39 f4       	brne	.+14     	; 0xaaa <__pack_f+0x144>
     a9c:	e7 fe       	sbrs	r14, 7
     a9e:	0d c0       	rjmp	.+26     	; 0xaba <__pack_f+0x154>
     aa0:	80 e4       	ldi	r24, 0x40	; 64
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__pack_f+0x14c>
     aaa:	8f e3       	ldi	r24, 0x3F	; 63
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	a0 e0       	ldi	r26, 0x00	; 0
     ab0:	b0 e0       	ldi	r27, 0x00	; 0
     ab2:	e8 0e       	add	r14, r24
     ab4:	f9 1e       	adc	r15, r25
     ab6:	0a 1f       	adc	r16, r26
     ab8:	1b 1f       	adc	r17, r27
     aba:	17 ff       	sbrs	r17, 7
     abc:	05 c0       	rjmp	.+10     	; 0xac8 <__pack_f+0x162>
     abe:	16 95       	lsr	r17
     ac0:	07 95       	ror	r16
     ac2:	f7 94       	ror	r15
     ac4:	e7 94       	ror	r14
     ac6:	31 96       	adiw	r30, 0x01	; 1
     ac8:	87 e0       	ldi	r24, 0x07	; 7
     aca:	16 95       	lsr	r17
     acc:	07 95       	ror	r16
     ace:	f7 94       	ror	r15
     ad0:	e7 94       	ror	r14
     ad2:	8a 95       	dec	r24
     ad4:	d1 f7       	brne	.-12     	; 0xaca <__pack_f+0x164>
     ad6:	05 c0       	rjmp	.+10     	; 0xae2 <__pack_f+0x17c>
     ad8:	ee 24       	eor	r14, r14
     ada:	ff 24       	eor	r15, r15
     adc:	87 01       	movw	r16, r14
     ade:	ef ef       	ldi	r30, 0xFF	; 255
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	6e 2f       	mov	r22, r30
     ae4:	67 95       	ror	r22
     ae6:	66 27       	eor	r22, r22
     ae8:	67 95       	ror	r22
     aea:	90 2f       	mov	r25, r16
     aec:	9f 77       	andi	r25, 0x7F	; 127
     aee:	d7 94       	ror	r13
     af0:	dd 24       	eor	r13, r13
     af2:	d7 94       	ror	r13
     af4:	8e 2f       	mov	r24, r30
     af6:	86 95       	lsr	r24
     af8:	49 2f       	mov	r20, r25
     afa:	46 2b       	or	r20, r22
     afc:	58 2f       	mov	r21, r24
     afe:	5d 29       	or	r21, r13
     b00:	b7 01       	movw	r22, r14
     b02:	ca 01       	movw	r24, r20
     b04:	1f 91       	pop	r17
     b06:	0f 91       	pop	r16
     b08:	ff 90       	pop	r15
     b0a:	ef 90       	pop	r14
     b0c:	df 90       	pop	r13
     b0e:	08 95       	ret

00000b10 <__unpack_f>:
     b10:	fc 01       	movw	r30, r24
     b12:	db 01       	movw	r26, r22
     b14:	40 81       	ld	r20, Z
     b16:	51 81       	ldd	r21, Z+1	; 0x01
     b18:	22 81       	ldd	r18, Z+2	; 0x02
     b1a:	62 2f       	mov	r22, r18
     b1c:	6f 77       	andi	r22, 0x7F	; 127
     b1e:	70 e0       	ldi	r23, 0x00	; 0
     b20:	22 1f       	adc	r18, r18
     b22:	22 27       	eor	r18, r18
     b24:	22 1f       	adc	r18, r18
     b26:	93 81       	ldd	r25, Z+3	; 0x03
     b28:	89 2f       	mov	r24, r25
     b2a:	88 0f       	add	r24, r24
     b2c:	82 2b       	or	r24, r18
     b2e:	28 2f       	mov	r18, r24
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	99 1f       	adc	r25, r25
     b34:	99 27       	eor	r25, r25
     b36:	99 1f       	adc	r25, r25
     b38:	11 96       	adiw	r26, 0x01	; 1
     b3a:	9c 93       	st	X, r25
     b3c:	11 97       	sbiw	r26, 0x01	; 1
     b3e:	21 15       	cp	r18, r1
     b40:	31 05       	cpc	r19, r1
     b42:	a9 f5       	brne	.+106    	; 0xbae <__unpack_f+0x9e>
     b44:	41 15       	cp	r20, r1
     b46:	51 05       	cpc	r21, r1
     b48:	61 05       	cpc	r22, r1
     b4a:	71 05       	cpc	r23, r1
     b4c:	11 f4       	brne	.+4      	; 0xb52 <__unpack_f+0x42>
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	37 c0       	rjmp	.+110    	; 0xbc0 <__unpack_f+0xb0>
     b52:	82 e8       	ldi	r24, 0x82	; 130
     b54:	9f ef       	ldi	r25, 0xFF	; 255
     b56:	13 96       	adiw	r26, 0x03	; 3
     b58:	9c 93       	st	X, r25
     b5a:	8e 93       	st	-X, r24
     b5c:	12 97       	sbiw	r26, 0x02	; 2
     b5e:	9a 01       	movw	r18, r20
     b60:	ab 01       	movw	r20, r22
     b62:	67 e0       	ldi	r22, 0x07	; 7
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	6a 95       	dec	r22
     b6e:	d1 f7       	brne	.-12     	; 0xb64 <__unpack_f+0x54>
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	8c 93       	st	X, r24
     b74:	0d c0       	rjmp	.+26     	; 0xb90 <__unpack_f+0x80>
     b76:	22 0f       	add	r18, r18
     b78:	33 1f       	adc	r19, r19
     b7a:	44 1f       	adc	r20, r20
     b7c:	55 1f       	adc	r21, r21
     b7e:	12 96       	adiw	r26, 0x02	; 2
     b80:	8d 91       	ld	r24, X+
     b82:	9c 91       	ld	r25, X
     b84:	13 97       	sbiw	r26, 0x03	; 3
     b86:	01 97       	sbiw	r24, 0x01	; 1
     b88:	13 96       	adiw	r26, 0x03	; 3
     b8a:	9c 93       	st	X, r25
     b8c:	8e 93       	st	-X, r24
     b8e:	12 97       	sbiw	r26, 0x02	; 2
     b90:	20 30       	cpi	r18, 0x00	; 0
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	38 07       	cpc	r19, r24
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	48 07       	cpc	r20, r24
     b9a:	80 e4       	ldi	r24, 0x40	; 64
     b9c:	58 07       	cpc	r21, r24
     b9e:	58 f3       	brcs	.-42     	; 0xb76 <__unpack_f+0x66>
     ba0:	14 96       	adiw	r26, 0x04	; 4
     ba2:	2d 93       	st	X+, r18
     ba4:	3d 93       	st	X+, r19
     ba6:	4d 93       	st	X+, r20
     ba8:	5c 93       	st	X, r21
     baa:	17 97       	sbiw	r26, 0x07	; 7
     bac:	08 95       	ret
     bae:	2f 3f       	cpi	r18, 0xFF	; 255
     bb0:	31 05       	cpc	r19, r1
     bb2:	79 f4       	brne	.+30     	; 0xbd2 <__unpack_f+0xc2>
     bb4:	41 15       	cp	r20, r1
     bb6:	51 05       	cpc	r21, r1
     bb8:	61 05       	cpc	r22, r1
     bba:	71 05       	cpc	r23, r1
     bbc:	19 f4       	brne	.+6      	; 0xbc4 <__unpack_f+0xb4>
     bbe:	84 e0       	ldi	r24, 0x04	; 4
     bc0:	8c 93       	st	X, r24
     bc2:	08 95       	ret
     bc4:	64 ff       	sbrs	r22, 4
     bc6:	03 c0       	rjmp	.+6      	; 0xbce <__unpack_f+0xbe>
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	8c 93       	st	X, r24
     bcc:	12 c0       	rjmp	.+36     	; 0xbf2 <__unpack_f+0xe2>
     bce:	1c 92       	st	X, r1
     bd0:	10 c0       	rjmp	.+32     	; 0xbf2 <__unpack_f+0xe2>
     bd2:	2f 57       	subi	r18, 0x7F	; 127
     bd4:	30 40       	sbci	r19, 0x00	; 0
     bd6:	13 96       	adiw	r26, 0x03	; 3
     bd8:	3c 93       	st	X, r19
     bda:	2e 93       	st	-X, r18
     bdc:	12 97       	sbiw	r26, 0x02	; 2
     bde:	83 e0       	ldi	r24, 0x03	; 3
     be0:	8c 93       	st	X, r24
     be2:	87 e0       	ldi	r24, 0x07	; 7
     be4:	44 0f       	add	r20, r20
     be6:	55 1f       	adc	r21, r21
     be8:	66 1f       	adc	r22, r22
     bea:	77 1f       	adc	r23, r23
     bec:	8a 95       	dec	r24
     bee:	d1 f7       	brne	.-12     	; 0xbe4 <__unpack_f+0xd4>
     bf0:	70 64       	ori	r23, 0x40	; 64
     bf2:	14 96       	adiw	r26, 0x04	; 4
     bf4:	4d 93       	st	X+, r20
     bf6:	5d 93       	st	X+, r21
     bf8:	6d 93       	st	X+, r22
     bfa:	7c 93       	st	X, r23
     bfc:	17 97       	sbiw	r26, 0x07	; 7
     bfe:	08 95       	ret

00000c00 <__fpcmp_parts_f>:
     c00:	1f 93       	push	r17
     c02:	dc 01       	movw	r26, r24
     c04:	fb 01       	movw	r30, r22
     c06:	9c 91       	ld	r25, X
     c08:	92 30       	cpi	r25, 0x02	; 2
     c0a:	08 f4       	brcc	.+2      	; 0xc0e <__fpcmp_parts_f+0xe>
     c0c:	47 c0       	rjmp	.+142    	; 0xc9c <__fpcmp_parts_f+0x9c>
     c0e:	80 81       	ld	r24, Z
     c10:	82 30       	cpi	r24, 0x02	; 2
     c12:	08 f4       	brcc	.+2      	; 0xc16 <__fpcmp_parts_f+0x16>
     c14:	43 c0       	rjmp	.+134    	; 0xc9c <__fpcmp_parts_f+0x9c>
     c16:	94 30       	cpi	r25, 0x04	; 4
     c18:	51 f4       	brne	.+20     	; 0xc2e <__fpcmp_parts_f+0x2e>
     c1a:	11 96       	adiw	r26, 0x01	; 1
     c1c:	1c 91       	ld	r17, X
     c1e:	84 30       	cpi	r24, 0x04	; 4
     c20:	99 f5       	brne	.+102    	; 0xc88 <__fpcmp_parts_f+0x88>
     c22:	81 81       	ldd	r24, Z+1	; 0x01
     c24:	68 2f       	mov	r22, r24
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	61 1b       	sub	r22, r17
     c2a:	71 09       	sbc	r23, r1
     c2c:	3f c0       	rjmp	.+126    	; 0xcac <__fpcmp_parts_f+0xac>
     c2e:	84 30       	cpi	r24, 0x04	; 4
     c30:	21 f0       	breq	.+8      	; 0xc3a <__fpcmp_parts_f+0x3a>
     c32:	92 30       	cpi	r25, 0x02	; 2
     c34:	31 f4       	brne	.+12     	; 0xc42 <__fpcmp_parts_f+0x42>
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	b9 f1       	breq	.+110    	; 0xca8 <__fpcmp_parts_f+0xa8>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	88 23       	and	r24, r24
     c3e:	89 f1       	breq	.+98     	; 0xca2 <__fpcmp_parts_f+0xa2>
     c40:	2d c0       	rjmp	.+90     	; 0xc9c <__fpcmp_parts_f+0x9c>
     c42:	11 96       	adiw	r26, 0x01	; 1
     c44:	1c 91       	ld	r17, X
     c46:	11 97       	sbiw	r26, 0x01	; 1
     c48:	82 30       	cpi	r24, 0x02	; 2
     c4a:	f1 f0       	breq	.+60     	; 0xc88 <__fpcmp_parts_f+0x88>
     c4c:	81 81       	ldd	r24, Z+1	; 0x01
     c4e:	18 17       	cp	r17, r24
     c50:	d9 f4       	brne	.+54     	; 0xc88 <__fpcmp_parts_f+0x88>
     c52:	12 96       	adiw	r26, 0x02	; 2
     c54:	2d 91       	ld	r18, X+
     c56:	3c 91       	ld	r19, X
     c58:	13 97       	sbiw	r26, 0x03	; 3
     c5a:	82 81       	ldd	r24, Z+2	; 0x02
     c5c:	93 81       	ldd	r25, Z+3	; 0x03
     c5e:	82 17       	cp	r24, r18
     c60:	93 07       	cpc	r25, r19
     c62:	94 f0       	brlt	.+36     	; 0xc88 <__fpcmp_parts_f+0x88>
     c64:	28 17       	cp	r18, r24
     c66:	39 07       	cpc	r19, r25
     c68:	bc f0       	brlt	.+46     	; 0xc98 <__fpcmp_parts_f+0x98>
     c6a:	14 96       	adiw	r26, 0x04	; 4
     c6c:	8d 91       	ld	r24, X+
     c6e:	9d 91       	ld	r25, X+
     c70:	0d 90       	ld	r0, X+
     c72:	bc 91       	ld	r27, X
     c74:	a0 2d       	mov	r26, r0
     c76:	24 81       	ldd	r18, Z+4	; 0x04
     c78:	35 81       	ldd	r19, Z+5	; 0x05
     c7a:	46 81       	ldd	r20, Z+6	; 0x06
     c7c:	57 81       	ldd	r21, Z+7	; 0x07
     c7e:	28 17       	cp	r18, r24
     c80:	39 07       	cpc	r19, r25
     c82:	4a 07       	cpc	r20, r26
     c84:	5b 07       	cpc	r21, r27
     c86:	18 f4       	brcc	.+6      	; 0xc8e <__fpcmp_parts_f+0x8e>
     c88:	11 23       	and	r17, r17
     c8a:	41 f0       	breq	.+16     	; 0xc9c <__fpcmp_parts_f+0x9c>
     c8c:	0a c0       	rjmp	.+20     	; 0xca2 <__fpcmp_parts_f+0xa2>
     c8e:	82 17       	cp	r24, r18
     c90:	93 07       	cpc	r25, r19
     c92:	a4 07       	cpc	r26, r20
     c94:	b5 07       	cpc	r27, r21
     c96:	40 f4       	brcc	.+16     	; 0xca8 <__fpcmp_parts_f+0xa8>
     c98:	11 23       	and	r17, r17
     c9a:	19 f0       	breq	.+6      	; 0xca2 <__fpcmp_parts_f+0xa2>
     c9c:	61 e0       	ldi	r22, 0x01	; 1
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	05 c0       	rjmp	.+10     	; 0xcac <__fpcmp_parts_f+0xac>
     ca2:	6f ef       	ldi	r22, 0xFF	; 255
     ca4:	7f ef       	ldi	r23, 0xFF	; 255
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <__fpcmp_parts_f+0xac>
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	cb 01       	movw	r24, r22
     cae:	1f 91       	pop	r17
     cb0:	08 95       	ret

00000cb2 <GPIO_setupPinDirection>:
/*
 * Description:
 * Set the required direction of pin input/output.
 * If the input port number on pin number is incorrect, The function will not handle the request.
 * */
void GPIO_setupPinDirection(uint8 port_num,uint8 pin_num,GPIO_PinDirectionType direction){
     cb2:	df 93       	push	r29
     cb4:	cf 93       	push	r28
     cb6:	00 d0       	rcall	.+0      	; 0xcb8 <GPIO_setupPinDirection+0x6>
     cb8:	00 d0       	rcall	.+0      	; 0xcba <GPIO_setupPinDirection+0x8>
     cba:	0f 92       	push	r0
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	89 83       	std	Y+1, r24	; 0x01
     cc2:	6a 83       	std	Y+2, r22	; 0x02
     cc4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if(port_num >= NUM_OF_PORTS  || pin_num >= NUM_OF_PINS_PER_PORTS){
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	84 30       	cpi	r24, 0x04	; 4
     cca:	08 f0       	brcs	.+2      	; 0xcce <GPIO_setupPinDirection+0x1c>
     ccc:	9d c0       	rjmp	.+314    	; 0xe08 <GPIO_setupPinDirection+0x156>
     cce:	8a 81       	ldd	r24, Y+2	; 0x02
     cd0:	88 30       	cpi	r24, 0x08	; 8
     cd2:	08 f0       	brcs	.+2      	; 0xcd6 <GPIO_setupPinDirection+0x24>
     cd4:	99 c0       	rjmp	.+306    	; 0xe08 <GPIO_setupPinDirection+0x156>
		/* DO NOTHING */

	}
	else{
		switch(port_num)
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	3d 83       	std	Y+5, r19	; 0x05
     cde:	2c 83       	std	Y+4, r18	; 0x04
     ce0:	8c 81       	ldd	r24, Y+4	; 0x04
     ce2:	9d 81       	ldd	r25, Y+5	; 0x05
     ce4:	82 30       	cpi	r24, 0x02	; 2
     ce6:	91 05       	cpc	r25, r1
     ce8:	c1 f1       	breq	.+112    	; 0xd5a <GPIO_setupPinDirection+0xa8>
     cea:	2c 81       	ldd	r18, Y+4	; 0x04
     cec:	3d 81       	ldd	r19, Y+5	; 0x05
     cee:	23 30       	cpi	r18, 0x03	; 3
     cf0:	31 05       	cpc	r19, r1
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <GPIO_setupPinDirection+0x44>
     cf4:	5e c0       	rjmp	.+188    	; 0xdb2 <GPIO_setupPinDirection+0x100>
     cf6:	8c 81       	ldd	r24, Y+4	; 0x04
     cf8:	9d 81       	ldd	r25, Y+5	; 0x05
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	91 05       	cpc	r25, r1
     cfe:	09 f0       	breq	.+2      	; 0xd02 <GPIO_setupPinDirection+0x50>
     d00:	83 c0       	rjmp	.+262    	; 0xe08 <GPIO_setupPinDirection+0x156>
			else{
				CLEAR_BIT(DDRA,pin_num);
			}
			break;*/
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     d02:	8b 81       	ldd	r24, Y+3	; 0x03
     d04:	81 30       	cpi	r24, 0x01	; 1
     d06:	a1 f4       	brne	.+40     	; 0xd30 <GPIO_setupPinDirection+0x7e>
			{
				SET_BIT(DDRB,pin_num);
     d08:	a4 e2       	ldi	r26, 0x24	; 36
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e4 e2       	ldi	r30, 0x24	; 36
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	48 2f       	mov	r20, r24
     d14:	8a 81       	ldd	r24, Y+2	; 0x02
     d16:	28 2f       	mov	r18, r24
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	02 2e       	mov	r0, r18
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <GPIO_setupPinDirection+0x74>
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	0a 94       	dec	r0
     d28:	e2 f7       	brpl	.-8      	; 0xd22 <GPIO_setupPinDirection+0x70>
     d2a:	84 2b       	or	r24, r20
     d2c:	8c 93       	st	X, r24
     d2e:	6c c0       	rjmp	.+216    	; 0xe08 <GPIO_setupPinDirection+0x156>
			}
			else{
				CLEAR_BIT(DDRB,pin_num);
     d30:	a4 e2       	ldi	r26, 0x24	; 36
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e4 e2       	ldi	r30, 0x24	; 36
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	48 2f       	mov	r20, r24
     d3c:	8a 81       	ldd	r24, Y+2	; 0x02
     d3e:	28 2f       	mov	r18, r24
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	02 2e       	mov	r0, r18
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <GPIO_setupPinDirection+0x9c>
     d4a:	88 0f       	add	r24, r24
     d4c:	99 1f       	adc	r25, r25
     d4e:	0a 94       	dec	r0
     d50:	e2 f7       	brpl	.-8      	; 0xd4a <GPIO_setupPinDirection+0x98>
     d52:	80 95       	com	r24
     d54:	84 23       	and	r24, r20
     d56:	8c 93       	st	X, r24
     d58:	57 c0       	rjmp	.+174    	; 0xe08 <GPIO_setupPinDirection+0x156>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	81 30       	cpi	r24, 0x01	; 1
     d5e:	a1 f4       	brne	.+40     	; 0xd88 <GPIO_setupPinDirection+0xd6>
			{
				SET_BIT(DDRC,pin_num);
     d60:	a7 e2       	ldi	r26, 0x27	; 39
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e7 e2       	ldi	r30, 0x27	; 39
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	48 2f       	mov	r20, r24
     d6c:	8a 81       	ldd	r24, Y+2	; 0x02
     d6e:	28 2f       	mov	r18, r24
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	02 2e       	mov	r0, r18
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <GPIO_setupPinDirection+0xcc>
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	0a 94       	dec	r0
     d80:	e2 f7       	brpl	.-8      	; 0xd7a <GPIO_setupPinDirection+0xc8>
     d82:	84 2b       	or	r24, r20
     d84:	8c 93       	st	X, r24
     d86:	40 c0       	rjmp	.+128    	; 0xe08 <GPIO_setupPinDirection+0x156>
			}
			else{
				CLEAR_BIT(DDRC,pin_num);
     d88:	a7 e2       	ldi	r26, 0x27	; 39
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	e7 e2       	ldi	r30, 0x27	; 39
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	48 2f       	mov	r20, r24
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	02 2e       	mov	r0, r18
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <GPIO_setupPinDirection+0xf4>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	0a 94       	dec	r0
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <GPIO_setupPinDirection+0xf0>
     daa:	80 95       	com	r24
     dac:	84 23       	and	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	2b c0       	rjmp	.+86     	; 0xe08 <GPIO_setupPinDirection+0x156>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	a1 f4       	brne	.+40     	; 0xde0 <GPIO_setupPinDirection+0x12e>
			{
				SET_BIT(DDRD,pin_num);
     db8:	aa e2       	ldi	r26, 0x2A	; 42
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	ea e2       	ldi	r30, 0x2A	; 42
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	48 2f       	mov	r20, r24
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	02 2e       	mov	r0, r18
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <GPIO_setupPinDirection+0x124>
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	0a 94       	dec	r0
     dd8:	e2 f7       	brpl	.-8      	; 0xdd2 <GPIO_setupPinDirection+0x120>
     dda:	84 2b       	or	r24, r20
     ddc:	8c 93       	st	X, r24
     dde:	14 c0       	rjmp	.+40     	; 0xe08 <GPIO_setupPinDirection+0x156>
			}
			else{
				CLEAR_BIT(DDRD,pin_num);
     de0:	aa e2       	ldi	r26, 0x2A	; 42
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	ea e2       	ldi	r30, 0x2A	; 42
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	48 2f       	mov	r20, r24
     dec:	8a 81       	ldd	r24, Y+2	; 0x02
     dee:	28 2f       	mov	r18, r24
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	02 2e       	mov	r0, r18
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <GPIO_setupPinDirection+0x14c>
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	0a 94       	dec	r0
     e00:	e2 f7       	brpl	.-8      	; 0xdfa <GPIO_setupPinDirection+0x148>
     e02:	80 95       	com	r24
     e04:	84 23       	and	r24, r20
     e06:	8c 93       	st	X, r24
			break;
		}

	}

}
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	08 95       	ret

00000e18 <GPIO_writePin>:
 * Description:
 * Write the value LOGIC HIGH or LOGIC LOW on the required pin
 * If the input port number of pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 * */
void GPIO_writePin(uint8 port_num, uint8 pin_num,uint8 value){
     e18:	df 93       	push	r29
     e1a:	cf 93       	push	r28
     e1c:	00 d0       	rcall	.+0      	; 0xe1e <GPIO_writePin+0x6>
     e1e:	00 d0       	rcall	.+0      	; 0xe20 <GPIO_writePin+0x8>
     e20:	0f 92       	push	r0
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	89 83       	std	Y+1, r24	; 0x01
     e28:	6a 83       	std	Y+2, r22	; 0x02
     e2a:	4b 83       	std	Y+3, r20	; 0x03

	if(port_num >= NUM_OF_PORTS  || pin_num >= NUM_OF_PINS_PER_PORTS){
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	84 30       	cpi	r24, 0x04	; 4
     e30:	08 f0       	brcs	.+2      	; 0xe34 <GPIO_writePin+0x1c>
     e32:	9d c0       	rjmp	.+314    	; 0xf6e <GPIO_writePin+0x156>
     e34:	8a 81       	ldd	r24, Y+2	; 0x02
     e36:	88 30       	cpi	r24, 0x08	; 8
     e38:	08 f0       	brcs	.+2      	; 0xe3c <GPIO_writePin+0x24>
     e3a:	99 c0       	rjmp	.+306    	; 0xf6e <GPIO_writePin+0x156>
		/* DO NOTHING */

	}
	else
	{
		switch(port_num){
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	28 2f       	mov	r18, r24
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	3d 83       	std	Y+5, r19	; 0x05
     e44:	2c 83       	std	Y+4, r18	; 0x04
     e46:	8c 81       	ldd	r24, Y+4	; 0x04
     e48:	9d 81       	ldd	r25, Y+5	; 0x05
     e4a:	82 30       	cpi	r24, 0x02	; 2
     e4c:	91 05       	cpc	r25, r1
     e4e:	c1 f1       	breq	.+112    	; 0xec0 <GPIO_writePin+0xa8>
     e50:	2c 81       	ldd	r18, Y+4	; 0x04
     e52:	3d 81       	ldd	r19, Y+5	; 0x05
     e54:	23 30       	cpi	r18, 0x03	; 3
     e56:	31 05       	cpc	r19, r1
     e58:	09 f4       	brne	.+2      	; 0xe5c <GPIO_writePin+0x44>
     e5a:	5e c0       	rjmp	.+188    	; 0xf18 <GPIO_writePin+0x100>
     e5c:	8c 81       	ldd	r24, Y+4	; 0x04
     e5e:	9d 81       	ldd	r25, Y+5	; 0x05
     e60:	81 30       	cpi	r24, 0x01	; 1
     e62:	91 05       	cpc	r25, r1
     e64:	09 f0       	breq	.+2      	; 0xe68 <GPIO_writePin+0x50>
     e66:	83 c0       	rjmp	.+262    	; 0xf6e <GPIO_writePin+0x156>
			{
				CLEAR_BIT(PORTA,pin_num);
			}
			break;*/
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     e68:	8b 81       	ldd	r24, Y+3	; 0x03
     e6a:	81 30       	cpi	r24, 0x01	; 1
     e6c:	a1 f4       	brne	.+40     	; 0xe96 <GPIO_writePin+0x7e>
			{
				SET_BIT(PORTB,pin_num);
     e6e:	a5 e2       	ldi	r26, 0x25	; 37
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e5 e2       	ldi	r30, 0x25	; 37
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	48 2f       	mov	r20, r24
     e7a:	8a 81       	ldd	r24, Y+2	; 0x02
     e7c:	28 2f       	mov	r18, r24
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	02 2e       	mov	r0, r18
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <GPIO_writePin+0x74>
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	0a 94       	dec	r0
     e8e:	e2 f7       	brpl	.-8      	; 0xe88 <GPIO_writePin+0x70>
     e90:	84 2b       	or	r24, r20
     e92:	8c 93       	st	X, r24
     e94:	6c c0       	rjmp	.+216    	; 0xf6e <GPIO_writePin+0x156>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e96:	a5 e2       	ldi	r26, 0x25	; 37
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e5 e2       	ldi	r30, 0x25	; 37
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	48 2f       	mov	r20, r24
     ea2:	8a 81       	ldd	r24, Y+2	; 0x02
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	02 2e       	mov	r0, r18
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <GPIO_writePin+0x9c>
     eb0:	88 0f       	add	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	0a 94       	dec	r0
     eb6:	e2 f7       	brpl	.-8      	; 0xeb0 <GPIO_writePin+0x98>
     eb8:	80 95       	com	r24
     eba:	84 23       	and	r24, r20
     ebc:	8c 93       	st	X, r24
     ebe:	57 c0       	rjmp	.+174    	; 0xf6e <GPIO_writePin+0x156>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	81 30       	cpi	r24, 0x01	; 1
     ec4:	a1 f4       	brne	.+40     	; 0xeee <GPIO_writePin+0xd6>
			{
				SET_BIT(PORTC,pin_num);
     ec6:	a8 e2       	ldi	r26, 0x28	; 40
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e8 e2       	ldi	r30, 0x28	; 40
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	48 2f       	mov	r20, r24
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	02 2e       	mov	r0, r18
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <GPIO_writePin+0xcc>
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	0a 94       	dec	r0
     ee6:	e2 f7       	brpl	.-8      	; 0xee0 <GPIO_writePin+0xc8>
     ee8:	84 2b       	or	r24, r20
     eea:	8c 93       	st	X, r24
     eec:	40 c0       	rjmp	.+128    	; 0xf6e <GPIO_writePin+0x156>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     eee:	a8 e2       	ldi	r26, 0x28	; 40
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e8 e2       	ldi	r30, 0x28	; 40
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <GPIO_writePin+0xf4>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <GPIO_writePin+0xf0>
     f10:	80 95       	com	r24
     f12:	84 23       	and	r24, r20
     f14:	8c 93       	st	X, r24
     f16:	2b c0       	rjmp	.+86     	; 0xf6e <GPIO_writePin+0x156>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	a1 f4       	brne	.+40     	; 0xf46 <GPIO_writePin+0x12e>
			{
				SET_BIT(PORTD,pin_num);
     f1e:	ab e2       	ldi	r26, 0x2B	; 43
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	eb e2       	ldi	r30, 0x2B	; 43
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 2e       	mov	r0, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <GPIO_writePin+0x124>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <GPIO_writePin+0x120>
     f40:	84 2b       	or	r24, r20
     f42:	8c 93       	st	X, r24
     f44:	14 c0       	rjmp	.+40     	; 0xf6e <GPIO_writePin+0x156>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     f46:	ab e2       	ldi	r26, 0x2B	; 43
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	eb e2       	ldi	r30, 0x2B	; 43
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <GPIO_writePin+0x14c>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <GPIO_writePin+0x148>
     f68:	80 95       	com	r24
     f6a:	84 23       	and	r24, r20
     f6c:	8c 93       	st	X, r24
	}




}
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <GPIO_readPin>:
/*
 * Description:
 * Read and return the value for the required pin,it should be LOGDIC HIGH or LOGIC LOW.
 * If the input port number or pin number are not correct, The function will return LOGIC LOW.
 * */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num){
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	00 d0       	rcall	.+0      	; 0xf84 <GPIO_readPin+0x6>
     f84:	00 d0       	rcall	.+0      	; 0xf86 <GPIO_readPin+0x8>
     f86:	00 d0       	rcall	.+0      	; 0xf88 <GPIO_readPin+0xa>
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	8a 83       	std	Y+2, r24	; 0x02
     f8e:	6b 83       	std	Y+3, r22	; 0x03

	uint8 state = LOGIC_LOW;
     f90:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS  || pin_num >= NUM_OF_PINS_PER_PORTS){
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	84 30       	cpi	r24, 0x04	; 4
     f96:	18 f4       	brcc	.+6      	; 0xf9e <GPIO_readPin+0x20>
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	88 30       	cpi	r24, 0x08	; 8
     f9c:	18 f0       	brcs	.+6      	; 0xfa4 <GPIO_readPin+0x26>

		return state;
     f9e:	29 81       	ldd	r18, Y+1	; 0x01
     fa0:	2e 83       	std	Y+6, r18	; 0x06
     fa2:	5e c0       	rjmp	.+188    	; 0x1060 <GPIO_readPin+0xe2>

	}
	else
	{
		switch(port_num){
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	48 2f       	mov	r20, r24
     fa8:	50 e0       	ldi	r21, 0x00	; 0
     faa:	5d 83       	std	Y+5, r21	; 0x05
     fac:	4c 83       	std	Y+4, r20	; 0x04
     fae:	8c 81       	ldd	r24, Y+4	; 0x04
     fb0:	9d 81       	ldd	r25, Y+5	; 0x05
     fb2:	82 30       	cpi	r24, 0x02	; 2
     fb4:	91 05       	cpc	r25, r1
     fb6:	19 f1       	breq	.+70     	; 0xffe <GPIO_readPin+0x80>
     fb8:	2c 81       	ldd	r18, Y+4	; 0x04
     fba:	3d 81       	ldd	r19, Y+5	; 0x05
     fbc:	23 30       	cpi	r18, 0x03	; 3
     fbe:	31 05       	cpc	r19, r1
     fc0:	b1 f1       	breq	.+108    	; 0x102e <GPIO_readPin+0xb0>
     fc2:	4c 81       	ldd	r20, Y+4	; 0x04
     fc4:	5d 81       	ldd	r21, Y+5	; 0x05
     fc6:	41 30       	cpi	r20, 0x01	; 1
     fc8:	51 05       	cpc	r21, r1
     fca:	09 f0       	breq	.+2      	; 0xfce <GPIO_readPin+0x50>
     fcc:	47 c0       	rjmp	.+142    	; 0x105c <GPIO_readPin+0xde>
			{
				state = LOGIC_LOW;
			}
			break;*/
		case PORTB_ID:
			if( BIT_IS_SET(PINB,pin_num) )
     fce:	e3 e2       	ldi	r30, 0x23	; 35
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	8b 81       	ldd	r24, Y+3	; 0x03
     fda:	88 2f       	mov	r24, r24
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	a9 01       	movw	r20, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <GPIO_readPin+0x68>
     fe2:	55 95       	asr	r21
     fe4:	47 95       	ror	r20
     fe6:	8a 95       	dec	r24
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <GPIO_readPin+0x64>
     fea:	ca 01       	movw	r24, r20
     fec:	81 70       	andi	r24, 0x01	; 1
     fee:	90 70       	andi	r25, 0x00	; 0
     ff0:	88 23       	and	r24, r24
     ff2:	19 f0       	breq	.+6      	; 0xffa <GPIO_readPin+0x7c>
			{
				state = LOGIC_HIGH;
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	89 83       	std	Y+1, r24	; 0x01
     ff8:	31 c0       	rjmp	.+98     	; 0x105c <GPIO_readPin+0xde>

			}
			else
			{
				state = LOGIC_LOW;
     ffa:	19 82       	std	Y+1, r1	; 0x01
     ffc:	2f c0       	rjmp	.+94     	; 0x105c <GPIO_readPin+0xde>
			}
			break;
		case PORTC_ID:
			if( BIT_IS_SET(PINC,pin_num) )
     ffe:	e6 e2       	ldi	r30, 0x26	; 38
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	8b 81       	ldd	r24, Y+3	; 0x03
    100a:	88 2f       	mov	r24, r24
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	a9 01       	movw	r20, r18
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <GPIO_readPin+0x98>
    1012:	55 95       	asr	r21
    1014:	47 95       	ror	r20
    1016:	8a 95       	dec	r24
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <GPIO_readPin+0x94>
    101a:	ca 01       	movw	r24, r20
    101c:	81 70       	andi	r24, 0x01	; 1
    101e:	90 70       	andi	r25, 0x00	; 0
    1020:	88 23       	and	r24, r24
    1022:	19 f0       	breq	.+6      	; 0x102a <GPIO_readPin+0xac>
			{
				state = LOGIC_HIGH;
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	89 83       	std	Y+1, r24	; 0x01
    1028:	19 c0       	rjmp	.+50     	; 0x105c <GPIO_readPin+0xde>

			}
			else
			{
				state = LOGIC_LOW;
    102a:	19 82       	std	Y+1, r1	; 0x01
    102c:	17 c0       	rjmp	.+46     	; 0x105c <GPIO_readPin+0xde>
			}
			break;
		case PORTD_ID:
			if( BIT_IS_SET(PIND,pin_num) )
    102e:	e9 e2       	ldi	r30, 0x29	; 41
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	88 2f       	mov	r24, r24
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	a9 01       	movw	r20, r18
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <GPIO_readPin+0xc8>
    1042:	55 95       	asr	r21
    1044:	47 95       	ror	r20
    1046:	8a 95       	dec	r24
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <GPIO_readPin+0xc4>
    104a:	ca 01       	movw	r24, r20
    104c:	81 70       	andi	r24, 0x01	; 1
    104e:	90 70       	andi	r25, 0x00	; 0
    1050:	88 23       	and	r24, r24
    1052:	19 f0       	breq	.+6      	; 0x105a <GPIO_readPin+0xdc>
			{
				state = LOGIC_HIGH;
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	89 83       	std	Y+1, r24	; 0x01
    1058:	01 c0       	rjmp	.+2      	; 0x105c <GPIO_readPin+0xde>

			}
			else
			{
				state = LOGIC_LOW;
    105a:	19 82       	std	Y+1, r1	; 0x01
			break;

		}

	}
	return state;
    105c:	59 81       	ldd	r21, Y+1	; 0x01
    105e:	5e 83       	std	Y+6, r21	; 0x06
    1060:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1062:	26 96       	adiw	r28, 0x06	; 6
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	f8 94       	cli
    1068:	de bf       	out	0x3e, r29	; 62
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	cd bf       	out	0x3d, r28	; 61
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 * */
void GPIO_setupPortDirection(uint8 port_num,GPIO_PortDirectionType direction){
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	00 d0       	rcall	.+0      	; 0x107a <GPIO_setupPortDirection+0x6>
    107a:	00 d0       	rcall	.+0      	; 0x107c <GPIO_setupPortDirection+0x8>
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	89 83       	std	Y+1, r24	; 0x01
    1082:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS){
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	84 30       	cpi	r24, 0x04	; 4
    1088:	10 f5       	brcc	.+68     	; 0x10ce <GPIO_setupPortDirection+0x5a>
		/* DO NOTHING */

	}
	else
	{
		switch(port_num)
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	3c 83       	std	Y+4, r19	; 0x04
    1092:	2b 83       	std	Y+3, r18	; 0x03
    1094:	8b 81       	ldd	r24, Y+3	; 0x03
    1096:	9c 81       	ldd	r25, Y+4	; 0x04
    1098:	82 30       	cpi	r24, 0x02	; 2
    109a:	91 05       	cpc	r25, r1
    109c:	79 f0       	breq	.+30     	; 0x10bc <GPIO_setupPortDirection+0x48>
    109e:	2b 81       	ldd	r18, Y+3	; 0x03
    10a0:	3c 81       	ldd	r19, Y+4	; 0x04
    10a2:	23 30       	cpi	r18, 0x03	; 3
    10a4:	31 05       	cpc	r19, r1
    10a6:	79 f0       	breq	.+30     	; 0x10c6 <GPIO_setupPortDirection+0x52>
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	9c 81       	ldd	r25, Y+4	; 0x04
    10ac:	81 30       	cpi	r24, 0x01	; 1
    10ae:	91 05       	cpc	r25, r1
    10b0:	71 f4       	brne	.+28     	; 0x10ce <GPIO_setupPortDirection+0x5a>
		{
		/*case PORTA_ID:
			DDRA = direction;
			break;*/
		case PORTB_ID:
			DDRB = direction;
    10b2:	e4 e2       	ldi	r30, 0x24	; 36
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	80 83       	st	Z, r24
    10ba:	09 c0       	rjmp	.+18     	; 0x10ce <GPIO_setupPortDirection+0x5a>
			break;
		case PORTC_ID:
			DDRC = direction;
    10bc:	e7 e2       	ldi	r30, 0x27	; 39
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	80 83       	st	Z, r24
    10c4:	04 c0       	rjmp	.+8      	; 0x10ce <GPIO_setupPortDirection+0x5a>
			break;
		case PORTD_ID:
			DDRD = direction;
    10c6:	ea e2       	ldi	r30, 0x2A	; 42
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	80 83       	st	Z, r24
			break;
		}

	}
}
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	08 95       	ret

000010dc <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value){
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <GPIO_writePort+0x6>
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <GPIO_writePort+0x8>
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
    10e8:	89 83       	std	Y+1, r24	; 0x01
    10ea:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	84 30       	cpi	r24, 0x04	; 4
    10f0:	10 f5       	brcc	.+68     	; 0x1136 <GPIO_writePort+0x5a>
		/* DO NOTHING */

	}
	else
	{
		switch(port_num)
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	3c 83       	std	Y+4, r19	; 0x04
    10fa:	2b 83       	std	Y+3, r18	; 0x03
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1100:	82 30       	cpi	r24, 0x02	; 2
    1102:	91 05       	cpc	r25, r1
    1104:	79 f0       	breq	.+30     	; 0x1124 <GPIO_writePort+0x48>
    1106:	2b 81       	ldd	r18, Y+3	; 0x03
    1108:	3c 81       	ldd	r19, Y+4	; 0x04
    110a:	23 30       	cpi	r18, 0x03	; 3
    110c:	31 05       	cpc	r19, r1
    110e:	79 f0       	breq	.+30     	; 0x112e <GPIO_writePort+0x52>
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	9c 81       	ldd	r25, Y+4	; 0x04
    1114:	81 30       	cpi	r24, 0x01	; 1
    1116:	91 05       	cpc	r25, r1
    1118:	71 f4       	brne	.+28     	; 0x1136 <GPIO_writePort+0x5a>
		{
		/*case PORTA_ID:
			PORTA = value;
			break;*/
		case PORTB_ID:
			PORTB = value;
    111a:	e5 e2       	ldi	r30, 0x25	; 37
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	80 83       	st	Z, r24
    1122:	09 c0       	rjmp	.+18     	; 0x1136 <GPIO_writePort+0x5a>
			break;
		case PORTC_ID:
			PORTC = value;
    1124:	e8 e2       	ldi	r30, 0x28	; 40
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	80 83       	st	Z, r24
    112c:	04 c0       	rjmp	.+8      	; 0x1136 <GPIO_writePort+0x5a>
			break;
		case PORTD_ID:
			PORTD = value;
    112e:	eb e2       	ldi	r30, 0x2B	; 43
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	80 83       	st	Z, r24
			break;
		}

	}

}
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	cf 91       	pop	r28
    1140:	df 91       	pop	r29
    1142:	08 95       	ret

00001144 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num){
    1144:	df 93       	push	r29
    1146:	cf 93       	push	r28
    1148:	00 d0       	rcall	.+0      	; 0x114a <GPIO_readPort+0x6>
    114a:	00 d0       	rcall	.+0      	; 0x114c <GPIO_readPort+0x8>
    114c:	0f 92       	push	r0
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	8a 83       	std	Y+2, r24	; 0x02

	uint8 state = LOGIC_LOW;
    1154:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	84 30       	cpi	r24, 0x04	; 4
    115a:	18 f0       	brcs	.+6      	; 0x1162 <GPIO_readPort+0x1e>
	{
		return state;
    115c:	29 81       	ldd	r18, Y+1	; 0x01
    115e:	2d 83       	std	Y+5, r18	; 0x05
    1160:	24 c0       	rjmp	.+72     	; 0x11aa <GPIO_readPort+0x66>

	}
	else
	{
		switch(port_num){
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	3c 83       	std	Y+4, r19	; 0x04
    116a:	2b 83       	std	Y+3, r18	; 0x03
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	82 30       	cpi	r24, 0x02	; 2
    1172:	91 05       	cpc	r25, r1
    1174:	79 f0       	breq	.+30     	; 0x1194 <GPIO_readPort+0x50>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	23 30       	cpi	r18, 0x03	; 3
    117c:	31 05       	cpc	r19, r1
    117e:	79 f0       	breq	.+30     	; 0x119e <GPIO_readPort+0x5a>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	81 30       	cpi	r24, 0x01	; 1
    1186:	91 05       	cpc	r25, r1
    1188:	71 f4       	brne	.+28     	; 0x11a6 <GPIO_readPort+0x62>
	/*	case PORTA_ID:
			state = PINA;
			break;*/
		case PORTB_ID:
			state = PINB;
    118a:	e3 e2       	ldi	r30, 0x23	; 35
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	89 83       	std	Y+1, r24	; 0x01
    1192:	09 c0       	rjmp	.+18     	; 0x11a6 <GPIO_readPort+0x62>
			break;
		case PORTC_ID:
			state = PINC;
    1194:	e6 e2       	ldi	r30, 0x26	; 38
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	89 83       	std	Y+1, r24	; 0x01
    119c:	04 c0       	rjmp	.+8      	; 0x11a6 <GPIO_readPort+0x62>
			break;
		case PORTD_ID:
			state = PIND;
    119e:	e9 e2       	ldi	r30, 0x29	; 41
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return state;
    11a6:	99 81       	ldd	r25, Y+1	; 0x01
    11a8:	9d 83       	std	Y+5, r25	; 0x05
    11aa:	8d 81       	ldd	r24, Y+5	; 0x05
}
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	08 95       	ret

000011bc <__vector_10>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    11bc:	1f 92       	push	r1
    11be:	0f 92       	push	r0
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	0f 92       	push	r0
    11c4:	11 24       	eor	r1, r1
    11c6:	2f 93       	push	r18
    11c8:	3f 93       	push	r19
    11ca:	4f 93       	push	r20
    11cc:	5f 93       	push	r21
    11ce:	6f 93       	push	r22
    11d0:	7f 93       	push	r23
    11d2:	8f 93       	push	r24
    11d4:	9f 93       	push	r25
    11d6:	af 93       	push	r26
    11d8:	bf 93       	push	r27
    11da:	ef 93       	push	r30
    11dc:	ff 93       	push	r31
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    11e6:	80 91 16 01 	lds	r24, 0x0116
    11ea:	90 91 17 01 	lds	r25, 0x0117
    11ee:	00 97       	sbiw	r24, 0x00	; 0
    11f0:	29 f0       	breq	.+10     	; 0x11fc <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    11f2:	e0 91 16 01 	lds	r30, 0x0116
    11f6:	f0 91 17 01 	lds	r31, 0x0117
    11fa:	09 95       	icall
	}
}
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	ff 91       	pop	r31
    1202:	ef 91       	pop	r30
    1204:	bf 91       	pop	r27
    1206:	af 91       	pop	r26
    1208:	9f 91       	pop	r25
    120a:	8f 91       	pop	r24
    120c:	7f 91       	pop	r23
    120e:	6f 91       	pop	r22
    1210:	5f 91       	pop	r21
    1212:	4f 91       	pop	r20
    1214:	3f 91       	pop	r19
    1216:	2f 91       	pop	r18
    1218:	0f 90       	pop	r0
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	0f 90       	pop	r0
    121e:	1f 90       	pop	r1
    1220:	18 95       	reti

00001222 <ICU_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void ICU_init(const ICU_ConfigType * Config_Ptr)
{
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	00 d0       	rcall	.+0      	; 0x1228 <ICU_init+0x6>
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	9a 83       	std	Y+2, r25	; 0x02
    122e:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRB &= ~(1<<PB0);
    1230:	a4 e2       	ldi	r26, 0x24	; 36
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e4 e2       	ldi	r30, 0x24	; 36
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	8e 7f       	andi	r24, 0xFE	; 254
    123c:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    123e:	e0 e8       	ldi	r30, 0x80	; 128
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 ec       	ldi	r24, 0xC0	; 192
    1244:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    1246:	a1 e8       	ldi	r26, 0x81	; 129
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	e1 e8       	ldi	r30, 0x81	; 129
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	98 2f       	mov	r25, r24
    1252:	98 7f       	andi	r25, 0xF8	; 248
    1254:	e9 81       	ldd	r30, Y+1	; 0x01
    1256:	fa 81       	ldd	r31, Y+2	; 0x02
    1258:	80 81       	ld	r24, Z
    125a:	89 2b       	or	r24, r25
    125c:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    125e:	a1 e8       	ldi	r26, 0x81	; 129
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e1 e8       	ldi	r30, 0x81	; 129
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	28 2f       	mov	r18, r24
    126a:	2f 7b       	andi	r18, 0xBF	; 191
    126c:	e9 81       	ldd	r30, Y+1	; 0x01
    126e:	fa 81       	ldd	r31, Y+2	; 0x02
    1270:	81 81       	ldd	r24, Z+1	; 0x01
    1272:	88 2f       	mov	r24, r24
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	00 24       	eor	r0, r0
    1278:	96 95       	lsr	r25
    127a:	87 95       	ror	r24
    127c:	07 94       	ror	r0
    127e:	96 95       	lsr	r25
    1280:	87 95       	ror	r24
    1282:	07 94       	ror	r0
    1284:	98 2f       	mov	r25, r24
    1286:	80 2d       	mov	r24, r0
    1288:	82 2b       	or	r24, r18
    128a:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    128c:	e4 e8       	ldi	r30, 0x84	; 132
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	11 82       	std	Z+1, r1	; 0x01
    1292:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    1294:	e6 e8       	ldi	r30, 0x86	; 134
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	11 82       	std	Z+1, r1	; 0x01
    129a:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK1 |= (1<<ICIE1);
    129c:	af e6       	ldi	r26, 0x6F	; 111
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	ef e6       	ldi	r30, 0x6F	; 111
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	80 62       	ori	r24, 0x20	; 32
    12a8:	8c 93       	st	X, r24
}
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	08 95       	ret

000012b4 <ICU_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
    12b4:	df 93       	push	r29
    12b6:	cf 93       	push	r28
    12b8:	00 d0       	rcall	.+0      	; 0x12ba <ICU_setCallBack+0x6>
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	9a 83       	std	Y+2, r25	; 0x02
    12c0:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	9a 81       	ldd	r25, Y+2	; 0x02
    12c6:	90 93 17 01 	sts	0x0117, r25
    12ca:	80 93 16 01 	sts	0x0116, r24
}
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	cf 91       	pop	r28
    12d4:	df 91       	pop	r29
    12d6:	08 95       	ret

000012d8 <ICU_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	0f 92       	push	r0
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    12e4:	a1 e8       	ldi	r26, 0x81	; 129
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	e1 e8       	ldi	r30, 0x81	; 129
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	28 2f       	mov	r18, r24
    12f0:	2f 7b       	andi	r18, 0xBF	; 191
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	88 2f       	mov	r24, r24
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	00 24       	eor	r0, r0
    12fa:	96 95       	lsr	r25
    12fc:	87 95       	ror	r24
    12fe:	07 94       	ror	r0
    1300:	96 95       	lsr	r25
    1302:	87 95       	ror	r24
    1304:	07 94       	ror	r0
    1306:	98 2f       	mov	r25, r24
    1308:	80 2d       	mov	r24, r0
    130a:	82 2b       	or	r24, r18
    130c:	8c 93       	st	X, r24
}
    130e:	0f 90       	pop	r0
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	08 95       	ret

00001316 <ICU_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 ICU_getInputCaptureValue(void)
{
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    131e:	e6 e8       	ldi	r30, 0x86	; 134
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	91 81       	ldd	r25, Z+1	; 0x01
}
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <ICU_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void ICU_clearTimerValue(void)
{
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1334:	e4 e8       	ldi	r30, 0x84	; 132
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	11 82       	std	Z+1, r1	; 0x01
    133a:	10 82       	st	Z, r1
}
    133c:	cf 91       	pop	r28
    133e:	df 91       	pop	r29
    1340:	08 95       	ret

00001342 <ICU_deInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void ICU_deInit(void)
{
    1342:	df 93       	push	r29
    1344:	cf 93       	push	r28
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers */
	TCCR1A = 0;
    134a:	e0 e8       	ldi	r30, 0x80	; 128
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	10 82       	st	Z, r1
	TCCR1B = 0;
    1350:	e1 e8       	ldi	r30, 0x81	; 129
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	10 82       	st	Z, r1
	TCNT1 = 0;
    1356:	e4 e8       	ldi	r30, 0x84	; 132
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	11 82       	std	Z+1, r1	; 0x01
    135c:	10 82       	st	Z, r1
	ICR1 = 0;
    135e:	e6 e8       	ldi	r30, 0x86	; 134
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	11 82       	std	Z+1, r1	; 0x01
    1364:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK1 &= ~(1<<ICIE1);
    1366:	af e6       	ldi	r26, 0x6F	; 111
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	ef e6       	ldi	r30, 0x6F	; 111
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	8f 7d       	andi	r24, 0xDF	; 223
    1372:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    1374:	10 92 17 01 	sts	0x0117, r1
    1378:	10 92 16 01 	sts	0x0116, r1
}
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	08 95       	ret

00001382 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	2e 97       	sbiw	r28, 0x0e	; 14
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	de bf       	out	0x3e, r29	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1396:	83 e0       	ldi	r24, 0x03	; 3
    1398:	60 e0       	ldi	r22, 0x00	; 0
    139a:	41 e0       	ldi	r20, 0x01	; 1
    139c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    13a0:	83 e0       	ldi	r24, 0x03	; 3
    13a2:	61 e0       	ldi	r22, 0x01	; 1
    13a4:	41 e0       	ldi	r20, 0x01	; 1
    13a6:	0e 94 59 06 	call	0xcb2	; 0xcb2 <GPIO_setupPinDirection>
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	a0 ea       	ldi	r26, 0xA0	; 160
    13b0:	b1 e4       	ldi	r27, 0x41	; 65
    13b2:	8b 87       	std	Y+11, r24	; 0x0b
    13b4:	9c 87       	std	Y+12, r25	; 0x0c
    13b6:	ad 87       	std	Y+13, r26	; 0x0d
    13b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    13bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    13be:	8d 85       	ldd	r24, Y+13	; 0x0d
    13c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	4a ef       	ldi	r20, 0xFA	; 250
    13c8:	54 e4       	ldi	r21, 0x44	; 68
    13ca:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	8f 83       	std	Y+7, r24	; 0x07
    13d4:	98 87       	std	Y+8, r25	; 0x08
    13d6:	a9 87       	std	Y+9, r26	; 0x09
    13d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13da:	6f 81       	ldd	r22, Y+7	; 0x07
    13dc:	78 85       	ldd	r23, Y+8	; 0x08
    13de:	89 85       	ldd	r24, Y+9	; 0x09
    13e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	40 e8       	ldi	r20, 0x80	; 128
    13e8:	5f e3       	ldi	r21, 0x3F	; 63
    13ea:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    13ee:	88 23       	and	r24, r24
    13f0:	2c f4       	brge	.+10     	; 0x13fc <LCD_init+0x7a>
		__ticks = 1;
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	9e 83       	std	Y+6, r25	; 0x06
    13f8:	8d 83       	std	Y+5, r24	; 0x05
    13fa:	3f c0       	rjmp	.+126    	; 0x147a <LCD_init+0xf8>
	else if (__tmp > 65535)
    13fc:	6f 81       	ldd	r22, Y+7	; 0x07
    13fe:	78 85       	ldd	r23, Y+8	; 0x08
    1400:	89 85       	ldd	r24, Y+9	; 0x09
    1402:	9a 85       	ldd	r25, Y+10	; 0x0a
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	3f ef       	ldi	r19, 0xFF	; 255
    1408:	4f e7       	ldi	r20, 0x7F	; 127
    140a:	57 e4       	ldi	r21, 0x47	; 71
    140c:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    1410:	18 16       	cp	r1, r24
    1412:	4c f5       	brge	.+82     	; 0x1466 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1414:	6b 85       	ldd	r22, Y+11	; 0x0b
    1416:	7c 85       	ldd	r23, Y+12	; 0x0c
    1418:	8d 85       	ldd	r24, Y+13	; 0x0d
    141a:	9e 85       	ldd	r25, Y+14	; 0x0e
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	40 e2       	ldi	r20, 0x20	; 32
    1422:	51 e4       	ldi	r21, 0x41	; 65
    1424:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	bc 01       	movw	r22, r24
    142e:	cd 01       	movw	r24, r26
    1430:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1434:	dc 01       	movw	r26, r24
    1436:	cb 01       	movw	r24, r22
    1438:	9e 83       	std	Y+6, r25	; 0x06
    143a:	8d 83       	std	Y+5, r24	; 0x05
    143c:	0f c0       	rjmp	.+30     	; 0x145c <LCD_init+0xda>
    143e:	88 ec       	ldi	r24, 0xC8	; 200
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	9c 83       	std	Y+4, r25	; 0x04
    1444:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	9c 81       	ldd	r25, Y+4	; 0x04
    144a:	01 97       	sbiw	r24, 0x01	; 1
    144c:	f1 f7       	brne	.-4      	; 0x144a <LCD_init+0xc8>
    144e:	9c 83       	std	Y+4, r25	; 0x04
    1450:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1452:	8d 81       	ldd	r24, Y+5	; 0x05
    1454:	9e 81       	ldd	r25, Y+6	; 0x06
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	9e 83       	std	Y+6, r25	; 0x06
    145a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    145c:	8d 81       	ldd	r24, Y+5	; 0x05
    145e:	9e 81       	ldd	r25, Y+6	; 0x06
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	69 f7       	brne	.-38     	; 0x143e <LCD_init+0xbc>
    1464:	14 c0       	rjmp	.+40     	; 0x148e <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1466:	6f 81       	ldd	r22, Y+7	; 0x07
    1468:	78 85       	ldd	r23, Y+8	; 0x08
    146a:	89 85       	ldd	r24, Y+9	; 0x09
    146c:	9a 85       	ldd	r25, Y+10	; 0x0a
    146e:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1472:	dc 01       	movw	r26, r24
    1474:	cb 01       	movw	r24, r22
    1476:	9e 83       	std	Y+6, r25	; 0x06
    1478:	8d 83       	std	Y+5, r24	; 0x05
    147a:	8d 81       	ldd	r24, Y+5	; 0x05
    147c:	9e 81       	ldd	r25, Y+6	; 0x06
    147e:	9a 83       	std	Y+2, r25	; 0x02
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	9a 81       	ldd	r25, Y+2	; 0x02
    1486:	01 97       	sbiw	r24, 0x01	; 1
    1488:	f1 f7       	brne	.-4      	; 0x1486 <LCD_init+0x104>
    148a:	9a 83       	std	Y+2, r25	; 0x02
    148c:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    148e:	83 e0       	ldi	r24, 0x03	; 3
    1490:	63 e0       	ldi	r22, 0x03	; 3
    1492:	41 e0       	ldi	r20, 0x01	; 1
    1494:	0e 94 59 06 	call	0xcb2	; 0xcb2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1498:	83 e0       	ldi	r24, 0x03	; 3
    149a:	64 e0       	ldi	r22, 0x04	; 4
    149c:	41 e0       	ldi	r20, 0x01	; 1
    149e:	0e 94 59 06 	call	0xcb2	; 0xcb2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    14a2:	83 e0       	ldi	r24, 0x03	; 3
    14a4:	65 e0       	ldi	r22, 0x05	; 5
    14a6:	41 e0       	ldi	r20, 0x01	; 1
    14a8:	0e 94 59 06 	call	0xcb2	; 0xcb2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    14ac:	83 e0       	ldi	r24, 0x03	; 3
    14ae:	66 e0       	ldi	r22, 0x06	; 6
    14b0:	41 e0       	ldi	r20, 0x01	; 1
    14b2:	0e 94 59 06 	call	0xcb2	; 0xcb2 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    14b6:	83 e3       	ldi	r24, 0x33	; 51
    14b8:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    14bc:	82 e3       	ldi	r24, 0x32	; 50
    14be:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    14c2:	88 e2       	ldi	r24, 0x28	; 40
    14c4:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    14c8:	8c e0       	ldi	r24, 0x0C	; 12
    14ca:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_sendCommand>
}
    14d4:	2e 96       	adiw	r28, 0x0e	; 14
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	f8 94       	cli
    14da:	de bf       	out	0x3e, r29	; 62
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	cd bf       	out	0x3d, r28	; 61
    14e0:	cf 91       	pop	r28
    14e2:	df 91       	pop	r29
    14e4:	08 95       	ret

000014e6 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    14e6:	0f 93       	push	r16
    14e8:	1f 93       	push	r17
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	c3 56       	subi	r28, 0x63	; 99
    14f4:	d0 40       	sbci	r29, 0x00	; 0
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	f8 94       	cli
    14fa:	de bf       	out	0x3e, r29	; 62
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	cd bf       	out	0x3d, r28	; 61
    1500:	fe 01       	movw	r30, r28
    1502:	ed 59       	subi	r30, 0x9D	; 157
    1504:	ff 4f       	sbci	r31, 0xFF	; 255
    1506:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1508:	83 e0       	ldi	r24, 0x03	; 3
    150a:	60 e0       	ldi	r22, 0x00	; 0
    150c:	40 e0       	ldi	r20, 0x00	; 0
    150e:	0e 94 0c 07 	call	0xe18	; 0xe18 <GPIO_writePin>
    1512:	fe 01       	movw	r30, r28
    1514:	e1 5a       	subi	r30, 0xA1	; 161
    1516:	ff 4f       	sbci	r31, 0xFF	; 255
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	a0 e8       	ldi	r26, 0x80	; 128
    151e:	bf e3       	ldi	r27, 0x3F	; 63
    1520:	80 83       	st	Z, r24
    1522:	91 83       	std	Z+1, r25	; 0x01
    1524:	a2 83       	std	Z+2, r26	; 0x02
    1526:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1528:	8e 01       	movw	r16, r28
    152a:	05 5a       	subi	r16, 0xA5	; 165
    152c:	1f 4f       	sbci	r17, 0xFF	; 255
    152e:	fe 01       	movw	r30, r28
    1530:	e1 5a       	subi	r30, 0xA1	; 161
    1532:	ff 4f       	sbci	r31, 0xFF	; 255
    1534:	60 81       	ld	r22, Z
    1536:	71 81       	ldd	r23, Z+1	; 0x01
    1538:	82 81       	ldd	r24, Z+2	; 0x02
    153a:	93 81       	ldd	r25, Z+3	; 0x03
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	4a ef       	ldi	r20, 0xFA	; 250
    1542:	54 e4       	ldi	r21, 0x44	; 68
    1544:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	f8 01       	movw	r30, r16
    154e:	80 83       	st	Z, r24
    1550:	91 83       	std	Z+1, r25	; 0x01
    1552:	a2 83       	std	Z+2, r26	; 0x02
    1554:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1556:	fe 01       	movw	r30, r28
    1558:	e5 5a       	subi	r30, 0xA5	; 165
    155a:	ff 4f       	sbci	r31, 0xFF	; 255
    155c:	60 81       	ld	r22, Z
    155e:	71 81       	ldd	r23, Z+1	; 0x01
    1560:	82 81       	ldd	r24, Z+2	; 0x02
    1562:	93 81       	ldd	r25, Z+3	; 0x03
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	40 e8       	ldi	r20, 0x80	; 128
    156a:	5f e3       	ldi	r21, 0x3F	; 63
    156c:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    1570:	88 23       	and	r24, r24
    1572:	44 f4       	brge	.+16     	; 0x1584 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1574:	fe 01       	movw	r30, r28
    1576:	e7 5a       	subi	r30, 0xA7	; 167
    1578:	ff 4f       	sbci	r31, 0xFF	; 255
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	91 83       	std	Z+1, r25	; 0x01
    1580:	80 83       	st	Z, r24
    1582:	64 c0       	rjmp	.+200    	; 0x164c <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1584:	fe 01       	movw	r30, r28
    1586:	e5 5a       	subi	r30, 0xA5	; 165
    1588:	ff 4f       	sbci	r31, 0xFF	; 255
    158a:	60 81       	ld	r22, Z
    158c:	71 81       	ldd	r23, Z+1	; 0x01
    158e:	82 81       	ldd	r24, Z+2	; 0x02
    1590:	93 81       	ldd	r25, Z+3	; 0x03
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	3f ef       	ldi	r19, 0xFF	; 255
    1596:	4f e7       	ldi	r20, 0x7F	; 127
    1598:	57 e4       	ldi	r21, 0x47	; 71
    159a:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    159e:	18 16       	cp	r1, r24
    15a0:	0c f0       	brlt	.+2      	; 0x15a4 <LCD_sendCommand+0xbe>
    15a2:	43 c0       	rjmp	.+134    	; 0x162a <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15a4:	fe 01       	movw	r30, r28
    15a6:	e1 5a       	subi	r30, 0xA1	; 161
    15a8:	ff 4f       	sbci	r31, 0xFF	; 255
    15aa:	60 81       	ld	r22, Z
    15ac:	71 81       	ldd	r23, Z+1	; 0x01
    15ae:	82 81       	ldd	r24, Z+2	; 0x02
    15b0:	93 81       	ldd	r25, Z+3	; 0x03
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	40 e2       	ldi	r20, 0x20	; 32
    15b8:	51 e4       	ldi	r21, 0x41	; 65
    15ba:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    15be:	dc 01       	movw	r26, r24
    15c0:	cb 01       	movw	r24, r22
    15c2:	8e 01       	movw	r16, r28
    15c4:	07 5a       	subi	r16, 0xA7	; 167
    15c6:	1f 4f       	sbci	r17, 0xFF	; 255
    15c8:	bc 01       	movw	r22, r24
    15ca:	cd 01       	movw	r24, r26
    15cc:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	f8 01       	movw	r30, r16
    15d6:	91 83       	std	Z+1, r25	; 0x01
    15d8:	80 83       	st	Z, r24
    15da:	1f c0       	rjmp	.+62     	; 0x161a <LCD_sendCommand+0x134>
    15dc:	fe 01       	movw	r30, r28
    15de:	e9 5a       	subi	r30, 0xA9	; 169
    15e0:	ff 4f       	sbci	r31, 0xFF	; 255
    15e2:	88 ec       	ldi	r24, 0xC8	; 200
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	91 83       	std	Z+1, r25	; 0x01
    15e8:	80 83       	st	Z, r24
    15ea:	fe 01       	movw	r30, r28
    15ec:	e9 5a       	subi	r30, 0xA9	; 169
    15ee:	ff 4f       	sbci	r31, 0xFF	; 255
    15f0:	80 81       	ld	r24, Z
    15f2:	91 81       	ldd	r25, Z+1	; 0x01
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	f1 f7       	brne	.-4      	; 0x15f4 <LCD_sendCommand+0x10e>
    15f8:	fe 01       	movw	r30, r28
    15fa:	e9 5a       	subi	r30, 0xA9	; 169
    15fc:	ff 4f       	sbci	r31, 0xFF	; 255
    15fe:	91 83       	std	Z+1, r25	; 0x01
    1600:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1602:	de 01       	movw	r26, r28
    1604:	a7 5a       	subi	r26, 0xA7	; 167
    1606:	bf 4f       	sbci	r27, 0xFF	; 255
    1608:	fe 01       	movw	r30, r28
    160a:	e7 5a       	subi	r30, 0xA7	; 167
    160c:	ff 4f       	sbci	r31, 0xFF	; 255
    160e:	80 81       	ld	r24, Z
    1610:	91 81       	ldd	r25, Z+1	; 0x01
    1612:	01 97       	sbiw	r24, 0x01	; 1
    1614:	11 96       	adiw	r26, 0x01	; 1
    1616:	9c 93       	st	X, r25
    1618:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161a:	fe 01       	movw	r30, r28
    161c:	e7 5a       	subi	r30, 0xA7	; 167
    161e:	ff 4f       	sbci	r31, 0xFF	; 255
    1620:	80 81       	ld	r24, Z
    1622:	91 81       	ldd	r25, Z+1	; 0x01
    1624:	00 97       	sbiw	r24, 0x00	; 0
    1626:	d1 f6       	brne	.-76     	; 0x15dc <LCD_sendCommand+0xf6>
    1628:	27 c0       	rjmp	.+78     	; 0x1678 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    162a:	8e 01       	movw	r16, r28
    162c:	07 5a       	subi	r16, 0xA7	; 167
    162e:	1f 4f       	sbci	r17, 0xFF	; 255
    1630:	fe 01       	movw	r30, r28
    1632:	e5 5a       	subi	r30, 0xA5	; 165
    1634:	ff 4f       	sbci	r31, 0xFF	; 255
    1636:	60 81       	ld	r22, Z
    1638:	71 81       	ldd	r23, Z+1	; 0x01
    163a:	82 81       	ldd	r24, Z+2	; 0x02
    163c:	93 81       	ldd	r25, Z+3	; 0x03
    163e:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	f8 01       	movw	r30, r16
    1648:	91 83       	std	Z+1, r25	; 0x01
    164a:	80 83       	st	Z, r24
    164c:	de 01       	movw	r26, r28
    164e:	ab 5a       	subi	r26, 0xAB	; 171
    1650:	bf 4f       	sbci	r27, 0xFF	; 255
    1652:	fe 01       	movw	r30, r28
    1654:	e7 5a       	subi	r30, 0xA7	; 167
    1656:	ff 4f       	sbci	r31, 0xFF	; 255
    1658:	80 81       	ld	r24, Z
    165a:	91 81       	ldd	r25, Z+1	; 0x01
    165c:	8d 93       	st	X+, r24
    165e:	9c 93       	st	X, r25
    1660:	fe 01       	movw	r30, r28
    1662:	eb 5a       	subi	r30, 0xAB	; 171
    1664:	ff 4f       	sbci	r31, 0xFF	; 255
    1666:	80 81       	ld	r24, Z
    1668:	91 81       	ldd	r25, Z+1	; 0x01
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	f1 f7       	brne	.-4      	; 0x166a <LCD_sendCommand+0x184>
    166e:	fe 01       	movw	r30, r28
    1670:	eb 5a       	subi	r30, 0xAB	; 171
    1672:	ff 4f       	sbci	r31, 0xFF	; 255
    1674:	91 83       	std	Z+1, r25	; 0x01
    1676:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1678:	83 e0       	ldi	r24, 0x03	; 3
    167a:	61 e0       	ldi	r22, 0x01	; 1
    167c:	41 e0       	ldi	r20, 0x01	; 1
    167e:	0e 94 0c 07 	call	0xe18	; 0xe18 <GPIO_writePin>
    1682:	fe 01       	movw	r30, r28
    1684:	ef 5a       	subi	r30, 0xAF	; 175
    1686:	ff 4f       	sbci	r31, 0xFF	; 255
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	a0 e8       	ldi	r26, 0x80	; 128
    168e:	bf e3       	ldi	r27, 0x3F	; 63
    1690:	80 83       	st	Z, r24
    1692:	91 83       	std	Z+1, r25	; 0x01
    1694:	a2 83       	std	Z+2, r26	; 0x02
    1696:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1698:	8e 01       	movw	r16, r28
    169a:	03 5b       	subi	r16, 0xB3	; 179
    169c:	1f 4f       	sbci	r17, 0xFF	; 255
    169e:	fe 01       	movw	r30, r28
    16a0:	ef 5a       	subi	r30, 0xAF	; 175
    16a2:	ff 4f       	sbci	r31, 0xFF	; 255
    16a4:	60 81       	ld	r22, Z
    16a6:	71 81       	ldd	r23, Z+1	; 0x01
    16a8:	82 81       	ldd	r24, Z+2	; 0x02
    16aa:	93 81       	ldd	r25, Z+3	; 0x03
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	4a ef       	ldi	r20, 0xFA	; 250
    16b2:	54 e4       	ldi	r21, 0x44	; 68
    16b4:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	f8 01       	movw	r30, r16
    16be:	80 83       	st	Z, r24
    16c0:	91 83       	std	Z+1, r25	; 0x01
    16c2:	a2 83       	std	Z+2, r26	; 0x02
    16c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16c6:	fe 01       	movw	r30, r28
    16c8:	e3 5b       	subi	r30, 0xB3	; 179
    16ca:	ff 4f       	sbci	r31, 0xFF	; 255
    16cc:	60 81       	ld	r22, Z
    16ce:	71 81       	ldd	r23, Z+1	; 0x01
    16d0:	82 81       	ldd	r24, Z+2	; 0x02
    16d2:	93 81       	ldd	r25, Z+3	; 0x03
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	40 e8       	ldi	r20, 0x80	; 128
    16da:	5f e3       	ldi	r21, 0x3F	; 63
    16dc:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    16e0:	88 23       	and	r24, r24
    16e2:	44 f4       	brge	.+16     	; 0x16f4 <LCD_sendCommand+0x20e>
		__ticks = 1;
    16e4:	fe 01       	movw	r30, r28
    16e6:	e5 5b       	subi	r30, 0xB5	; 181
    16e8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	91 83       	std	Z+1, r25	; 0x01
    16f0:	80 83       	st	Z, r24
    16f2:	64 c0       	rjmp	.+200    	; 0x17bc <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    16f4:	fe 01       	movw	r30, r28
    16f6:	e3 5b       	subi	r30, 0xB3	; 179
    16f8:	ff 4f       	sbci	r31, 0xFF	; 255
    16fa:	60 81       	ld	r22, Z
    16fc:	71 81       	ldd	r23, Z+1	; 0x01
    16fe:	82 81       	ldd	r24, Z+2	; 0x02
    1700:	93 81       	ldd	r25, Z+3	; 0x03
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	3f ef       	ldi	r19, 0xFF	; 255
    1706:	4f e7       	ldi	r20, 0x7F	; 127
    1708:	57 e4       	ldi	r21, 0x47	; 71
    170a:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    170e:	18 16       	cp	r1, r24
    1710:	0c f0       	brlt	.+2      	; 0x1714 <LCD_sendCommand+0x22e>
    1712:	43 c0       	rjmp	.+134    	; 0x179a <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1714:	fe 01       	movw	r30, r28
    1716:	ef 5a       	subi	r30, 0xAF	; 175
    1718:	ff 4f       	sbci	r31, 0xFF	; 255
    171a:	60 81       	ld	r22, Z
    171c:	71 81       	ldd	r23, Z+1	; 0x01
    171e:	82 81       	ldd	r24, Z+2	; 0x02
    1720:	93 81       	ldd	r25, Z+3	; 0x03
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	40 e2       	ldi	r20, 0x20	; 32
    1728:	51 e4       	ldi	r21, 0x41	; 65
    172a:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	8e 01       	movw	r16, r28
    1734:	05 5b       	subi	r16, 0xB5	; 181
    1736:	1f 4f       	sbci	r17, 0xFF	; 255
    1738:	bc 01       	movw	r22, r24
    173a:	cd 01       	movw	r24, r26
    173c:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	f8 01       	movw	r30, r16
    1746:	91 83       	std	Z+1, r25	; 0x01
    1748:	80 83       	st	Z, r24
    174a:	1f c0       	rjmp	.+62     	; 0x178a <LCD_sendCommand+0x2a4>
    174c:	fe 01       	movw	r30, r28
    174e:	e7 5b       	subi	r30, 0xB7	; 183
    1750:	ff 4f       	sbci	r31, 0xFF	; 255
    1752:	88 ec       	ldi	r24, 0xC8	; 200
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	91 83       	std	Z+1, r25	; 0x01
    1758:	80 83       	st	Z, r24
    175a:	fe 01       	movw	r30, r28
    175c:	e7 5b       	subi	r30, 0xB7	; 183
    175e:	ff 4f       	sbci	r31, 0xFF	; 255
    1760:	80 81       	ld	r24, Z
    1762:	91 81       	ldd	r25, Z+1	; 0x01
    1764:	01 97       	sbiw	r24, 0x01	; 1
    1766:	f1 f7       	brne	.-4      	; 0x1764 <LCD_sendCommand+0x27e>
    1768:	fe 01       	movw	r30, r28
    176a:	e7 5b       	subi	r30, 0xB7	; 183
    176c:	ff 4f       	sbci	r31, 0xFF	; 255
    176e:	91 83       	std	Z+1, r25	; 0x01
    1770:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1772:	de 01       	movw	r26, r28
    1774:	a5 5b       	subi	r26, 0xB5	; 181
    1776:	bf 4f       	sbci	r27, 0xFF	; 255
    1778:	fe 01       	movw	r30, r28
    177a:	e5 5b       	subi	r30, 0xB5	; 181
    177c:	ff 4f       	sbci	r31, 0xFF	; 255
    177e:	80 81       	ld	r24, Z
    1780:	91 81       	ldd	r25, Z+1	; 0x01
    1782:	01 97       	sbiw	r24, 0x01	; 1
    1784:	11 96       	adiw	r26, 0x01	; 1
    1786:	9c 93       	st	X, r25
    1788:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178a:	fe 01       	movw	r30, r28
    178c:	e5 5b       	subi	r30, 0xB5	; 181
    178e:	ff 4f       	sbci	r31, 0xFF	; 255
    1790:	80 81       	ld	r24, Z
    1792:	91 81       	ldd	r25, Z+1	; 0x01
    1794:	00 97       	sbiw	r24, 0x00	; 0
    1796:	d1 f6       	brne	.-76     	; 0x174c <LCD_sendCommand+0x266>
    1798:	27 c0       	rjmp	.+78     	; 0x17e8 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    179a:	8e 01       	movw	r16, r28
    179c:	05 5b       	subi	r16, 0xB5	; 181
    179e:	1f 4f       	sbci	r17, 0xFF	; 255
    17a0:	fe 01       	movw	r30, r28
    17a2:	e3 5b       	subi	r30, 0xB3	; 179
    17a4:	ff 4f       	sbci	r31, 0xFF	; 255
    17a6:	60 81       	ld	r22, Z
    17a8:	71 81       	ldd	r23, Z+1	; 0x01
    17aa:	82 81       	ldd	r24, Z+2	; 0x02
    17ac:	93 81       	ldd	r25, Z+3	; 0x03
    17ae:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	f8 01       	movw	r30, r16
    17b8:	91 83       	std	Z+1, r25	; 0x01
    17ba:	80 83       	st	Z, r24
    17bc:	de 01       	movw	r26, r28
    17be:	a9 5b       	subi	r26, 0xB9	; 185
    17c0:	bf 4f       	sbci	r27, 0xFF	; 255
    17c2:	fe 01       	movw	r30, r28
    17c4:	e5 5b       	subi	r30, 0xB5	; 181
    17c6:	ff 4f       	sbci	r31, 0xFF	; 255
    17c8:	80 81       	ld	r24, Z
    17ca:	91 81       	ldd	r25, Z+1	; 0x01
    17cc:	8d 93       	st	X+, r24
    17ce:	9c 93       	st	X, r25
    17d0:	fe 01       	movw	r30, r28
    17d2:	e9 5b       	subi	r30, 0xB9	; 185
    17d4:	ff 4f       	sbci	r31, 0xFF	; 255
    17d6:	80 81       	ld	r24, Z
    17d8:	91 81       	ldd	r25, Z+1	; 0x01
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	f1 f7       	brne	.-4      	; 0x17da <LCD_sendCommand+0x2f4>
    17de:	fe 01       	movw	r30, r28
    17e0:	e9 5b       	subi	r30, 0xB9	; 185
    17e2:	ff 4f       	sbci	r31, 0xFF	; 255
    17e4:	91 83       	std	Z+1, r25	; 0x01
    17e6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    17e8:	fe 01       	movw	r30, r28
    17ea:	ed 59       	subi	r30, 0x9D	; 157
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	80 81       	ld	r24, Z
    17f0:	88 2f       	mov	r24, r24
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	80 71       	andi	r24, 0x10	; 16
    17f6:	90 70       	andi	r25, 0x00	; 0
    17f8:	95 95       	asr	r25
    17fa:	87 95       	ror	r24
    17fc:	95 95       	asr	r25
    17fe:	87 95       	ror	r24
    1800:	95 95       	asr	r25
    1802:	87 95       	ror	r24
    1804:	95 95       	asr	r25
    1806:	87 95       	ror	r24
    1808:	98 2f       	mov	r25, r24
    180a:	83 e0       	ldi	r24, 0x03	; 3
    180c:	63 e0       	ldi	r22, 0x03	; 3
    180e:	49 2f       	mov	r20, r25
    1810:	0e 94 0c 07 	call	0xe18	; 0xe18 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1814:	fe 01       	movw	r30, r28
    1816:	ed 59       	subi	r30, 0x9D	; 157
    1818:	ff 4f       	sbci	r31, 0xFF	; 255
    181a:	80 81       	ld	r24, Z
    181c:	88 2f       	mov	r24, r24
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	80 72       	andi	r24, 0x20	; 32
    1822:	90 70       	andi	r25, 0x00	; 0
    1824:	95 95       	asr	r25
    1826:	87 95       	ror	r24
    1828:	95 95       	asr	r25
    182a:	87 95       	ror	r24
    182c:	95 95       	asr	r25
    182e:	87 95       	ror	r24
    1830:	95 95       	asr	r25
    1832:	87 95       	ror	r24
    1834:	95 95       	asr	r25
    1836:	87 95       	ror	r24
    1838:	98 2f       	mov	r25, r24
    183a:	83 e0       	ldi	r24, 0x03	; 3
    183c:	64 e0       	ldi	r22, 0x04	; 4
    183e:	49 2f       	mov	r20, r25
    1840:	0e 94 0c 07 	call	0xe18	; 0xe18 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1844:	fe 01       	movw	r30, r28
    1846:	ed 59       	subi	r30, 0x9D	; 157
    1848:	ff 4f       	sbci	r31, 0xFF	; 255
    184a:	80 81       	ld	r24, Z
    184c:	88 2f       	mov	r24, r24
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	80 74       	andi	r24, 0x40	; 64
    1852:	90 70       	andi	r25, 0x00	; 0
    1854:	08 2e       	mov	r0, r24
    1856:	89 2f       	mov	r24, r25
    1858:	00 0c       	add	r0, r0
    185a:	88 1f       	adc	r24, r24
    185c:	99 0b       	sbc	r25, r25
    185e:	00 0c       	add	r0, r0
    1860:	88 1f       	adc	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	98 2f       	mov	r25, r24
    1866:	83 e0       	ldi	r24, 0x03	; 3
    1868:	65 e0       	ldi	r22, 0x05	; 5
    186a:	49 2f       	mov	r20, r25
    186c:	0e 94 0c 07 	call	0xe18	; 0xe18 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1870:	fe 01       	movw	r30, r28
    1872:	ed 59       	subi	r30, 0x9D	; 157
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	80 81       	ld	r24, Z
    1878:	98 2f       	mov	r25, r24
    187a:	99 1f       	adc	r25, r25
    187c:	99 27       	eor	r25, r25
    187e:	99 1f       	adc	r25, r25
    1880:	83 e0       	ldi	r24, 0x03	; 3
    1882:	66 e0       	ldi	r22, 0x06	; 6
    1884:	49 2f       	mov	r20, r25
    1886:	0e 94 0c 07 	call	0xe18	; 0xe18 <GPIO_writePin>
    188a:	fe 01       	movw	r30, r28
    188c:	ed 5b       	subi	r30, 0xBD	; 189
    188e:	ff 4f       	sbci	r31, 0xFF	; 255
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	a0 e8       	ldi	r26, 0x80	; 128
    1896:	bf e3       	ldi	r27, 0x3F	; 63
    1898:	80 83       	st	Z, r24
    189a:	91 83       	std	Z+1, r25	; 0x01
    189c:	a2 83       	std	Z+2, r26	; 0x02
    189e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a0:	8e 01       	movw	r16, r28
    18a2:	01 5c       	subi	r16, 0xC1	; 193
    18a4:	1f 4f       	sbci	r17, 0xFF	; 255
    18a6:	fe 01       	movw	r30, r28
    18a8:	ed 5b       	subi	r30, 0xBD	; 189
    18aa:	ff 4f       	sbci	r31, 0xFF	; 255
    18ac:	60 81       	ld	r22, Z
    18ae:	71 81       	ldd	r23, Z+1	; 0x01
    18b0:	82 81       	ldd	r24, Z+2	; 0x02
    18b2:	93 81       	ldd	r25, Z+3	; 0x03
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	4a ef       	ldi	r20, 0xFA	; 250
    18ba:	54 e4       	ldi	r21, 0x44	; 68
    18bc:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	f8 01       	movw	r30, r16
    18c6:	80 83       	st	Z, r24
    18c8:	91 83       	std	Z+1, r25	; 0x01
    18ca:	a2 83       	std	Z+2, r26	; 0x02
    18cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18ce:	fe 01       	movw	r30, r28
    18d0:	ff 96       	adiw	r30, 0x3f	; 63
    18d2:	60 81       	ld	r22, Z
    18d4:	71 81       	ldd	r23, Z+1	; 0x01
    18d6:	82 81       	ldd	r24, Z+2	; 0x02
    18d8:	93 81       	ldd	r25, Z+3	; 0x03
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	40 e8       	ldi	r20, 0x80	; 128
    18e0:	5f e3       	ldi	r21, 0x3F	; 63
    18e2:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    18e6:	88 23       	and	r24, r24
    18e8:	2c f4       	brge	.+10     	; 0x18f4 <LCD_sendCommand+0x40e>
		__ticks = 1;
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	9e af       	std	Y+62, r25	; 0x3e
    18f0:	8d af       	std	Y+61, r24	; 0x3d
    18f2:	46 c0       	rjmp	.+140    	; 0x1980 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    18f4:	fe 01       	movw	r30, r28
    18f6:	ff 96       	adiw	r30, 0x3f	; 63
    18f8:	60 81       	ld	r22, Z
    18fa:	71 81       	ldd	r23, Z+1	; 0x01
    18fc:	82 81       	ldd	r24, Z+2	; 0x02
    18fe:	93 81       	ldd	r25, Z+3	; 0x03
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	3f ef       	ldi	r19, 0xFF	; 255
    1904:	4f e7       	ldi	r20, 0x7F	; 127
    1906:	57 e4       	ldi	r21, 0x47	; 71
    1908:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    190c:	18 16       	cp	r1, r24
    190e:	64 f5       	brge	.+88     	; 0x1968 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1910:	fe 01       	movw	r30, r28
    1912:	ed 5b       	subi	r30, 0xBD	; 189
    1914:	ff 4f       	sbci	r31, 0xFF	; 255
    1916:	60 81       	ld	r22, Z
    1918:	71 81       	ldd	r23, Z+1	; 0x01
    191a:	82 81       	ldd	r24, Z+2	; 0x02
    191c:	93 81       	ldd	r25, Z+3	; 0x03
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	40 e2       	ldi	r20, 0x20	; 32
    1924:	51 e4       	ldi	r21, 0x41	; 65
    1926:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    192a:	dc 01       	movw	r26, r24
    192c:	cb 01       	movw	r24, r22
    192e:	bc 01       	movw	r22, r24
    1930:	cd 01       	movw	r24, r26
    1932:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	9e af       	std	Y+62, r25	; 0x3e
    193c:	8d af       	std	Y+61, r24	; 0x3d
    193e:	0f c0       	rjmp	.+30     	; 0x195e <LCD_sendCommand+0x478>
    1940:	88 ec       	ldi	r24, 0xC8	; 200
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	9c af       	std	Y+60, r25	; 0x3c
    1946:	8b af       	std	Y+59, r24	; 0x3b
    1948:	8b ad       	ldd	r24, Y+59	; 0x3b
    194a:	9c ad       	ldd	r25, Y+60	; 0x3c
    194c:	01 97       	sbiw	r24, 0x01	; 1
    194e:	f1 f7       	brne	.-4      	; 0x194c <LCD_sendCommand+0x466>
    1950:	9c af       	std	Y+60, r25	; 0x3c
    1952:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1954:	8d ad       	ldd	r24, Y+61	; 0x3d
    1956:	9e ad       	ldd	r25, Y+62	; 0x3e
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	9e af       	std	Y+62, r25	; 0x3e
    195c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    195e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1960:	9e ad       	ldd	r25, Y+62	; 0x3e
    1962:	00 97       	sbiw	r24, 0x00	; 0
    1964:	69 f7       	brne	.-38     	; 0x1940 <LCD_sendCommand+0x45a>
    1966:	16 c0       	rjmp	.+44     	; 0x1994 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1968:	fe 01       	movw	r30, r28
    196a:	ff 96       	adiw	r30, 0x3f	; 63
    196c:	60 81       	ld	r22, Z
    196e:	71 81       	ldd	r23, Z+1	; 0x01
    1970:	82 81       	ldd	r24, Z+2	; 0x02
    1972:	93 81       	ldd	r25, Z+3	; 0x03
    1974:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	9e af       	std	Y+62, r25	; 0x3e
    197e:	8d af       	std	Y+61, r24	; 0x3d
    1980:	8d ad       	ldd	r24, Y+61	; 0x3d
    1982:	9e ad       	ldd	r25, Y+62	; 0x3e
    1984:	9a af       	std	Y+58, r25	; 0x3a
    1986:	89 af       	std	Y+57, r24	; 0x39
    1988:	89 ad       	ldd	r24, Y+57	; 0x39
    198a:	9a ad       	ldd	r25, Y+58	; 0x3a
    198c:	01 97       	sbiw	r24, 0x01	; 1
    198e:	f1 f7       	brne	.-4      	; 0x198c <LCD_sendCommand+0x4a6>
    1990:	9a af       	std	Y+58, r25	; 0x3a
    1992:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1994:	83 e0       	ldi	r24, 0x03	; 3
    1996:	61 e0       	ldi	r22, 0x01	; 1
    1998:	40 e0       	ldi	r20, 0x00	; 0
    199a:	0e 94 0c 07 	call	0xe18	; 0xe18 <GPIO_writePin>
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	a0 e8       	ldi	r26, 0x80	; 128
    19a4:	bf e3       	ldi	r27, 0x3F	; 63
    19a6:	8d ab       	std	Y+53, r24	; 0x35
    19a8:	9e ab       	std	Y+54, r25	; 0x36
    19aa:	af ab       	std	Y+55, r26	; 0x37
    19ac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ae:	6d a9       	ldd	r22, Y+53	; 0x35
    19b0:	7e a9       	ldd	r23, Y+54	; 0x36
    19b2:	8f a9       	ldd	r24, Y+55	; 0x37
    19b4:	98 ad       	ldd	r25, Y+56	; 0x38
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	4a ef       	ldi	r20, 0xFA	; 250
    19bc:	54 e4       	ldi	r21, 0x44	; 68
    19be:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	89 ab       	std	Y+49, r24	; 0x31
    19c8:	9a ab       	std	Y+50, r25	; 0x32
    19ca:	ab ab       	std	Y+51, r26	; 0x33
    19cc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19ce:	69 a9       	ldd	r22, Y+49	; 0x31
    19d0:	7a a9       	ldd	r23, Y+50	; 0x32
    19d2:	8b a9       	ldd	r24, Y+51	; 0x33
    19d4:	9c a9       	ldd	r25, Y+52	; 0x34
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	40 e8       	ldi	r20, 0x80	; 128
    19dc:	5f e3       	ldi	r21, 0x3F	; 63
    19de:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    19e2:	88 23       	and	r24, r24
    19e4:	2c f4       	brge	.+10     	; 0x19f0 <LCD_sendCommand+0x50a>
		__ticks = 1;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	98 ab       	std	Y+48, r25	; 0x30
    19ec:	8f a7       	std	Y+47, r24	; 0x2f
    19ee:	3f c0       	rjmp	.+126    	; 0x1a6e <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    19f0:	69 a9       	ldd	r22, Y+49	; 0x31
    19f2:	7a a9       	ldd	r23, Y+50	; 0x32
    19f4:	8b a9       	ldd	r24, Y+51	; 0x33
    19f6:	9c a9       	ldd	r25, Y+52	; 0x34
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	3f ef       	ldi	r19, 0xFF	; 255
    19fc:	4f e7       	ldi	r20, 0x7F	; 127
    19fe:	57 e4       	ldi	r21, 0x47	; 71
    1a00:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    1a04:	18 16       	cp	r1, r24
    1a06:	4c f5       	brge	.+82     	; 0x1a5a <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a08:	6d a9       	ldd	r22, Y+53	; 0x35
    1a0a:	7e a9       	ldd	r23, Y+54	; 0x36
    1a0c:	8f a9       	ldd	r24, Y+55	; 0x37
    1a0e:	98 ad       	ldd	r25, Y+56	; 0x38
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e2       	ldi	r20, 0x20	; 32
    1a16:	51 e4       	ldi	r21, 0x41	; 65
    1a18:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	bc 01       	movw	r22, r24
    1a22:	cd 01       	movw	r24, r26
    1a24:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	98 ab       	std	Y+48, r25	; 0x30
    1a2e:	8f a7       	std	Y+47, r24	; 0x2f
    1a30:	0f c0       	rjmp	.+30     	; 0x1a50 <LCD_sendCommand+0x56a>
    1a32:	88 ec       	ldi	r24, 0xC8	; 200
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	9e a7       	std	Y+46, r25	; 0x2e
    1a38:	8d a7       	std	Y+45, r24	; 0x2d
    1a3a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a3c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	f1 f7       	brne	.-4      	; 0x1a3e <LCD_sendCommand+0x558>
    1a42:	9e a7       	std	Y+46, r25	; 0x2e
    1a44:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a48:	98 a9       	ldd	r25, Y+48	; 0x30
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	98 ab       	std	Y+48, r25	; 0x30
    1a4e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a50:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a52:	98 a9       	ldd	r25, Y+48	; 0x30
    1a54:	00 97       	sbiw	r24, 0x00	; 0
    1a56:	69 f7       	brne	.-38     	; 0x1a32 <LCD_sendCommand+0x54c>
    1a58:	14 c0       	rjmp	.+40     	; 0x1a82 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5a:	69 a9       	ldd	r22, Y+49	; 0x31
    1a5c:	7a a9       	ldd	r23, Y+50	; 0x32
    1a5e:	8b a9       	ldd	r24, Y+51	; 0x33
    1a60:	9c a9       	ldd	r25, Y+52	; 0x34
    1a62:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	98 ab       	std	Y+48, r25	; 0x30
    1a6c:	8f a7       	std	Y+47, r24	; 0x2f
    1a6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a70:	98 a9       	ldd	r25, Y+48	; 0x30
    1a72:	9c a7       	std	Y+44, r25	; 0x2c
    1a74:	8b a7       	std	Y+43, r24	; 0x2b
    1a76:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a78:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	f1 f7       	brne	.-4      	; 0x1a7a <LCD_sendCommand+0x594>
    1a7e:	9c a7       	std	Y+44, r25	; 0x2c
    1a80:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1a82:	83 e0       	ldi	r24, 0x03	; 3
    1a84:	61 e0       	ldi	r22, 0x01	; 1
    1a86:	41 e0       	ldi	r20, 0x01	; 1
    1a88:	0e 94 0c 07 	call	0xe18	; 0xe18 <GPIO_writePin>
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	a0 e8       	ldi	r26, 0x80	; 128
    1a92:	bf e3       	ldi	r27, 0x3F	; 63
    1a94:	8f a3       	std	Y+39, r24	; 0x27
    1a96:	98 a7       	std	Y+40, r25	; 0x28
    1a98:	a9 a7       	std	Y+41, r26	; 0x29
    1a9a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9c:	6f a1       	ldd	r22, Y+39	; 0x27
    1a9e:	78 a5       	ldd	r23, Y+40	; 0x28
    1aa0:	89 a5       	ldd	r24, Y+41	; 0x29
    1aa2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	4a ef       	ldi	r20, 0xFA	; 250
    1aaa:	54 e4       	ldi	r21, 0x44	; 68
    1aac:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	8b a3       	std	Y+35, r24	; 0x23
    1ab6:	9c a3       	std	Y+36, r25	; 0x24
    1ab8:	ad a3       	std	Y+37, r26	; 0x25
    1aba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1abc:	6b a1       	ldd	r22, Y+35	; 0x23
    1abe:	7c a1       	ldd	r23, Y+36	; 0x24
    1ac0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ac2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	40 e8       	ldi	r20, 0x80	; 128
    1aca:	5f e3       	ldi	r21, 0x3F	; 63
    1acc:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    1ad0:	88 23       	and	r24, r24
    1ad2:	2c f4       	brge	.+10     	; 0x1ade <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	9a a3       	std	Y+34, r25	; 0x22
    1ada:	89 a3       	std	Y+33, r24	; 0x21
    1adc:	3f c0       	rjmp	.+126    	; 0x1b5c <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1ade:	6b a1       	ldd	r22, Y+35	; 0x23
    1ae0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ae2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ae4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	3f ef       	ldi	r19, 0xFF	; 255
    1aea:	4f e7       	ldi	r20, 0x7F	; 127
    1aec:	57 e4       	ldi	r21, 0x47	; 71
    1aee:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    1af2:	18 16       	cp	r1, r24
    1af4:	4c f5       	brge	.+82     	; 0x1b48 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af6:	6f a1       	ldd	r22, Y+39	; 0x27
    1af8:	78 a5       	ldd	r23, Y+40	; 0x28
    1afa:	89 a5       	ldd	r24, Y+41	; 0x29
    1afc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	40 e2       	ldi	r20, 0x20	; 32
    1b04:	51 e4       	ldi	r21, 0x41	; 65
    1b06:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	bc 01       	movw	r22, r24
    1b10:	cd 01       	movw	r24, r26
    1b12:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	9a a3       	std	Y+34, r25	; 0x22
    1b1c:	89 a3       	std	Y+33, r24	; 0x21
    1b1e:	0f c0       	rjmp	.+30     	; 0x1b3e <LCD_sendCommand+0x658>
    1b20:	88 ec       	ldi	r24, 0xC8	; 200
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	98 a3       	std	Y+32, r25	; 0x20
    1b26:	8f 8f       	std	Y+31, r24	; 0x1f
    1b28:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b2a:	98 a1       	ldd	r25, Y+32	; 0x20
    1b2c:	01 97       	sbiw	r24, 0x01	; 1
    1b2e:	f1 f7       	brne	.-4      	; 0x1b2c <LCD_sendCommand+0x646>
    1b30:	98 a3       	std	Y+32, r25	; 0x20
    1b32:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b34:	89 a1       	ldd	r24, Y+33	; 0x21
    1b36:	9a a1       	ldd	r25, Y+34	; 0x22
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	9a a3       	std	Y+34, r25	; 0x22
    1b3c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b3e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b40:	9a a1       	ldd	r25, Y+34	; 0x22
    1b42:	00 97       	sbiw	r24, 0x00	; 0
    1b44:	69 f7       	brne	.-38     	; 0x1b20 <LCD_sendCommand+0x63a>
    1b46:	14 c0       	rjmp	.+40     	; 0x1b70 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b48:	6b a1       	ldd	r22, Y+35	; 0x23
    1b4a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b4c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b4e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b50:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	9a a3       	std	Y+34, r25	; 0x22
    1b5a:	89 a3       	std	Y+33, r24	; 0x21
    1b5c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b5e:	9a a1       	ldd	r25, Y+34	; 0x22
    1b60:	9e 8f       	std	Y+30, r25	; 0x1e
    1b62:	8d 8f       	std	Y+29, r24	; 0x1d
    1b64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b66:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b68:	01 97       	sbiw	r24, 0x01	; 1
    1b6a:	f1 f7       	brne	.-4      	; 0x1b68 <LCD_sendCommand+0x682>
    1b6c:	9e 8f       	std	Y+30, r25	; 0x1e
    1b6e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    1b70:	fe 01       	movw	r30, r28
    1b72:	ed 59       	subi	r30, 0x9D	; 157
    1b74:	ff 4f       	sbci	r31, 0xFF	; 255
    1b76:	80 81       	ld	r24, Z
    1b78:	98 2f       	mov	r25, r24
    1b7a:	91 70       	andi	r25, 0x01	; 1
    1b7c:	83 e0       	ldi	r24, 0x03	; 3
    1b7e:	63 e0       	ldi	r22, 0x03	; 3
    1b80:	49 2f       	mov	r20, r25
    1b82:	0e 94 0c 07 	call	0xe18	; 0xe18 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    1b86:	fe 01       	movw	r30, r28
    1b88:	ed 59       	subi	r30, 0x9D	; 157
    1b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8c:	80 81       	ld	r24, Z
    1b8e:	88 2f       	mov	r24, r24
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	82 70       	andi	r24, 0x02	; 2
    1b94:	90 70       	andi	r25, 0x00	; 0
    1b96:	95 95       	asr	r25
    1b98:	87 95       	ror	r24
    1b9a:	98 2f       	mov	r25, r24
    1b9c:	83 e0       	ldi	r24, 0x03	; 3
    1b9e:	64 e0       	ldi	r22, 0x04	; 4
    1ba0:	49 2f       	mov	r20, r25
    1ba2:	0e 94 0c 07 	call	0xe18	; 0xe18 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    1ba6:	fe 01       	movw	r30, r28
    1ba8:	ed 59       	subi	r30, 0x9D	; 157
    1baa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bac:	80 81       	ld	r24, Z
    1bae:	88 2f       	mov	r24, r24
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	84 70       	andi	r24, 0x04	; 4
    1bb4:	90 70       	andi	r25, 0x00	; 0
    1bb6:	95 95       	asr	r25
    1bb8:	87 95       	ror	r24
    1bba:	95 95       	asr	r25
    1bbc:	87 95       	ror	r24
    1bbe:	98 2f       	mov	r25, r24
    1bc0:	83 e0       	ldi	r24, 0x03	; 3
    1bc2:	65 e0       	ldi	r22, 0x05	; 5
    1bc4:	49 2f       	mov	r20, r25
    1bc6:	0e 94 0c 07 	call	0xe18	; 0xe18 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    1bca:	fe 01       	movw	r30, r28
    1bcc:	ed 59       	subi	r30, 0x9D	; 157
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	80 81       	ld	r24, Z
    1bd2:	88 2f       	mov	r24, r24
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	88 70       	andi	r24, 0x08	; 8
    1bd8:	90 70       	andi	r25, 0x00	; 0
    1bda:	95 95       	asr	r25
    1bdc:	87 95       	ror	r24
    1bde:	95 95       	asr	r25
    1be0:	87 95       	ror	r24
    1be2:	95 95       	asr	r25
    1be4:	87 95       	ror	r24
    1be6:	98 2f       	mov	r25, r24
    1be8:	83 e0       	ldi	r24, 0x03	; 3
    1bea:	66 e0       	ldi	r22, 0x06	; 6
    1bec:	49 2f       	mov	r20, r25
    1bee:	0e 94 0c 07 	call	0xe18	; 0xe18 <GPIO_writePin>
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	a0 e8       	ldi	r26, 0x80	; 128
    1bf8:	bf e3       	ldi	r27, 0x3F	; 63
    1bfa:	89 8f       	std	Y+25, r24	; 0x19
    1bfc:	9a 8f       	std	Y+26, r25	; 0x1a
    1bfe:	ab 8f       	std	Y+27, r26	; 0x1b
    1c00:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c02:	69 8d       	ldd	r22, Y+25	; 0x19
    1c04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	4a ef       	ldi	r20, 0xFA	; 250
    1c10:	54 e4       	ldi	r21, 0x44	; 68
    1c12:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	8d 8b       	std	Y+21, r24	; 0x15
    1c1c:	9e 8b       	std	Y+22, r25	; 0x16
    1c1e:	af 8b       	std	Y+23, r26	; 0x17
    1c20:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c22:	6d 89       	ldd	r22, Y+21	; 0x15
    1c24:	7e 89       	ldd	r23, Y+22	; 0x16
    1c26:	8f 89       	ldd	r24, Y+23	; 0x17
    1c28:	98 8d       	ldd	r25, Y+24	; 0x18
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	40 e8       	ldi	r20, 0x80	; 128
    1c30:	5f e3       	ldi	r21, 0x3F	; 63
    1c32:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    1c36:	88 23       	and	r24, r24
    1c38:	2c f4       	brge	.+10     	; 0x1c44 <LCD_sendCommand+0x75e>
		__ticks = 1;
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	9c 8b       	std	Y+20, r25	; 0x14
    1c40:	8b 8b       	std	Y+19, r24	; 0x13
    1c42:	3f c0       	rjmp	.+126    	; 0x1cc2 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    1c44:	6d 89       	ldd	r22, Y+21	; 0x15
    1c46:	7e 89       	ldd	r23, Y+22	; 0x16
    1c48:	8f 89       	ldd	r24, Y+23	; 0x17
    1c4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	3f ef       	ldi	r19, 0xFF	; 255
    1c50:	4f e7       	ldi	r20, 0x7F	; 127
    1c52:	57 e4       	ldi	r21, 0x47	; 71
    1c54:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    1c58:	18 16       	cp	r1, r24
    1c5a:	4c f5       	brge	.+82     	; 0x1cae <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5c:	69 8d       	ldd	r22, Y+25	; 0x19
    1c5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	40 e2       	ldi	r20, 0x20	; 32
    1c6a:	51 e4       	ldi	r21, 0x41	; 65
    1c6c:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	bc 01       	movw	r22, r24
    1c76:	cd 01       	movw	r24, r26
    1c78:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	9c 8b       	std	Y+20, r25	; 0x14
    1c82:	8b 8b       	std	Y+19, r24	; 0x13
    1c84:	0f c0       	rjmp	.+30     	; 0x1ca4 <LCD_sendCommand+0x7be>
    1c86:	88 ec       	ldi	r24, 0xC8	; 200
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	9a 8b       	std	Y+18, r25	; 0x12
    1c8c:	89 8b       	std	Y+17, r24	; 0x11
    1c8e:	89 89       	ldd	r24, Y+17	; 0x11
    1c90:	9a 89       	ldd	r25, Y+18	; 0x12
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	f1 f7       	brne	.-4      	; 0x1c92 <LCD_sendCommand+0x7ac>
    1c96:	9a 8b       	std	Y+18, r25	; 0x12
    1c98:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	9c 8b       	std	Y+20, r25	; 0x14
    1ca2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ca8:	00 97       	sbiw	r24, 0x00	; 0
    1caa:	69 f7       	brne	.-38     	; 0x1c86 <LCD_sendCommand+0x7a0>
    1cac:	14 c0       	rjmp	.+40     	; 0x1cd6 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cae:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb0:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb2:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb4:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb6:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	9c 8b       	std	Y+20, r25	; 0x14
    1cc0:	8b 8b       	std	Y+19, r24	; 0x13
    1cc2:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc4:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc6:	98 8b       	std	Y+16, r25	; 0x10
    1cc8:	8f 87       	std	Y+15, r24	; 0x0f
    1cca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ccc:	98 89       	ldd	r25, Y+16	; 0x10
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	f1 f7       	brne	.-4      	; 0x1cce <LCD_sendCommand+0x7e8>
    1cd2:	98 8b       	std	Y+16, r25	; 0x10
    1cd4:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1cd6:	83 e0       	ldi	r24, 0x03	; 3
    1cd8:	61 e0       	ldi	r22, 0x01	; 1
    1cda:	40 e0       	ldi	r20, 0x00	; 0
    1cdc:	0e 94 0c 07 	call	0xe18	; 0xe18 <GPIO_writePin>
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	a0 e8       	ldi	r26, 0x80	; 128
    1ce6:	bf e3       	ldi	r27, 0x3F	; 63
    1ce8:	8b 87       	std	Y+11, r24	; 0x0b
    1cea:	9c 87       	std	Y+12, r25	; 0x0c
    1cec:	ad 87       	std	Y+13, r26	; 0x0d
    1cee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	4a ef       	ldi	r20, 0xFA	; 250
    1cfe:	54 e4       	ldi	r21, 0x44	; 68
    1d00:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	8f 83       	std	Y+7, r24	; 0x07
    1d0a:	98 87       	std	Y+8, r25	; 0x08
    1d0c:	a9 87       	std	Y+9, r26	; 0x09
    1d0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d10:	6f 81       	ldd	r22, Y+7	; 0x07
    1d12:	78 85       	ldd	r23, Y+8	; 0x08
    1d14:	89 85       	ldd	r24, Y+9	; 0x09
    1d16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	40 e8       	ldi	r20, 0x80	; 128
    1d1e:	5f e3       	ldi	r21, 0x3F	; 63
    1d20:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    1d24:	88 23       	and	r24, r24
    1d26:	2c f4       	brge	.+10     	; 0x1d32 <LCD_sendCommand+0x84c>
		__ticks = 1;
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	9e 83       	std	Y+6, r25	; 0x06
    1d2e:	8d 83       	std	Y+5, r24	; 0x05
    1d30:	3f c0       	rjmp	.+126    	; 0x1db0 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    1d32:	6f 81       	ldd	r22, Y+7	; 0x07
    1d34:	78 85       	ldd	r23, Y+8	; 0x08
    1d36:	89 85       	ldd	r24, Y+9	; 0x09
    1d38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	3f ef       	ldi	r19, 0xFF	; 255
    1d3e:	4f e7       	ldi	r20, 0x7F	; 127
    1d40:	57 e4       	ldi	r21, 0x47	; 71
    1d42:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    1d46:	18 16       	cp	r1, r24
    1d48:	4c f5       	brge	.+82     	; 0x1d9c <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	40 e2       	ldi	r20, 0x20	; 32
    1d58:	51 e4       	ldi	r21, 0x41	; 65
    1d5a:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	bc 01       	movw	r22, r24
    1d64:	cd 01       	movw	r24, r26
    1d66:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	9e 83       	std	Y+6, r25	; 0x06
    1d70:	8d 83       	std	Y+5, r24	; 0x05
    1d72:	0f c0       	rjmp	.+30     	; 0x1d92 <LCD_sendCommand+0x8ac>
    1d74:	88 ec       	ldi	r24, 0xC8	; 200
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	9c 83       	std	Y+4, r25	; 0x04
    1d7a:	8b 83       	std	Y+3, r24	; 0x03
    1d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d80:	01 97       	sbiw	r24, 0x01	; 1
    1d82:	f1 f7       	brne	.-4      	; 0x1d80 <LCD_sendCommand+0x89a>
    1d84:	9c 83       	std	Y+4, r25	; 0x04
    1d86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d88:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8c:	01 97       	sbiw	r24, 0x01	; 1
    1d8e:	9e 83       	std	Y+6, r25	; 0x06
    1d90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d92:	8d 81       	ldd	r24, Y+5	; 0x05
    1d94:	9e 81       	ldd	r25, Y+6	; 0x06
    1d96:	00 97       	sbiw	r24, 0x00	; 0
    1d98:	69 f7       	brne	.-38     	; 0x1d74 <LCD_sendCommand+0x88e>
    1d9a:	14 c0       	rjmp	.+40     	; 0x1dc4 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9e:	78 85       	ldd	r23, Y+8	; 0x08
    1da0:	89 85       	ldd	r24, Y+9	; 0x09
    1da2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da4:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	9e 83       	std	Y+6, r25	; 0x06
    1dae:	8d 83       	std	Y+5, r24	; 0x05
    1db0:	8d 81       	ldd	r24, Y+5	; 0x05
    1db2:	9e 81       	ldd	r25, Y+6	; 0x06
    1db4:	9a 83       	std	Y+2, r25	; 0x02
    1db6:	89 83       	std	Y+1, r24	; 0x01
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	9a 81       	ldd	r25, Y+2	; 0x02
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	f1 f7       	brne	.-4      	; 0x1dbc <LCD_sendCommand+0x8d6>
    1dc0:	9a 83       	std	Y+2, r25	; 0x02
    1dc2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#endif
}
    1dc4:	cd 59       	subi	r28, 0x9D	; 157
    1dc6:	df 4f       	sbci	r29, 0xFF	; 255
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61
    1dd2:	cf 91       	pop	r28
    1dd4:	df 91       	pop	r29
    1dd6:	1f 91       	pop	r17
    1dd8:	0f 91       	pop	r16
    1dda:	08 95       	ret

00001ddc <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1ddc:	0f 93       	push	r16
    1dde:	1f 93       	push	r17
    1de0:	df 93       	push	r29
    1de2:	cf 93       	push	r28
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
    1de8:	c3 56       	subi	r28, 0x63	; 99
    1dea:	d0 40       	sbci	r29, 0x00	; 0
    1dec:	0f b6       	in	r0, 0x3f	; 63
    1dee:	f8 94       	cli
    1df0:	de bf       	out	0x3e, r29	; 62
    1df2:	0f be       	out	0x3f, r0	; 63
    1df4:	cd bf       	out	0x3d, r28	; 61
    1df6:	fe 01       	movw	r30, r28
    1df8:	ed 59       	subi	r30, 0x9D	; 157
    1dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfc:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1dfe:	83 e0       	ldi	r24, 0x03	; 3
    1e00:	60 e0       	ldi	r22, 0x00	; 0
    1e02:	41 e0       	ldi	r20, 0x01	; 1
    1e04:	0e 94 0c 07 	call	0xe18	; 0xe18 <GPIO_writePin>
    1e08:	fe 01       	movw	r30, r28
    1e0a:	e1 5a       	subi	r30, 0xA1	; 161
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	a0 e8       	ldi	r26, 0x80	; 128
    1e14:	bf e3       	ldi	r27, 0x3F	; 63
    1e16:	80 83       	st	Z, r24
    1e18:	91 83       	std	Z+1, r25	; 0x01
    1e1a:	a2 83       	std	Z+2, r26	; 0x02
    1e1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e1e:	8e 01       	movw	r16, r28
    1e20:	05 5a       	subi	r16, 0xA5	; 165
    1e22:	1f 4f       	sbci	r17, 0xFF	; 255
    1e24:	fe 01       	movw	r30, r28
    1e26:	e1 5a       	subi	r30, 0xA1	; 161
    1e28:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2a:	60 81       	ld	r22, Z
    1e2c:	71 81       	ldd	r23, Z+1	; 0x01
    1e2e:	82 81       	ldd	r24, Z+2	; 0x02
    1e30:	93 81       	ldd	r25, Z+3	; 0x03
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	4a ef       	ldi	r20, 0xFA	; 250
    1e38:	54 e4       	ldi	r21, 0x44	; 68
    1e3a:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	f8 01       	movw	r30, r16
    1e44:	80 83       	st	Z, r24
    1e46:	91 83       	std	Z+1, r25	; 0x01
    1e48:	a2 83       	std	Z+2, r26	; 0x02
    1e4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	e5 5a       	subi	r30, 0xA5	; 165
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	60 81       	ld	r22, Z
    1e54:	71 81       	ldd	r23, Z+1	; 0x01
    1e56:	82 81       	ldd	r24, Z+2	; 0x02
    1e58:	93 81       	ldd	r25, Z+3	; 0x03
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	40 e8       	ldi	r20, 0x80	; 128
    1e60:	5f e3       	ldi	r21, 0x3F	; 63
    1e62:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    1e66:	88 23       	and	r24, r24
    1e68:	44 f4       	brge	.+16     	; 0x1e7a <LCD_displayCharacter+0x9e>
		__ticks = 1;
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	e7 5a       	subi	r30, 0xA7	; 167
    1e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	91 83       	std	Z+1, r25	; 0x01
    1e76:	80 83       	st	Z, r24
    1e78:	64 c0       	rjmp	.+200    	; 0x1f42 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	e5 5a       	subi	r30, 0xA5	; 165
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	60 81       	ld	r22, Z
    1e82:	71 81       	ldd	r23, Z+1	; 0x01
    1e84:	82 81       	ldd	r24, Z+2	; 0x02
    1e86:	93 81       	ldd	r25, Z+3	; 0x03
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	3f ef       	ldi	r19, 0xFF	; 255
    1e8c:	4f e7       	ldi	r20, 0x7F	; 127
    1e8e:	57 e4       	ldi	r21, 0x47	; 71
    1e90:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    1e94:	18 16       	cp	r1, r24
    1e96:	0c f0       	brlt	.+2      	; 0x1e9a <LCD_displayCharacter+0xbe>
    1e98:	43 c0       	rjmp	.+134    	; 0x1f20 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	e1 5a       	subi	r30, 0xA1	; 161
    1e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea0:	60 81       	ld	r22, Z
    1ea2:	71 81       	ldd	r23, Z+1	; 0x01
    1ea4:	82 81       	ldd	r24, Z+2	; 0x02
    1ea6:	93 81       	ldd	r25, Z+3	; 0x03
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	40 e2       	ldi	r20, 0x20	; 32
    1eae:	51 e4       	ldi	r21, 0x41	; 65
    1eb0:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	8e 01       	movw	r16, r28
    1eba:	07 5a       	subi	r16, 0xA7	; 167
    1ebc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ebe:	bc 01       	movw	r22, r24
    1ec0:	cd 01       	movw	r24, r26
    1ec2:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	f8 01       	movw	r30, r16
    1ecc:	91 83       	std	Z+1, r25	; 0x01
    1ece:	80 83       	st	Z, r24
    1ed0:	1f c0       	rjmp	.+62     	; 0x1f10 <LCD_displayCharacter+0x134>
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	e9 5a       	subi	r30, 0xA9	; 169
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	88 ec       	ldi	r24, 0xC8	; 200
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	91 83       	std	Z+1, r25	; 0x01
    1ede:	80 83       	st	Z, r24
    1ee0:	fe 01       	movw	r30, r28
    1ee2:	e9 5a       	subi	r30, 0xA9	; 169
    1ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee6:	80 81       	ld	r24, Z
    1ee8:	91 81       	ldd	r25, Z+1	; 0x01
    1eea:	01 97       	sbiw	r24, 0x01	; 1
    1eec:	f1 f7       	brne	.-4      	; 0x1eea <LCD_displayCharacter+0x10e>
    1eee:	fe 01       	movw	r30, r28
    1ef0:	e9 5a       	subi	r30, 0xA9	; 169
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	91 83       	std	Z+1, r25	; 0x01
    1ef6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef8:	de 01       	movw	r26, r28
    1efa:	a7 5a       	subi	r26, 0xA7	; 167
    1efc:	bf 4f       	sbci	r27, 0xFF	; 255
    1efe:	fe 01       	movw	r30, r28
    1f00:	e7 5a       	subi	r30, 0xA7	; 167
    1f02:	ff 4f       	sbci	r31, 0xFF	; 255
    1f04:	80 81       	ld	r24, Z
    1f06:	91 81       	ldd	r25, Z+1	; 0x01
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	11 96       	adiw	r26, 0x01	; 1
    1f0c:	9c 93       	st	X, r25
    1f0e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f10:	fe 01       	movw	r30, r28
    1f12:	e7 5a       	subi	r30, 0xA7	; 167
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	80 81       	ld	r24, Z
    1f18:	91 81       	ldd	r25, Z+1	; 0x01
    1f1a:	00 97       	sbiw	r24, 0x00	; 0
    1f1c:	d1 f6       	brne	.-76     	; 0x1ed2 <LCD_displayCharacter+0xf6>
    1f1e:	27 c0       	rjmp	.+78     	; 0x1f6e <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f20:	8e 01       	movw	r16, r28
    1f22:	07 5a       	subi	r16, 0xA7	; 167
    1f24:	1f 4f       	sbci	r17, 0xFF	; 255
    1f26:	fe 01       	movw	r30, r28
    1f28:	e5 5a       	subi	r30, 0xA5	; 165
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	60 81       	ld	r22, Z
    1f2e:	71 81       	ldd	r23, Z+1	; 0x01
    1f30:	82 81       	ldd	r24, Z+2	; 0x02
    1f32:	93 81       	ldd	r25, Z+3	; 0x03
    1f34:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	f8 01       	movw	r30, r16
    1f3e:	91 83       	std	Z+1, r25	; 0x01
    1f40:	80 83       	st	Z, r24
    1f42:	de 01       	movw	r26, r28
    1f44:	ab 5a       	subi	r26, 0xAB	; 171
    1f46:	bf 4f       	sbci	r27, 0xFF	; 255
    1f48:	fe 01       	movw	r30, r28
    1f4a:	e7 5a       	subi	r30, 0xA7	; 167
    1f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4e:	80 81       	ld	r24, Z
    1f50:	91 81       	ldd	r25, Z+1	; 0x01
    1f52:	8d 93       	st	X+, r24
    1f54:	9c 93       	st	X, r25
    1f56:	fe 01       	movw	r30, r28
    1f58:	eb 5a       	subi	r30, 0xAB	; 171
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	80 81       	ld	r24, Z
    1f5e:	91 81       	ldd	r25, Z+1	; 0x01
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	f1 f7       	brne	.-4      	; 0x1f60 <LCD_displayCharacter+0x184>
    1f64:	fe 01       	movw	r30, r28
    1f66:	eb 5a       	subi	r30, 0xAB	; 171
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	91 83       	std	Z+1, r25	; 0x01
    1f6c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1f6e:	83 e0       	ldi	r24, 0x03	; 3
    1f70:	61 e0       	ldi	r22, 0x01	; 1
    1f72:	41 e0       	ldi	r20, 0x01	; 1
    1f74:	0e 94 0c 07 	call	0xe18	; 0xe18 <GPIO_writePin>
    1f78:	fe 01       	movw	r30, r28
    1f7a:	ef 5a       	subi	r30, 0xAF	; 175
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	a0 e8       	ldi	r26, 0x80	; 128
    1f84:	bf e3       	ldi	r27, 0x3F	; 63
    1f86:	80 83       	st	Z, r24
    1f88:	91 83       	std	Z+1, r25	; 0x01
    1f8a:	a2 83       	std	Z+2, r26	; 0x02
    1f8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f8e:	8e 01       	movw	r16, r28
    1f90:	03 5b       	subi	r16, 0xB3	; 179
    1f92:	1f 4f       	sbci	r17, 0xFF	; 255
    1f94:	fe 01       	movw	r30, r28
    1f96:	ef 5a       	subi	r30, 0xAF	; 175
    1f98:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9a:	60 81       	ld	r22, Z
    1f9c:	71 81       	ldd	r23, Z+1	; 0x01
    1f9e:	82 81       	ldd	r24, Z+2	; 0x02
    1fa0:	93 81       	ldd	r25, Z+3	; 0x03
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	4a ef       	ldi	r20, 0xFA	; 250
    1fa8:	54 e4       	ldi	r21, 0x44	; 68
    1faa:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	f8 01       	movw	r30, r16
    1fb4:	80 83       	st	Z, r24
    1fb6:	91 83       	std	Z+1, r25	; 0x01
    1fb8:	a2 83       	std	Z+2, r26	; 0x02
    1fba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	e3 5b       	subi	r30, 0xB3	; 179
    1fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc2:	60 81       	ld	r22, Z
    1fc4:	71 81       	ldd	r23, Z+1	; 0x01
    1fc6:	82 81       	ldd	r24, Z+2	; 0x02
    1fc8:	93 81       	ldd	r25, Z+3	; 0x03
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	40 e8       	ldi	r20, 0x80	; 128
    1fd0:	5f e3       	ldi	r21, 0x3F	; 63
    1fd2:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    1fd6:	88 23       	and	r24, r24
    1fd8:	44 f4       	brge	.+16     	; 0x1fea <LCD_displayCharacter+0x20e>
		__ticks = 1;
    1fda:	fe 01       	movw	r30, r28
    1fdc:	e5 5b       	subi	r30, 0xB5	; 181
    1fde:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	91 83       	std	Z+1, r25	; 0x01
    1fe6:	80 83       	st	Z, r24
    1fe8:	64 c0       	rjmp	.+200    	; 0x20b2 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    1fea:	fe 01       	movw	r30, r28
    1fec:	e3 5b       	subi	r30, 0xB3	; 179
    1fee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff0:	60 81       	ld	r22, Z
    1ff2:	71 81       	ldd	r23, Z+1	; 0x01
    1ff4:	82 81       	ldd	r24, Z+2	; 0x02
    1ff6:	93 81       	ldd	r25, Z+3	; 0x03
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	3f ef       	ldi	r19, 0xFF	; 255
    1ffc:	4f e7       	ldi	r20, 0x7F	; 127
    1ffe:	57 e4       	ldi	r21, 0x47	; 71
    2000:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    2004:	18 16       	cp	r1, r24
    2006:	0c f0       	brlt	.+2      	; 0x200a <LCD_displayCharacter+0x22e>
    2008:	43 c0       	rjmp	.+134    	; 0x2090 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200a:	fe 01       	movw	r30, r28
    200c:	ef 5a       	subi	r30, 0xAF	; 175
    200e:	ff 4f       	sbci	r31, 0xFF	; 255
    2010:	60 81       	ld	r22, Z
    2012:	71 81       	ldd	r23, Z+1	; 0x01
    2014:	82 81       	ldd	r24, Z+2	; 0x02
    2016:	93 81       	ldd	r25, Z+3	; 0x03
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	40 e2       	ldi	r20, 0x20	; 32
    201e:	51 e4       	ldi	r21, 0x41	; 65
    2020:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	8e 01       	movw	r16, r28
    202a:	05 5b       	subi	r16, 0xB5	; 181
    202c:	1f 4f       	sbci	r17, 0xFF	; 255
    202e:	bc 01       	movw	r22, r24
    2030:	cd 01       	movw	r24, r26
    2032:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	f8 01       	movw	r30, r16
    203c:	91 83       	std	Z+1, r25	; 0x01
    203e:	80 83       	st	Z, r24
    2040:	1f c0       	rjmp	.+62     	; 0x2080 <LCD_displayCharacter+0x2a4>
    2042:	fe 01       	movw	r30, r28
    2044:	e7 5b       	subi	r30, 0xB7	; 183
    2046:	ff 4f       	sbci	r31, 0xFF	; 255
    2048:	88 ec       	ldi	r24, 0xC8	; 200
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	91 83       	std	Z+1, r25	; 0x01
    204e:	80 83       	st	Z, r24
    2050:	fe 01       	movw	r30, r28
    2052:	e7 5b       	subi	r30, 0xB7	; 183
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	80 81       	ld	r24, Z
    2058:	91 81       	ldd	r25, Z+1	; 0x01
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	f1 f7       	brne	.-4      	; 0x205a <LCD_displayCharacter+0x27e>
    205e:	fe 01       	movw	r30, r28
    2060:	e7 5b       	subi	r30, 0xB7	; 183
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	91 83       	std	Z+1, r25	; 0x01
    2066:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2068:	de 01       	movw	r26, r28
    206a:	a5 5b       	subi	r26, 0xB5	; 181
    206c:	bf 4f       	sbci	r27, 0xFF	; 255
    206e:	fe 01       	movw	r30, r28
    2070:	e5 5b       	subi	r30, 0xB5	; 181
    2072:	ff 4f       	sbci	r31, 0xFF	; 255
    2074:	80 81       	ld	r24, Z
    2076:	91 81       	ldd	r25, Z+1	; 0x01
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	11 96       	adiw	r26, 0x01	; 1
    207c:	9c 93       	st	X, r25
    207e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2080:	fe 01       	movw	r30, r28
    2082:	e5 5b       	subi	r30, 0xB5	; 181
    2084:	ff 4f       	sbci	r31, 0xFF	; 255
    2086:	80 81       	ld	r24, Z
    2088:	91 81       	ldd	r25, Z+1	; 0x01
    208a:	00 97       	sbiw	r24, 0x00	; 0
    208c:	d1 f6       	brne	.-76     	; 0x2042 <LCD_displayCharacter+0x266>
    208e:	27 c0       	rjmp	.+78     	; 0x20de <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2090:	8e 01       	movw	r16, r28
    2092:	05 5b       	subi	r16, 0xB5	; 181
    2094:	1f 4f       	sbci	r17, 0xFF	; 255
    2096:	fe 01       	movw	r30, r28
    2098:	e3 5b       	subi	r30, 0xB3	; 179
    209a:	ff 4f       	sbci	r31, 0xFF	; 255
    209c:	60 81       	ld	r22, Z
    209e:	71 81       	ldd	r23, Z+1	; 0x01
    20a0:	82 81       	ldd	r24, Z+2	; 0x02
    20a2:	93 81       	ldd	r25, Z+3	; 0x03
    20a4:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	f8 01       	movw	r30, r16
    20ae:	91 83       	std	Z+1, r25	; 0x01
    20b0:	80 83       	st	Z, r24
    20b2:	de 01       	movw	r26, r28
    20b4:	a9 5b       	subi	r26, 0xB9	; 185
    20b6:	bf 4f       	sbci	r27, 0xFF	; 255
    20b8:	fe 01       	movw	r30, r28
    20ba:	e5 5b       	subi	r30, 0xB5	; 181
    20bc:	ff 4f       	sbci	r31, 0xFF	; 255
    20be:	80 81       	ld	r24, Z
    20c0:	91 81       	ldd	r25, Z+1	; 0x01
    20c2:	8d 93       	st	X+, r24
    20c4:	9c 93       	st	X, r25
    20c6:	fe 01       	movw	r30, r28
    20c8:	e9 5b       	subi	r30, 0xB9	; 185
    20ca:	ff 4f       	sbci	r31, 0xFF	; 255
    20cc:	80 81       	ld	r24, Z
    20ce:	91 81       	ldd	r25, Z+1	; 0x01
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	f1 f7       	brne	.-4      	; 0x20d0 <LCD_displayCharacter+0x2f4>
    20d4:	fe 01       	movw	r30, r28
    20d6:	e9 5b       	subi	r30, 0xB9	; 185
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	91 83       	std	Z+1, r25	; 0x01
    20dc:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    20de:	fe 01       	movw	r30, r28
    20e0:	ed 59       	subi	r30, 0x9D	; 157
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	80 81       	ld	r24, Z
    20e6:	88 2f       	mov	r24, r24
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	80 71       	andi	r24, 0x10	; 16
    20ec:	90 70       	andi	r25, 0x00	; 0
    20ee:	95 95       	asr	r25
    20f0:	87 95       	ror	r24
    20f2:	95 95       	asr	r25
    20f4:	87 95       	ror	r24
    20f6:	95 95       	asr	r25
    20f8:	87 95       	ror	r24
    20fa:	95 95       	asr	r25
    20fc:	87 95       	ror	r24
    20fe:	98 2f       	mov	r25, r24
    2100:	83 e0       	ldi	r24, 0x03	; 3
    2102:	63 e0       	ldi	r22, 0x03	; 3
    2104:	49 2f       	mov	r20, r25
    2106:	0e 94 0c 07 	call	0xe18	; 0xe18 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    210a:	fe 01       	movw	r30, r28
    210c:	ed 59       	subi	r30, 0x9D	; 157
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	80 81       	ld	r24, Z
    2112:	88 2f       	mov	r24, r24
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	80 72       	andi	r24, 0x20	; 32
    2118:	90 70       	andi	r25, 0x00	; 0
    211a:	95 95       	asr	r25
    211c:	87 95       	ror	r24
    211e:	95 95       	asr	r25
    2120:	87 95       	ror	r24
    2122:	95 95       	asr	r25
    2124:	87 95       	ror	r24
    2126:	95 95       	asr	r25
    2128:	87 95       	ror	r24
    212a:	95 95       	asr	r25
    212c:	87 95       	ror	r24
    212e:	98 2f       	mov	r25, r24
    2130:	83 e0       	ldi	r24, 0x03	; 3
    2132:	64 e0       	ldi	r22, 0x04	; 4
    2134:	49 2f       	mov	r20, r25
    2136:	0e 94 0c 07 	call	0xe18	; 0xe18 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    213a:	fe 01       	movw	r30, r28
    213c:	ed 59       	subi	r30, 0x9D	; 157
    213e:	ff 4f       	sbci	r31, 0xFF	; 255
    2140:	80 81       	ld	r24, Z
    2142:	88 2f       	mov	r24, r24
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	80 74       	andi	r24, 0x40	; 64
    2148:	90 70       	andi	r25, 0x00	; 0
    214a:	08 2e       	mov	r0, r24
    214c:	89 2f       	mov	r24, r25
    214e:	00 0c       	add	r0, r0
    2150:	88 1f       	adc	r24, r24
    2152:	99 0b       	sbc	r25, r25
    2154:	00 0c       	add	r0, r0
    2156:	88 1f       	adc	r24, r24
    2158:	99 1f       	adc	r25, r25
    215a:	98 2f       	mov	r25, r24
    215c:	83 e0       	ldi	r24, 0x03	; 3
    215e:	65 e0       	ldi	r22, 0x05	; 5
    2160:	49 2f       	mov	r20, r25
    2162:	0e 94 0c 07 	call	0xe18	; 0xe18 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2166:	fe 01       	movw	r30, r28
    2168:	ed 59       	subi	r30, 0x9D	; 157
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	80 81       	ld	r24, Z
    216e:	98 2f       	mov	r25, r24
    2170:	99 1f       	adc	r25, r25
    2172:	99 27       	eor	r25, r25
    2174:	99 1f       	adc	r25, r25
    2176:	83 e0       	ldi	r24, 0x03	; 3
    2178:	66 e0       	ldi	r22, 0x06	; 6
    217a:	49 2f       	mov	r20, r25
    217c:	0e 94 0c 07 	call	0xe18	; 0xe18 <GPIO_writePin>
    2180:	fe 01       	movw	r30, r28
    2182:	ed 5b       	subi	r30, 0xBD	; 189
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	a0 e8       	ldi	r26, 0x80	; 128
    218c:	bf e3       	ldi	r27, 0x3F	; 63
    218e:	80 83       	st	Z, r24
    2190:	91 83       	std	Z+1, r25	; 0x01
    2192:	a2 83       	std	Z+2, r26	; 0x02
    2194:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2196:	8e 01       	movw	r16, r28
    2198:	01 5c       	subi	r16, 0xC1	; 193
    219a:	1f 4f       	sbci	r17, 0xFF	; 255
    219c:	fe 01       	movw	r30, r28
    219e:	ed 5b       	subi	r30, 0xBD	; 189
    21a0:	ff 4f       	sbci	r31, 0xFF	; 255
    21a2:	60 81       	ld	r22, Z
    21a4:	71 81       	ldd	r23, Z+1	; 0x01
    21a6:	82 81       	ldd	r24, Z+2	; 0x02
    21a8:	93 81       	ldd	r25, Z+3	; 0x03
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	4a ef       	ldi	r20, 0xFA	; 250
    21b0:	54 e4       	ldi	r21, 0x44	; 68
    21b2:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	f8 01       	movw	r30, r16
    21bc:	80 83       	st	Z, r24
    21be:	91 83       	std	Z+1, r25	; 0x01
    21c0:	a2 83       	std	Z+2, r26	; 0x02
    21c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21c4:	fe 01       	movw	r30, r28
    21c6:	ff 96       	adiw	r30, 0x3f	; 63
    21c8:	60 81       	ld	r22, Z
    21ca:	71 81       	ldd	r23, Z+1	; 0x01
    21cc:	82 81       	ldd	r24, Z+2	; 0x02
    21ce:	93 81       	ldd	r25, Z+3	; 0x03
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	40 e8       	ldi	r20, 0x80	; 128
    21d6:	5f e3       	ldi	r21, 0x3F	; 63
    21d8:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    21dc:	88 23       	and	r24, r24
    21de:	2c f4       	brge	.+10     	; 0x21ea <LCD_displayCharacter+0x40e>
		__ticks = 1;
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	9e af       	std	Y+62, r25	; 0x3e
    21e6:	8d af       	std	Y+61, r24	; 0x3d
    21e8:	46 c0       	rjmp	.+140    	; 0x2276 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    21ea:	fe 01       	movw	r30, r28
    21ec:	ff 96       	adiw	r30, 0x3f	; 63
    21ee:	60 81       	ld	r22, Z
    21f0:	71 81       	ldd	r23, Z+1	; 0x01
    21f2:	82 81       	ldd	r24, Z+2	; 0x02
    21f4:	93 81       	ldd	r25, Z+3	; 0x03
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	3f ef       	ldi	r19, 0xFF	; 255
    21fa:	4f e7       	ldi	r20, 0x7F	; 127
    21fc:	57 e4       	ldi	r21, 0x47	; 71
    21fe:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    2202:	18 16       	cp	r1, r24
    2204:	64 f5       	brge	.+88     	; 0x225e <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2206:	fe 01       	movw	r30, r28
    2208:	ed 5b       	subi	r30, 0xBD	; 189
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	60 81       	ld	r22, Z
    220e:	71 81       	ldd	r23, Z+1	; 0x01
    2210:	82 81       	ldd	r24, Z+2	; 0x02
    2212:	93 81       	ldd	r25, Z+3	; 0x03
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	40 e2       	ldi	r20, 0x20	; 32
    221a:	51 e4       	ldi	r21, 0x41	; 65
    221c:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	bc 01       	movw	r22, r24
    2226:	cd 01       	movw	r24, r26
    2228:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	9e af       	std	Y+62, r25	; 0x3e
    2232:	8d af       	std	Y+61, r24	; 0x3d
    2234:	0f c0       	rjmp	.+30     	; 0x2254 <LCD_displayCharacter+0x478>
    2236:	88 ec       	ldi	r24, 0xC8	; 200
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	9c af       	std	Y+60, r25	; 0x3c
    223c:	8b af       	std	Y+59, r24	; 0x3b
    223e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2240:	9c ad       	ldd	r25, Y+60	; 0x3c
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <LCD_displayCharacter+0x466>
    2246:	9c af       	std	Y+60, r25	; 0x3c
    2248:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224a:	8d ad       	ldd	r24, Y+61	; 0x3d
    224c:	9e ad       	ldd	r25, Y+62	; 0x3e
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	9e af       	std	Y+62, r25	; 0x3e
    2252:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2254:	8d ad       	ldd	r24, Y+61	; 0x3d
    2256:	9e ad       	ldd	r25, Y+62	; 0x3e
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	69 f7       	brne	.-38     	; 0x2236 <LCD_displayCharacter+0x45a>
    225c:	16 c0       	rjmp	.+44     	; 0x228a <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225e:	fe 01       	movw	r30, r28
    2260:	ff 96       	adiw	r30, 0x3f	; 63
    2262:	60 81       	ld	r22, Z
    2264:	71 81       	ldd	r23, Z+1	; 0x01
    2266:	82 81       	ldd	r24, Z+2	; 0x02
    2268:	93 81       	ldd	r25, Z+3	; 0x03
    226a:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	9e af       	std	Y+62, r25	; 0x3e
    2274:	8d af       	std	Y+61, r24	; 0x3d
    2276:	8d ad       	ldd	r24, Y+61	; 0x3d
    2278:	9e ad       	ldd	r25, Y+62	; 0x3e
    227a:	9a af       	std	Y+58, r25	; 0x3a
    227c:	89 af       	std	Y+57, r24	; 0x39
    227e:	89 ad       	ldd	r24, Y+57	; 0x39
    2280:	9a ad       	ldd	r25, Y+58	; 0x3a
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	f1 f7       	brne	.-4      	; 0x2282 <LCD_displayCharacter+0x4a6>
    2286:	9a af       	std	Y+58, r25	; 0x3a
    2288:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    228a:	83 e0       	ldi	r24, 0x03	; 3
    228c:	61 e0       	ldi	r22, 0x01	; 1
    228e:	40 e0       	ldi	r20, 0x00	; 0
    2290:	0e 94 0c 07 	call	0xe18	; 0xe18 <GPIO_writePin>
    2294:	80 e0       	ldi	r24, 0x00	; 0
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	a0 e8       	ldi	r26, 0x80	; 128
    229a:	bf e3       	ldi	r27, 0x3F	; 63
    229c:	8d ab       	std	Y+53, r24	; 0x35
    229e:	9e ab       	std	Y+54, r25	; 0x36
    22a0:	af ab       	std	Y+55, r26	; 0x37
    22a2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a4:	6d a9       	ldd	r22, Y+53	; 0x35
    22a6:	7e a9       	ldd	r23, Y+54	; 0x36
    22a8:	8f a9       	ldd	r24, Y+55	; 0x37
    22aa:	98 ad       	ldd	r25, Y+56	; 0x38
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	4a ef       	ldi	r20, 0xFA	; 250
    22b2:	54 e4       	ldi	r21, 0x44	; 68
    22b4:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	89 ab       	std	Y+49, r24	; 0x31
    22be:	9a ab       	std	Y+50, r25	; 0x32
    22c0:	ab ab       	std	Y+51, r26	; 0x33
    22c2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22c4:	69 a9       	ldd	r22, Y+49	; 0x31
    22c6:	7a a9       	ldd	r23, Y+50	; 0x32
    22c8:	8b a9       	ldd	r24, Y+51	; 0x33
    22ca:	9c a9       	ldd	r25, Y+52	; 0x34
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	40 e8       	ldi	r20, 0x80	; 128
    22d2:	5f e3       	ldi	r21, 0x3F	; 63
    22d4:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    22d8:	88 23       	and	r24, r24
    22da:	2c f4       	brge	.+10     	; 0x22e6 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	98 ab       	std	Y+48, r25	; 0x30
    22e2:	8f a7       	std	Y+47, r24	; 0x2f
    22e4:	3f c0       	rjmp	.+126    	; 0x2364 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    22e6:	69 a9       	ldd	r22, Y+49	; 0x31
    22e8:	7a a9       	ldd	r23, Y+50	; 0x32
    22ea:	8b a9       	ldd	r24, Y+51	; 0x33
    22ec:	9c a9       	ldd	r25, Y+52	; 0x34
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	3f ef       	ldi	r19, 0xFF	; 255
    22f2:	4f e7       	ldi	r20, 0x7F	; 127
    22f4:	57 e4       	ldi	r21, 0x47	; 71
    22f6:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    22fa:	18 16       	cp	r1, r24
    22fc:	4c f5       	brge	.+82     	; 0x2350 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22fe:	6d a9       	ldd	r22, Y+53	; 0x35
    2300:	7e a9       	ldd	r23, Y+54	; 0x36
    2302:	8f a9       	ldd	r24, Y+55	; 0x37
    2304:	98 ad       	ldd	r25, Y+56	; 0x38
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	40 e2       	ldi	r20, 0x20	; 32
    230c:	51 e4       	ldi	r21, 0x41	; 65
    230e:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	bc 01       	movw	r22, r24
    2318:	cd 01       	movw	r24, r26
    231a:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	98 ab       	std	Y+48, r25	; 0x30
    2324:	8f a7       	std	Y+47, r24	; 0x2f
    2326:	0f c0       	rjmp	.+30     	; 0x2346 <LCD_displayCharacter+0x56a>
    2328:	88 ec       	ldi	r24, 0xC8	; 200
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	9e a7       	std	Y+46, r25	; 0x2e
    232e:	8d a7       	std	Y+45, r24	; 0x2d
    2330:	8d a5       	ldd	r24, Y+45	; 0x2d
    2332:	9e a5       	ldd	r25, Y+46	; 0x2e
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	f1 f7       	brne	.-4      	; 0x2334 <LCD_displayCharacter+0x558>
    2338:	9e a7       	std	Y+46, r25	; 0x2e
    233a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    233c:	8f a5       	ldd	r24, Y+47	; 0x2f
    233e:	98 a9       	ldd	r25, Y+48	; 0x30
    2340:	01 97       	sbiw	r24, 0x01	; 1
    2342:	98 ab       	std	Y+48, r25	; 0x30
    2344:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2346:	8f a5       	ldd	r24, Y+47	; 0x2f
    2348:	98 a9       	ldd	r25, Y+48	; 0x30
    234a:	00 97       	sbiw	r24, 0x00	; 0
    234c:	69 f7       	brne	.-38     	; 0x2328 <LCD_displayCharacter+0x54c>
    234e:	14 c0       	rjmp	.+40     	; 0x2378 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2350:	69 a9       	ldd	r22, Y+49	; 0x31
    2352:	7a a9       	ldd	r23, Y+50	; 0x32
    2354:	8b a9       	ldd	r24, Y+51	; 0x33
    2356:	9c a9       	ldd	r25, Y+52	; 0x34
    2358:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	98 ab       	std	Y+48, r25	; 0x30
    2362:	8f a7       	std	Y+47, r24	; 0x2f
    2364:	8f a5       	ldd	r24, Y+47	; 0x2f
    2366:	98 a9       	ldd	r25, Y+48	; 0x30
    2368:	9c a7       	std	Y+44, r25	; 0x2c
    236a:	8b a7       	std	Y+43, r24	; 0x2b
    236c:	8b a5       	ldd	r24, Y+43	; 0x2b
    236e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	f1 f7       	brne	.-4      	; 0x2370 <LCD_displayCharacter+0x594>
    2374:	9c a7       	std	Y+44, r25	; 0x2c
    2376:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2378:	83 e0       	ldi	r24, 0x03	; 3
    237a:	61 e0       	ldi	r22, 0x01	; 1
    237c:	41 e0       	ldi	r20, 0x01	; 1
    237e:	0e 94 0c 07 	call	0xe18	; 0xe18 <GPIO_writePin>
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	a0 e8       	ldi	r26, 0x80	; 128
    2388:	bf e3       	ldi	r27, 0x3F	; 63
    238a:	8f a3       	std	Y+39, r24	; 0x27
    238c:	98 a7       	std	Y+40, r25	; 0x28
    238e:	a9 a7       	std	Y+41, r26	; 0x29
    2390:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2392:	6f a1       	ldd	r22, Y+39	; 0x27
    2394:	78 a5       	ldd	r23, Y+40	; 0x28
    2396:	89 a5       	ldd	r24, Y+41	; 0x29
    2398:	9a a5       	ldd	r25, Y+42	; 0x2a
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	4a ef       	ldi	r20, 0xFA	; 250
    23a0:	54 e4       	ldi	r21, 0x44	; 68
    23a2:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	8b a3       	std	Y+35, r24	; 0x23
    23ac:	9c a3       	std	Y+36, r25	; 0x24
    23ae:	ad a3       	std	Y+37, r26	; 0x25
    23b0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23b2:	6b a1       	ldd	r22, Y+35	; 0x23
    23b4:	7c a1       	ldd	r23, Y+36	; 0x24
    23b6:	8d a1       	ldd	r24, Y+37	; 0x25
    23b8:	9e a1       	ldd	r25, Y+38	; 0x26
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	40 e8       	ldi	r20, 0x80	; 128
    23c0:	5f e3       	ldi	r21, 0x3F	; 63
    23c2:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    23c6:	88 23       	and	r24, r24
    23c8:	2c f4       	brge	.+10     	; 0x23d4 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	9a a3       	std	Y+34, r25	; 0x22
    23d0:	89 a3       	std	Y+33, r24	; 0x21
    23d2:	3f c0       	rjmp	.+126    	; 0x2452 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    23d4:	6b a1       	ldd	r22, Y+35	; 0x23
    23d6:	7c a1       	ldd	r23, Y+36	; 0x24
    23d8:	8d a1       	ldd	r24, Y+37	; 0x25
    23da:	9e a1       	ldd	r25, Y+38	; 0x26
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	3f ef       	ldi	r19, 0xFF	; 255
    23e0:	4f e7       	ldi	r20, 0x7F	; 127
    23e2:	57 e4       	ldi	r21, 0x47	; 71
    23e4:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    23e8:	18 16       	cp	r1, r24
    23ea:	4c f5       	brge	.+82     	; 0x243e <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ec:	6f a1       	ldd	r22, Y+39	; 0x27
    23ee:	78 a5       	ldd	r23, Y+40	; 0x28
    23f0:	89 a5       	ldd	r24, Y+41	; 0x29
    23f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	40 e2       	ldi	r20, 0x20	; 32
    23fa:	51 e4       	ldi	r21, 0x41	; 65
    23fc:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	bc 01       	movw	r22, r24
    2406:	cd 01       	movw	r24, r26
    2408:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	9a a3       	std	Y+34, r25	; 0x22
    2412:	89 a3       	std	Y+33, r24	; 0x21
    2414:	0f c0       	rjmp	.+30     	; 0x2434 <LCD_displayCharacter+0x658>
    2416:	88 ec       	ldi	r24, 0xC8	; 200
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	98 a3       	std	Y+32, r25	; 0x20
    241c:	8f 8f       	std	Y+31, r24	; 0x1f
    241e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2420:	98 a1       	ldd	r25, Y+32	; 0x20
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	f1 f7       	brne	.-4      	; 0x2422 <LCD_displayCharacter+0x646>
    2426:	98 a3       	std	Y+32, r25	; 0x20
    2428:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242a:	89 a1       	ldd	r24, Y+33	; 0x21
    242c:	9a a1       	ldd	r25, Y+34	; 0x22
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	9a a3       	std	Y+34, r25	; 0x22
    2432:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2434:	89 a1       	ldd	r24, Y+33	; 0x21
    2436:	9a a1       	ldd	r25, Y+34	; 0x22
    2438:	00 97       	sbiw	r24, 0x00	; 0
    243a:	69 f7       	brne	.-38     	; 0x2416 <LCD_displayCharacter+0x63a>
    243c:	14 c0       	rjmp	.+40     	; 0x2466 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243e:	6b a1       	ldd	r22, Y+35	; 0x23
    2440:	7c a1       	ldd	r23, Y+36	; 0x24
    2442:	8d a1       	ldd	r24, Y+37	; 0x25
    2444:	9e a1       	ldd	r25, Y+38	; 0x26
    2446:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	9a a3       	std	Y+34, r25	; 0x22
    2450:	89 a3       	std	Y+33, r24	; 0x21
    2452:	89 a1       	ldd	r24, Y+33	; 0x21
    2454:	9a a1       	ldd	r25, Y+34	; 0x22
    2456:	9e 8f       	std	Y+30, r25	; 0x1e
    2458:	8d 8f       	std	Y+29, r24	; 0x1d
    245a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    245c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    245e:	01 97       	sbiw	r24, 0x01	; 1
    2460:	f1 f7       	brne	.-4      	; 0x245e <LCD_displayCharacter+0x682>
    2462:	9e 8f       	std	Y+30, r25	; 0x1e
    2464:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2466:	fe 01       	movw	r30, r28
    2468:	ed 59       	subi	r30, 0x9D	; 157
    246a:	ff 4f       	sbci	r31, 0xFF	; 255
    246c:	80 81       	ld	r24, Z
    246e:	98 2f       	mov	r25, r24
    2470:	91 70       	andi	r25, 0x01	; 1
    2472:	83 e0       	ldi	r24, 0x03	; 3
    2474:	63 e0       	ldi	r22, 0x03	; 3
    2476:	49 2f       	mov	r20, r25
    2478:	0e 94 0c 07 	call	0xe18	; 0xe18 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    247c:	fe 01       	movw	r30, r28
    247e:	ed 59       	subi	r30, 0x9D	; 157
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	80 81       	ld	r24, Z
    2484:	88 2f       	mov	r24, r24
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	82 70       	andi	r24, 0x02	; 2
    248a:	90 70       	andi	r25, 0x00	; 0
    248c:	95 95       	asr	r25
    248e:	87 95       	ror	r24
    2490:	98 2f       	mov	r25, r24
    2492:	83 e0       	ldi	r24, 0x03	; 3
    2494:	64 e0       	ldi	r22, 0x04	; 4
    2496:	49 2f       	mov	r20, r25
    2498:	0e 94 0c 07 	call	0xe18	; 0xe18 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    249c:	fe 01       	movw	r30, r28
    249e:	ed 59       	subi	r30, 0x9D	; 157
    24a0:	ff 4f       	sbci	r31, 0xFF	; 255
    24a2:	80 81       	ld	r24, Z
    24a4:	88 2f       	mov	r24, r24
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	84 70       	andi	r24, 0x04	; 4
    24aa:	90 70       	andi	r25, 0x00	; 0
    24ac:	95 95       	asr	r25
    24ae:	87 95       	ror	r24
    24b0:	95 95       	asr	r25
    24b2:	87 95       	ror	r24
    24b4:	98 2f       	mov	r25, r24
    24b6:	83 e0       	ldi	r24, 0x03	; 3
    24b8:	65 e0       	ldi	r22, 0x05	; 5
    24ba:	49 2f       	mov	r20, r25
    24bc:	0e 94 0c 07 	call	0xe18	; 0xe18 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    24c0:	fe 01       	movw	r30, r28
    24c2:	ed 59       	subi	r30, 0x9D	; 157
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	80 81       	ld	r24, Z
    24c8:	88 2f       	mov	r24, r24
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	88 70       	andi	r24, 0x08	; 8
    24ce:	90 70       	andi	r25, 0x00	; 0
    24d0:	95 95       	asr	r25
    24d2:	87 95       	ror	r24
    24d4:	95 95       	asr	r25
    24d6:	87 95       	ror	r24
    24d8:	95 95       	asr	r25
    24da:	87 95       	ror	r24
    24dc:	98 2f       	mov	r25, r24
    24de:	83 e0       	ldi	r24, 0x03	; 3
    24e0:	66 e0       	ldi	r22, 0x06	; 6
    24e2:	49 2f       	mov	r20, r25
    24e4:	0e 94 0c 07 	call	0xe18	; 0xe18 <GPIO_writePin>
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	a0 e8       	ldi	r26, 0x80	; 128
    24ee:	bf e3       	ldi	r27, 0x3F	; 63
    24f0:	89 8f       	std	Y+25, r24	; 0x19
    24f2:	9a 8f       	std	Y+26, r25	; 0x1a
    24f4:	ab 8f       	std	Y+27, r26	; 0x1b
    24f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f8:	69 8d       	ldd	r22, Y+25	; 0x19
    24fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	4a ef       	ldi	r20, 0xFA	; 250
    2506:	54 e4       	ldi	r21, 0x44	; 68
    2508:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	8d 8b       	std	Y+21, r24	; 0x15
    2512:	9e 8b       	std	Y+22, r25	; 0x16
    2514:	af 8b       	std	Y+23, r26	; 0x17
    2516:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2518:	6d 89       	ldd	r22, Y+21	; 0x15
    251a:	7e 89       	ldd	r23, Y+22	; 0x16
    251c:	8f 89       	ldd	r24, Y+23	; 0x17
    251e:	98 8d       	ldd	r25, Y+24	; 0x18
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	40 e8       	ldi	r20, 0x80	; 128
    2526:	5f e3       	ldi	r21, 0x3F	; 63
    2528:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    252c:	88 23       	and	r24, r24
    252e:	2c f4       	brge	.+10     	; 0x253a <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	9c 8b       	std	Y+20, r25	; 0x14
    2536:	8b 8b       	std	Y+19, r24	; 0x13
    2538:	3f c0       	rjmp	.+126    	; 0x25b8 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    253a:	6d 89       	ldd	r22, Y+21	; 0x15
    253c:	7e 89       	ldd	r23, Y+22	; 0x16
    253e:	8f 89       	ldd	r24, Y+23	; 0x17
    2540:	98 8d       	ldd	r25, Y+24	; 0x18
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	3f ef       	ldi	r19, 0xFF	; 255
    2546:	4f e7       	ldi	r20, 0x7F	; 127
    2548:	57 e4       	ldi	r21, 0x47	; 71
    254a:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    254e:	18 16       	cp	r1, r24
    2550:	4c f5       	brge	.+82     	; 0x25a4 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2552:	69 8d       	ldd	r22, Y+25	; 0x19
    2554:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2556:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2558:	9c 8d       	ldd	r25, Y+28	; 0x1c
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	40 e2       	ldi	r20, 0x20	; 32
    2560:	51 e4       	ldi	r21, 0x41	; 65
    2562:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	bc 01       	movw	r22, r24
    256c:	cd 01       	movw	r24, r26
    256e:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	9c 8b       	std	Y+20, r25	; 0x14
    2578:	8b 8b       	std	Y+19, r24	; 0x13
    257a:	0f c0       	rjmp	.+30     	; 0x259a <LCD_displayCharacter+0x7be>
    257c:	88 ec       	ldi	r24, 0xC8	; 200
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	9a 8b       	std	Y+18, r25	; 0x12
    2582:	89 8b       	std	Y+17, r24	; 0x11
    2584:	89 89       	ldd	r24, Y+17	; 0x11
    2586:	9a 89       	ldd	r25, Y+18	; 0x12
    2588:	01 97       	sbiw	r24, 0x01	; 1
    258a:	f1 f7       	brne	.-4      	; 0x2588 <LCD_displayCharacter+0x7ac>
    258c:	9a 8b       	std	Y+18, r25	; 0x12
    258e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2590:	8b 89       	ldd	r24, Y+19	; 0x13
    2592:	9c 89       	ldd	r25, Y+20	; 0x14
    2594:	01 97       	sbiw	r24, 0x01	; 1
    2596:	9c 8b       	std	Y+20, r25	; 0x14
    2598:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259a:	8b 89       	ldd	r24, Y+19	; 0x13
    259c:	9c 89       	ldd	r25, Y+20	; 0x14
    259e:	00 97       	sbiw	r24, 0x00	; 0
    25a0:	69 f7       	brne	.-38     	; 0x257c <LCD_displayCharacter+0x7a0>
    25a2:	14 c0       	rjmp	.+40     	; 0x25cc <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a4:	6d 89       	ldd	r22, Y+21	; 0x15
    25a6:	7e 89       	ldd	r23, Y+22	; 0x16
    25a8:	8f 89       	ldd	r24, Y+23	; 0x17
    25aa:	98 8d       	ldd	r25, Y+24	; 0x18
    25ac:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	9c 8b       	std	Y+20, r25	; 0x14
    25b6:	8b 8b       	std	Y+19, r24	; 0x13
    25b8:	8b 89       	ldd	r24, Y+19	; 0x13
    25ba:	9c 89       	ldd	r25, Y+20	; 0x14
    25bc:	98 8b       	std	Y+16, r25	; 0x10
    25be:	8f 87       	std	Y+15, r24	; 0x0f
    25c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    25c2:	98 89       	ldd	r25, Y+16	; 0x10
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	f1 f7       	brne	.-4      	; 0x25c4 <LCD_displayCharacter+0x7e8>
    25c8:	98 8b       	std	Y+16, r25	; 0x10
    25ca:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    25cc:	83 e0       	ldi	r24, 0x03	; 3
    25ce:	61 e0       	ldi	r22, 0x01	; 1
    25d0:	40 e0       	ldi	r20, 0x00	; 0
    25d2:	0e 94 0c 07 	call	0xe18	; 0xe18 <GPIO_writePin>
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	a0 e8       	ldi	r26, 0x80	; 128
    25dc:	bf e3       	ldi	r27, 0x3F	; 63
    25de:	8b 87       	std	Y+11, r24	; 0x0b
    25e0:	9c 87       	std	Y+12, r25	; 0x0c
    25e2:	ad 87       	std	Y+13, r26	; 0x0d
    25e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	4a ef       	ldi	r20, 0xFA	; 250
    25f4:	54 e4       	ldi	r21, 0x44	; 68
    25f6:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	8f 83       	std	Y+7, r24	; 0x07
    2600:	98 87       	std	Y+8, r25	; 0x08
    2602:	a9 87       	std	Y+9, r26	; 0x09
    2604:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2606:	6f 81       	ldd	r22, Y+7	; 0x07
    2608:	78 85       	ldd	r23, Y+8	; 0x08
    260a:	89 85       	ldd	r24, Y+9	; 0x09
    260c:	9a 85       	ldd	r25, Y+10	; 0x0a
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	40 e8       	ldi	r20, 0x80	; 128
    2614:	5f e3       	ldi	r21, 0x3F	; 63
    2616:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    261a:	88 23       	and	r24, r24
    261c:	2c f4       	brge	.+10     	; 0x2628 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	9e 83       	std	Y+6, r25	; 0x06
    2624:	8d 83       	std	Y+5, r24	; 0x05
    2626:	3f c0       	rjmp	.+126    	; 0x26a6 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2628:	6f 81       	ldd	r22, Y+7	; 0x07
    262a:	78 85       	ldd	r23, Y+8	; 0x08
    262c:	89 85       	ldd	r24, Y+9	; 0x09
    262e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	3f ef       	ldi	r19, 0xFF	; 255
    2634:	4f e7       	ldi	r20, 0x7F	; 127
    2636:	57 e4       	ldi	r21, 0x47	; 71
    2638:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    263c:	18 16       	cp	r1, r24
    263e:	4c f5       	brge	.+82     	; 0x2692 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2640:	6b 85       	ldd	r22, Y+11	; 0x0b
    2642:	7c 85       	ldd	r23, Y+12	; 0x0c
    2644:	8d 85       	ldd	r24, Y+13	; 0x0d
    2646:	9e 85       	ldd	r25, Y+14	; 0x0e
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	40 e2       	ldi	r20, 0x20	; 32
    264e:	51 e4       	ldi	r21, 0x41	; 65
    2650:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	bc 01       	movw	r22, r24
    265a:	cd 01       	movw	r24, r26
    265c:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	9e 83       	std	Y+6, r25	; 0x06
    2666:	8d 83       	std	Y+5, r24	; 0x05
    2668:	0f c0       	rjmp	.+30     	; 0x2688 <LCD_displayCharacter+0x8ac>
    266a:	88 ec       	ldi	r24, 0xC8	; 200
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	9c 83       	std	Y+4, r25	; 0x04
    2670:	8b 83       	std	Y+3, r24	; 0x03
    2672:	8b 81       	ldd	r24, Y+3	; 0x03
    2674:	9c 81       	ldd	r25, Y+4	; 0x04
    2676:	01 97       	sbiw	r24, 0x01	; 1
    2678:	f1 f7       	brne	.-4      	; 0x2676 <LCD_displayCharacter+0x89a>
    267a:	9c 83       	std	Y+4, r25	; 0x04
    267c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267e:	8d 81       	ldd	r24, Y+5	; 0x05
    2680:	9e 81       	ldd	r25, Y+6	; 0x06
    2682:	01 97       	sbiw	r24, 0x01	; 1
    2684:	9e 83       	std	Y+6, r25	; 0x06
    2686:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2688:	8d 81       	ldd	r24, Y+5	; 0x05
    268a:	9e 81       	ldd	r25, Y+6	; 0x06
    268c:	00 97       	sbiw	r24, 0x00	; 0
    268e:	69 f7       	brne	.-38     	; 0x266a <LCD_displayCharacter+0x88e>
    2690:	14 c0       	rjmp	.+40     	; 0x26ba <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2692:	6f 81       	ldd	r22, Y+7	; 0x07
    2694:	78 85       	ldd	r23, Y+8	; 0x08
    2696:	89 85       	ldd	r24, Y+9	; 0x09
    2698:	9a 85       	ldd	r25, Y+10	; 0x0a
    269a:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	9e 83       	std	Y+6, r25	; 0x06
    26a4:	8d 83       	std	Y+5, r24	; 0x05
    26a6:	8d 81       	ldd	r24, Y+5	; 0x05
    26a8:	9e 81       	ldd	r25, Y+6	; 0x06
    26aa:	9a 83       	std	Y+2, r25	; 0x02
    26ac:	89 83       	std	Y+1, r24	; 0x01
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	9a 81       	ldd	r25, Y+2	; 0x02
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	f1 f7       	brne	.-4      	; 0x26b2 <LCD_displayCharacter+0x8d6>
    26b6:	9a 83       	std	Y+2, r25	; 0x02
    26b8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#endif
}
    26ba:	cd 59       	subi	r28, 0x9D	; 157
    26bc:	df 4f       	sbci	r29, 0xFF	; 255
    26be:	0f b6       	in	r0, 0x3f	; 63
    26c0:	f8 94       	cli
    26c2:	de bf       	out	0x3e, r29	; 62
    26c4:	0f be       	out	0x3f, r0	; 63
    26c6:	cd bf       	out	0x3d, r28	; 61
    26c8:	cf 91       	pop	r28
    26ca:	df 91       	pop	r29
    26cc:	1f 91       	pop	r17
    26ce:	0f 91       	pop	r16
    26d0:	08 95       	ret

000026d2 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    26d2:	df 93       	push	r29
    26d4:	cf 93       	push	r28
    26d6:	00 d0       	rcall	.+0      	; 0x26d8 <LCD_displayString+0x6>
    26d8:	0f 92       	push	r0
    26da:	cd b7       	in	r28, 0x3d	; 61
    26dc:	de b7       	in	r29, 0x3e	; 62
    26de:	9b 83       	std	Y+3, r25	; 0x03
    26e0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    26e2:	19 82       	std	Y+1, r1	; 0x01
    26e4:	0e c0       	rjmp	.+28     	; 0x2702 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    26e6:	89 81       	ldd	r24, Y+1	; 0x01
    26e8:	28 2f       	mov	r18, r24
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	8a 81       	ldd	r24, Y+2	; 0x02
    26ee:	9b 81       	ldd	r25, Y+3	; 0x03
    26f0:	fc 01       	movw	r30, r24
    26f2:	e2 0f       	add	r30, r18
    26f4:	f3 1f       	adc	r31, r19
    26f6:	80 81       	ld	r24, Z
    26f8:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <LCD_displayCharacter>
		i++;
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
    26fe:	8f 5f       	subi	r24, 0xFF	; 255
    2700:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2702:	89 81       	ldd	r24, Y+1	; 0x01
    2704:	28 2f       	mov	r18, r24
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	8a 81       	ldd	r24, Y+2	; 0x02
    270a:	9b 81       	ldd	r25, Y+3	; 0x03
    270c:	fc 01       	movw	r30, r24
    270e:	e2 0f       	add	r30, r18
    2710:	f3 1f       	adc	r31, r19
    2712:	80 81       	ld	r24, Z
    2714:	88 23       	and	r24, r24
    2716:	39 f7       	brne	.-50     	; 0x26e6 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}

}
    2718:	0f 90       	pop	r0
    271a:	0f 90       	pop	r0
    271c:	0f 90       	pop	r0
    271e:	cf 91       	pop	r28
    2720:	df 91       	pop	r29
    2722:	08 95       	ret

00002724 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2724:	df 93       	push	r29
    2726:	cf 93       	push	r28
    2728:	00 d0       	rcall	.+0      	; 0x272a <LCD_moveCursor+0x6>
    272a:	00 d0       	rcall	.+0      	; 0x272c <LCD_moveCursor+0x8>
    272c:	0f 92       	push	r0
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
    2732:	8a 83       	std	Y+2, r24	; 0x02
    2734:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2736:	8a 81       	ldd	r24, Y+2	; 0x02
    2738:	28 2f       	mov	r18, r24
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	3d 83       	std	Y+5, r19	; 0x05
    273e:	2c 83       	std	Y+4, r18	; 0x04
    2740:	8c 81       	ldd	r24, Y+4	; 0x04
    2742:	9d 81       	ldd	r25, Y+5	; 0x05
    2744:	81 30       	cpi	r24, 0x01	; 1
    2746:	91 05       	cpc	r25, r1
    2748:	c1 f0       	breq	.+48     	; 0x277a <LCD_moveCursor+0x56>
    274a:	2c 81       	ldd	r18, Y+4	; 0x04
    274c:	3d 81       	ldd	r19, Y+5	; 0x05
    274e:	22 30       	cpi	r18, 0x02	; 2
    2750:	31 05       	cpc	r19, r1
    2752:	2c f4       	brge	.+10     	; 0x275e <LCD_moveCursor+0x3a>
    2754:	8c 81       	ldd	r24, Y+4	; 0x04
    2756:	9d 81       	ldd	r25, Y+5	; 0x05
    2758:	00 97       	sbiw	r24, 0x00	; 0
    275a:	61 f0       	breq	.+24     	; 0x2774 <LCD_moveCursor+0x50>
    275c:	19 c0       	rjmp	.+50     	; 0x2790 <LCD_moveCursor+0x6c>
    275e:	2c 81       	ldd	r18, Y+4	; 0x04
    2760:	3d 81       	ldd	r19, Y+5	; 0x05
    2762:	22 30       	cpi	r18, 0x02	; 2
    2764:	31 05       	cpc	r19, r1
    2766:	69 f0       	breq	.+26     	; 0x2782 <LCD_moveCursor+0x5e>
    2768:	8c 81       	ldd	r24, Y+4	; 0x04
    276a:	9d 81       	ldd	r25, Y+5	; 0x05
    276c:	83 30       	cpi	r24, 0x03	; 3
    276e:	91 05       	cpc	r25, r1
    2770:	61 f0       	breq	.+24     	; 0x278a <LCD_moveCursor+0x66>
    2772:	0e c0       	rjmp	.+28     	; 0x2790 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2774:	8b 81       	ldd	r24, Y+3	; 0x03
    2776:	89 83       	std	Y+1, r24	; 0x01
    2778:	0b c0       	rjmp	.+22     	; 0x2790 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    277a:	8b 81       	ldd	r24, Y+3	; 0x03
    277c:	80 5c       	subi	r24, 0xC0	; 192
    277e:	89 83       	std	Y+1, r24	; 0x01
    2780:	07 c0       	rjmp	.+14     	; 0x2790 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2782:	8b 81       	ldd	r24, Y+3	; 0x03
    2784:	80 5f       	subi	r24, 0xF0	; 240
    2786:	89 83       	std	Y+1, r24	; 0x01
    2788:	03 c0       	rjmp	.+6      	; 0x2790 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    278a:	8b 81       	ldd	r24, Y+3	; 0x03
    278c:	80 5b       	subi	r24, 0xB0	; 176
    278e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	80 68       	ori	r24, 0x80	; 128
    2794:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_sendCommand>
}
    2798:	0f 90       	pop	r0
    279a:	0f 90       	pop	r0
    279c:	0f 90       	pop	r0
    279e:	0f 90       	pop	r0
    27a0:	0f 90       	pop	r0
    27a2:	cf 91       	pop	r28
    27a4:	df 91       	pop	r29
    27a6:	08 95       	ret

000027a8 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    27a8:	df 93       	push	r29
    27aa:	cf 93       	push	r28
    27ac:	00 d0       	rcall	.+0      	; 0x27ae <LCD_displayStringRowColumn+0x6>
    27ae:	00 d0       	rcall	.+0      	; 0x27b0 <LCD_displayStringRowColumn+0x8>
    27b0:	cd b7       	in	r28, 0x3d	; 61
    27b2:	de b7       	in	r29, 0x3e	; 62
    27b4:	89 83       	std	Y+1, r24	; 0x01
    27b6:	6a 83       	std	Y+2, r22	; 0x02
    27b8:	5c 83       	std	Y+4, r21	; 0x04
    27ba:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    27bc:	89 81       	ldd	r24, Y+1	; 0x01
    27be:	6a 81       	ldd	r22, Y+2	; 0x02
    27c0:	0e 94 92 13 	call	0x2724	; 0x2724 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    27c4:	8b 81       	ldd	r24, Y+3	; 0x03
    27c6:	9c 81       	ldd	r25, Y+4	; 0x04
    27c8:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LCD_displayString>
}
    27cc:	0f 90       	pop	r0
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	0f 90       	pop	r0
    27d4:	cf 91       	pop	r28
    27d6:	df 91       	pop	r29
    27d8:	08 95       	ret

000027da <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(sint32 data)
{
    27da:	df 93       	push	r29
    27dc:	cf 93       	push	r28
    27de:	cd b7       	in	r28, 0x3d	; 61
    27e0:	de b7       	in	r29, 0x3e	; 62
    27e2:	64 97       	sbiw	r28, 0x14	; 20
    27e4:	0f b6       	in	r0, 0x3f	; 63
    27e6:	f8 94       	cli
    27e8:	de bf       	out	0x3e, r29	; 62
    27ea:	0f be       	out	0x3f, r0	; 63
    27ec:	cd bf       	out	0x3d, r28	; 61
    27ee:	69 8b       	std	Y+17, r22	; 0x11
    27f0:	7a 8b       	std	Y+18, r23	; 0x12
    27f2:	8b 8b       	std	Y+19, r24	; 0x13
    27f4:	9c 8b       	std	Y+20, r25	; 0x14
   char buff[16]; /* String to hold the ascii result */
   ltoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    27f6:	89 89       	ldd	r24, Y+17	; 0x11
    27f8:	9a 89       	ldd	r25, Y+18	; 0x12
    27fa:	ab 89       	ldd	r26, Y+19	; 0x13
    27fc:	bc 89       	ldd	r27, Y+20	; 0x14
    27fe:	bc 01       	movw	r22, r24
    2800:	cd 01       	movw	r24, r26
    2802:	9e 01       	movw	r18, r28
    2804:	2f 5f       	subi	r18, 0xFF	; 255
    2806:	3f 4f       	sbci	r19, 0xFF	; 255
    2808:	a9 01       	movw	r20, r18
    280a:	2a e0       	ldi	r18, 0x0A	; 10
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	0e 94 f7 15 	call	0x2bee	; 0x2bee <ltoa>
   LCD_displayString(buff); /* Display the string */
    2812:	ce 01       	movw	r24, r28
    2814:	01 96       	adiw	r24, 0x01	; 1
    2816:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LCD_displayString>
}
    281a:	64 96       	adiw	r28, 0x14	; 20
    281c:	0f b6       	in	r0, 0x3f	; 63
    281e:	f8 94       	cli
    2820:	de bf       	out	0x3e, r29	; 62
    2822:	0f be       	out	0x3f, r0	; 63
    2824:	cd bf       	out	0x3d, r28	; 61
    2826:	cf 91       	pop	r28
    2828:	df 91       	pop	r29
    282a:	08 95       	ret

0000282c <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    282c:	df 93       	push	r29
    282e:	cf 93       	push	r28
    2830:	cd b7       	in	r28, 0x3d	; 61
    2832:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_sendCommand>
}
    283a:	cf 91       	pop	r28
    283c:	df 91       	pop	r29
    283e:	08 95       	ret

00002840 <main>:
#include"ultrasonic.h"
#include"lcd.h"
#include <avr/io.h>

int main(void){
    2840:	df 93       	push	r29
    2842:	cf 93       	push	r28
    2844:	00 d0       	rcall	.+0      	; 0x2846 <main+0x6>
    2846:	cd b7       	in	r28, 0x3d	; 61
    2848:	de b7       	in	r29, 0x3e	; 62

	SREG |= (1<<7);
    284a:	af e5       	ldi	r26, 0x5F	; 95
    284c:	b0 e0       	ldi	r27, 0x00	; 0
    284e:	ef e5       	ldi	r30, 0x5F	; 95
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	80 81       	ld	r24, Z
    2854:	80 68       	ori	r24, 0x80	; 128
    2856:	8c 93       	st	X, r24
	Ultrasonic_init();
    2858:	0e 94 52 14 	call	0x28a4	; 0x28a4 <Ultrasonic_init>
	LCD_init();
    285c:	0e 94 c1 09 	call	0x1382	; 0x1382 <LCD_init>
	LCD_displayString("Distance: ");
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	91 e0       	ldi	r25, 0x01	; 1
    2864:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LCD_displayString>
	uint16 distance = 0;
    2868:	1a 82       	std	Y+2, r1	; 0x02
    286a:	19 82       	std	Y+1, r1	; 0x01

	while(1){

		distance = Ultrasonic_readDistance();
    286c:	0e 94 48 15 	call	0x2a90	; 0x2a90 <Ultrasonic_readDistance>
    2870:	9a 83       	std	Y+2, r25	; 0x02
    2872:	89 83       	std	Y+1, r24	; 0x01

		LCD_moveCursor(0,9);
    2874:	80 e0       	ldi	r24, 0x00	; 0
    2876:	69 e0       	ldi	r22, 0x09	; 9
    2878:	0e 94 92 13 	call	0x2724	; 0x2724 <LCD_moveCursor>
		LCD_intgerToString(distance);
    287c:	89 81       	ldd	r24, Y+1	; 0x01
    287e:	9a 81       	ldd	r25, Y+2	; 0x02
    2880:	cc 01       	movw	r24, r24
    2882:	a0 e0       	ldi	r26, 0x00	; 0
    2884:	b0 e0       	ldi	r27, 0x00	; 0
    2886:	bc 01       	movw	r22, r24
    2888:	cd 01       	movw	r24, r26
    288a:	0e 94 ed 13 	call	0x27da	; 0x27da <LCD_intgerToString>
		LCD_displayCharacter(' ');
    288e:	80 e2       	ldi	r24, 0x20	; 32
    2890:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <LCD_displayCharacter>
		LCD_displayString("cm");
    2894:	8b e0       	ldi	r24, 0x0B	; 11
    2896:	91 e0       	ldi	r25, 0x01	; 1
    2898:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LCD_displayString>
		LCD_displayCharacter(' ');
    289c:	80 e2       	ldi	r24, 0x20	; 32
    289e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <LCD_displayCharacter>
    28a2:	e4 cf       	rjmp	.-56     	; 0x286c <main+0x2c>

000028a4 <Ultrasonic_init>:
uint32 g_timeHigh = 0;
uint16 Distance = 0;


void Ultrasonic_init(void)
{
    28a4:	df 93       	push	r29
    28a6:	cf 93       	push	r28
    28a8:	00 d0       	rcall	.+0      	; 0x28aa <Ultrasonic_init+0x6>
    28aa:	cd b7       	in	r28, 0x3d	; 61
    28ac:	de b7       	in	r29, 0x3e	; 62
	ICU_ConfigType Userconfig = {F_CPU_8,RISING};
    28ae:	82 e0       	ldi	r24, 0x02	; 2
    28b0:	89 83       	std	Y+1, r24	; 0x01
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	8a 83       	std	Y+2, r24	; 0x02
	ICU_setCallBack(Ultrasonic_edgeProcessing);
    28b6:	82 e7       	ldi	r24, 0x72	; 114
    28b8:	95 e1       	ldi	r25, 0x15	; 21
    28ba:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <ICU_setCallBack>
	ICU_init(&Userconfig);
    28be:	ce 01       	movw	r24, r28
    28c0:	01 96       	adiw	r24, 0x01	; 1
    28c2:	0e 94 11 09 	call	0x1222	; 0x1222 <ICU_init>
	GPIO_setupPinDirection(ULTRASONIC_TRIGGER_PORT_ID,ULTRASONIC_TRIGGER_PIN_ID,PIN_OUTPUT);
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	65 e0       	ldi	r22, 0x05	; 5
    28ca:	41 e0       	ldi	r20, 0x01	; 1
    28cc:	0e 94 59 06 	call	0xcb2	; 0xcb2 <GPIO_setupPinDirection>



}
    28d0:	0f 90       	pop	r0
    28d2:	0f 90       	pop	r0
    28d4:	cf 91       	pop	r28
    28d6:	df 91       	pop	r29
    28d8:	08 95       	ret

000028da <Ultrasonic_Trigger>:

void Ultrasonic_Trigger(void)
{
    28da:	df 93       	push	r29
    28dc:	cf 93       	push	r28
    28de:	cd b7       	in	r28, 0x3d	; 61
    28e0:	de b7       	in	r29, 0x3e	; 62
    28e2:	68 97       	sbiw	r28, 0x18	; 24
    28e4:	0f b6       	in	r0, 0x3f	; 63
    28e6:	f8 94       	cli
    28e8:	de bf       	out	0x3e, r29	; 62
    28ea:	0f be       	out	0x3f, r0	; 63
    28ec:	cd bf       	out	0x3d, r28	; 61
	GPIO_writePin(ULTRASONIC_TRIGGER_PORT_ID,ULTRASONIC_TRIGGER_PIN_ID,LOGIC_HIGH);
    28ee:	81 e0       	ldi	r24, 0x01	; 1
    28f0:	65 e0       	ldi	r22, 0x05	; 5
    28f2:	41 e0       	ldi	r20, 0x01	; 1
    28f4:	0e 94 0c 07 	call	0xe18	; 0xe18 <GPIO_writePin>
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	a0 e2       	ldi	r26, 0x20	; 32
    28fe:	b1 e4       	ldi	r27, 0x41	; 65
    2900:	8d 8b       	std	Y+21, r24	; 0x15
    2902:	9e 8b       	std	Y+22, r25	; 0x16
    2904:	af 8b       	std	Y+23, r26	; 0x17
    2906:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2908:	6d 89       	ldd	r22, Y+21	; 0x15
    290a:	7e 89       	ldd	r23, Y+22	; 0x16
    290c:	8f 89       	ldd	r24, Y+23	; 0x17
    290e:	98 8d       	ldd	r25, Y+24	; 0x18
    2910:	2b ea       	ldi	r18, 0xAB	; 171
    2912:	3a ea       	ldi	r19, 0xAA	; 170
    2914:	4a e2       	ldi	r20, 0x2A	; 42
    2916:	50 e4       	ldi	r21, 0x40	; 64
    2918:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	89 8b       	std	Y+17, r24	; 0x11
    2922:	9a 8b       	std	Y+18, r25	; 0x12
    2924:	ab 8b       	std	Y+19, r26	; 0x13
    2926:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2928:	69 89       	ldd	r22, Y+17	; 0x11
    292a:	7a 89       	ldd	r23, Y+18	; 0x12
    292c:	8b 89       	ldd	r24, Y+19	; 0x13
    292e:	9c 89       	ldd	r25, Y+20	; 0x14
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	40 e8       	ldi	r20, 0x80	; 128
    2936:	5f e3       	ldi	r21, 0x3F	; 63
    2938:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    293c:	88 23       	and	r24, r24
    293e:	1c f4       	brge	.+6      	; 0x2946 <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	88 8b       	std	Y+16, r24	; 0x10
    2944:	91 c0       	rjmp	.+290    	; 0x2a68 <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    2946:	69 89       	ldd	r22, Y+17	; 0x11
    2948:	7a 89       	ldd	r23, Y+18	; 0x12
    294a:	8b 89       	ldd	r24, Y+19	; 0x13
    294c:	9c 89       	ldd	r25, Y+20	; 0x14
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	4f e7       	ldi	r20, 0x7F	; 127
    2954:	53 e4       	ldi	r21, 0x43	; 67
    2956:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    295a:	18 16       	cp	r1, r24
    295c:	0c f0       	brlt	.+2      	; 0x2960 <Ultrasonic_Trigger+0x86>
    295e:	7b c0       	rjmp	.+246    	; 0x2a56 <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    2960:	6d 89       	ldd	r22, Y+21	; 0x15
    2962:	7e 89       	ldd	r23, Y+22	; 0x16
    2964:	8f 89       	ldd	r24, Y+23	; 0x17
    2966:	98 8d       	ldd	r25, Y+24	; 0x18
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	4a e7       	ldi	r20, 0x7A	; 122
    296e:	54 e4       	ldi	r21, 0x44	; 68
    2970:	0e 94 23 03 	call	0x646	; 0x646 <__divsf3>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	8c 87       	std	Y+12, r24	; 0x0c
    297a:	9d 87       	std	Y+13, r25	; 0x0d
    297c:	ae 87       	std	Y+14, r26	; 0x0e
    297e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2980:	6c 85       	ldd	r22, Y+12	; 0x0c
    2982:	7d 85       	ldd	r23, Y+13	; 0x0d
    2984:	8e 85       	ldd	r24, Y+14	; 0x0e
    2986:	9f 85       	ldd	r25, Y+15	; 0x0f
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	4a ef       	ldi	r20, 0xFA	; 250
    298e:	54 e4       	ldi	r21, 0x44	; 68
    2990:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	88 87       	std	Y+8, r24	; 0x08
    299a:	99 87       	std	Y+9, r25	; 0x09
    299c:	aa 87       	std	Y+10, r26	; 0x0a
    299e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    29a0:	68 85       	ldd	r22, Y+8	; 0x08
    29a2:	79 85       	ldd	r23, Y+9	; 0x09
    29a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    29a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	40 e8       	ldi	r20, 0x80	; 128
    29ae:	5f e3       	ldi	r21, 0x3F	; 63
    29b0:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    29b4:	88 23       	and	r24, r24
    29b6:	2c f4       	brge	.+10     	; 0x29c2 <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	9f 83       	std	Y+7, r25	; 0x07
    29be:	8e 83       	std	Y+6, r24	; 0x06
    29c0:	3f c0       	rjmp	.+126    	; 0x2a40 <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    29c2:	68 85       	ldd	r22, Y+8	; 0x08
    29c4:	79 85       	ldd	r23, Y+9	; 0x09
    29c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    29c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	3f ef       	ldi	r19, 0xFF	; 255
    29ce:	4f e7       	ldi	r20, 0x7F	; 127
    29d0:	57 e4       	ldi	r21, 0x47	; 71
    29d2:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    29d6:	18 16       	cp	r1, r24
    29d8:	4c f5       	brge	.+82     	; 0x2a2c <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29da:	6c 85       	ldd	r22, Y+12	; 0x0c
    29dc:	7d 85       	ldd	r23, Y+13	; 0x0d
    29de:	8e 85       	ldd	r24, Y+14	; 0x0e
    29e0:	9f 85       	ldd	r25, Y+15	; 0x0f
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	40 e2       	ldi	r20, 0x20	; 32
    29e8:	51 e4       	ldi	r21, 0x41	; 65
    29ea:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	bc 01       	movw	r22, r24
    29f4:	cd 01       	movw	r24, r26
    29f6:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	9f 83       	std	Y+7, r25	; 0x07
    2a00:	8e 83       	std	Y+6, r24	; 0x06
    2a02:	0f c0       	rjmp	.+30     	; 0x2a22 <Ultrasonic_Trigger+0x148>
    2a04:	88 ec       	ldi	r24, 0xC8	; 200
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	9d 83       	std	Y+5, r25	; 0x05
    2a0a:	8c 83       	std	Y+4, r24	; 0x04
    2a0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a0e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	f1 f7       	brne	.-4      	; 0x2a10 <Ultrasonic_Trigger+0x136>
    2a14:	9d 83       	std	Y+5, r25	; 0x05
    2a16:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a18:	8e 81       	ldd	r24, Y+6	; 0x06
    2a1a:	9f 81       	ldd	r25, Y+7	; 0x07
    2a1c:	01 97       	sbiw	r24, 0x01	; 1
    2a1e:	9f 83       	std	Y+7, r25	; 0x07
    2a20:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a22:	8e 81       	ldd	r24, Y+6	; 0x06
    2a24:	9f 81       	ldd	r25, Y+7	; 0x07
    2a26:	00 97       	sbiw	r24, 0x00	; 0
    2a28:	69 f7       	brne	.-38     	; 0x2a04 <Ultrasonic_Trigger+0x12a>
    2a2a:	24 c0       	rjmp	.+72     	; 0x2a74 <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a2c:	68 85       	ldd	r22, Y+8	; 0x08
    2a2e:	79 85       	ldd	r23, Y+9	; 0x09
    2a30:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a32:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a34:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	9f 83       	std	Y+7, r25	; 0x07
    2a3e:	8e 83       	std	Y+6, r24	; 0x06
    2a40:	8e 81       	ldd	r24, Y+6	; 0x06
    2a42:	9f 81       	ldd	r25, Y+7	; 0x07
    2a44:	9b 83       	std	Y+3, r25	; 0x03
    2a46:	8a 83       	std	Y+2, r24	; 0x02
    2a48:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a4c:	01 97       	sbiw	r24, 0x01	; 1
    2a4e:	f1 f7       	brne	.-4      	; 0x2a4c <Ultrasonic_Trigger+0x172>
    2a50:	9b 83       	std	Y+3, r25	; 0x03
    2a52:	8a 83       	std	Y+2, r24	; 0x02
    2a54:	0f c0       	rjmp	.+30     	; 0x2a74 <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a56:	69 89       	ldd	r22, Y+17	; 0x11
    2a58:	7a 89       	ldd	r23, Y+18	; 0x12
    2a5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a5c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a5e:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	88 8b       	std	Y+16, r24	; 0x10
    2a68:	88 89       	ldd	r24, Y+16	; 0x10
    2a6a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a6c:	89 81       	ldd	r24, Y+1	; 0x01
    2a6e:	8a 95       	dec	r24
    2a70:	f1 f7       	brne	.-4      	; 0x2a6e <Ultrasonic_Trigger+0x194>
    2a72:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	GPIO_writePin(ULTRASONIC_TRIGGER_PORT_ID,ULTRASONIC_TRIGGER_PIN_ID,LOGIC_LOW);
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	65 e0       	ldi	r22, 0x05	; 5
    2a78:	40 e0       	ldi	r20, 0x00	; 0
    2a7a:	0e 94 0c 07 	call	0xe18	; 0xe18 <GPIO_writePin>


}
    2a7e:	68 96       	adiw	r28, 0x18	; 24
    2a80:	0f b6       	in	r0, 0x3f	; 63
    2a82:	f8 94       	cli
    2a84:	de bf       	out	0x3e, r29	; 62
    2a86:	0f be       	out	0x3f, r0	; 63
    2a88:	cd bf       	out	0x3d, r28	; 61
    2a8a:	cf 91       	pop	r28
    2a8c:	df 91       	pop	r29
    2a8e:	08 95       	ret

00002a90 <Ultrasonic_readDistance>:

uint16 Ultrasonic_readDistance(void)
{
    2a90:	df 93       	push	r29
    2a92:	cf 93       	push	r28
    2a94:	cd b7       	in	r28, 0x3d	; 61
    2a96:	de b7       	in	r29, 0x3e	; 62
	Ultrasonic_Trigger();
    2a98:	0e 94 6d 14 	call	0x28da	; 0x28da <Ultrasonic_Trigger>

	if(g_edgeCount == 2){
    2a9c:	80 91 18 01 	lds	r24, 0x0118
    2aa0:	82 30       	cpi	r24, 0x02	; 2
    2aa2:	c9 f4       	brne	.+50     	; 0x2ad6 <Ultrasonic_readDistance+0x46>

		Distance = (g_timeHigh/58) + 1 ;
    2aa4:	80 91 19 01 	lds	r24, 0x0119
    2aa8:	90 91 1a 01 	lds	r25, 0x011A
    2aac:	a0 91 1b 01 	lds	r26, 0x011B
    2ab0:	b0 91 1c 01 	lds	r27, 0x011C
    2ab4:	2a e3       	ldi	r18, 0x3A	; 58
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	40 e0       	ldi	r20, 0x00	; 0
    2aba:	50 e0       	ldi	r21, 0x00	; 0
    2abc:	bc 01       	movw	r22, r24
    2abe:	cd 01       	movw	r24, r26
    2ac0:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <__udivmodsi4>
    2ac4:	da 01       	movw	r26, r20
    2ac6:	c9 01       	movw	r24, r18
    2ac8:	01 96       	adiw	r24, 0x01	; 1
    2aca:	90 93 1e 01 	sts	0x011E, r25
    2ace:	80 93 1d 01 	sts	0x011D, r24
		g_edgeCount = 0;
    2ad2:	10 92 18 01 	sts	0x0118, r1
	}


	return Distance;
    2ad6:	80 91 1d 01 	lds	r24, 0x011D
    2ada:	90 91 1e 01 	lds	r25, 0x011E
}
    2ade:	cf 91       	pop	r28
    2ae0:	df 91       	pop	r29
    2ae2:	08 95       	ret

00002ae4 <Ultrasonic_edgeProcessing>:


void Ultrasonic_edgeProcessing(void)
{
    2ae4:	df 93       	push	r29
    2ae6:	cf 93       	push	r28
    2ae8:	cd b7       	in	r28, 0x3d	; 61
    2aea:	de b7       	in	r29, 0x3e	; 62
	g_edgeCount++;
    2aec:	80 91 18 01 	lds	r24, 0x0118
    2af0:	8f 5f       	subi	r24, 0xFF	; 255
    2af2:	80 93 18 01 	sts	0x0118, r24
	if(g_edgeCount == 1)
    2af6:	80 91 18 01 	lds	r24, 0x0118
    2afa:	81 30       	cpi	r24, 0x01	; 1
    2afc:	31 f4       	brne	.+12     	; 0x2b0a <Ultrasonic_edgeProcessing+0x26>
	{
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		ICU_clearTimerValue();
    2afe:	0e 94 96 09 	call	0x132c	; 0x132c <ICU_clearTimerValue>
		/* Detect falling edge */
		ICU_setEdgeDetectionType(FALLING);
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <ICU_setEdgeDetectionType>
    2b08:	16 c0       	rjmp	.+44     	; 0x2b36 <Ultrasonic_edgeProcessing+0x52>
	}
	else if(g_edgeCount == 2)
    2b0a:	80 91 18 01 	lds	r24, 0x0118
    2b0e:	82 30       	cpi	r24, 0x02	; 2
    2b10:	91 f4       	brne	.+36     	; 0x2b36 <Ultrasonic_edgeProcessing+0x52>
	{
		/* Store the High time value */
		g_timeHigh = ICU_getInputCaptureValue();
    2b12:	0e 94 8b 09 	call	0x1316	; 0x1316 <ICU_getInputCaptureValue>
    2b16:	cc 01       	movw	r24, r24
    2b18:	a0 e0       	ldi	r26, 0x00	; 0
    2b1a:	b0 e0       	ldi	r27, 0x00	; 0
    2b1c:	80 93 19 01 	sts	0x0119, r24
    2b20:	90 93 1a 01 	sts	0x011A, r25
    2b24:	a0 93 1b 01 	sts	0x011B, r26
    2b28:	b0 93 1c 01 	sts	0x011C, r27
		/* Clear the timer counter register to start measurements again */
		ICU_clearTimerValue();
    2b2c:	0e 94 96 09 	call	0x132c	; 0x132c <ICU_clearTimerValue>
		/* Detect rising edge */
		ICU_setEdgeDetectionType(RISING);
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <ICU_setEdgeDetectionType>
	}


}
    2b36:	cf 91       	pop	r28
    2b38:	df 91       	pop	r29
    2b3a:	08 95       	ret

00002b3c <__udivmodsi4>:
    2b3c:	a1 e2       	ldi	r26, 0x21	; 33
    2b3e:	1a 2e       	mov	r1, r26
    2b40:	aa 1b       	sub	r26, r26
    2b42:	bb 1b       	sub	r27, r27
    2b44:	fd 01       	movw	r30, r26
    2b46:	0d c0       	rjmp	.+26     	; 0x2b62 <__udivmodsi4_ep>

00002b48 <__udivmodsi4_loop>:
    2b48:	aa 1f       	adc	r26, r26
    2b4a:	bb 1f       	adc	r27, r27
    2b4c:	ee 1f       	adc	r30, r30
    2b4e:	ff 1f       	adc	r31, r31
    2b50:	a2 17       	cp	r26, r18
    2b52:	b3 07       	cpc	r27, r19
    2b54:	e4 07       	cpc	r30, r20
    2b56:	f5 07       	cpc	r31, r21
    2b58:	20 f0       	brcs	.+8      	; 0x2b62 <__udivmodsi4_ep>
    2b5a:	a2 1b       	sub	r26, r18
    2b5c:	b3 0b       	sbc	r27, r19
    2b5e:	e4 0b       	sbc	r30, r20
    2b60:	f5 0b       	sbc	r31, r21

00002b62 <__udivmodsi4_ep>:
    2b62:	66 1f       	adc	r22, r22
    2b64:	77 1f       	adc	r23, r23
    2b66:	88 1f       	adc	r24, r24
    2b68:	99 1f       	adc	r25, r25
    2b6a:	1a 94       	dec	r1
    2b6c:	69 f7       	brne	.-38     	; 0x2b48 <__udivmodsi4_loop>
    2b6e:	60 95       	com	r22
    2b70:	70 95       	com	r23
    2b72:	80 95       	com	r24
    2b74:	90 95       	com	r25
    2b76:	9b 01       	movw	r18, r22
    2b78:	ac 01       	movw	r20, r24
    2b7a:	bd 01       	movw	r22, r26
    2b7c:	cf 01       	movw	r24, r30
    2b7e:	08 95       	ret

00002b80 <__prologue_saves__>:
    2b80:	2f 92       	push	r2
    2b82:	3f 92       	push	r3
    2b84:	4f 92       	push	r4
    2b86:	5f 92       	push	r5
    2b88:	6f 92       	push	r6
    2b8a:	7f 92       	push	r7
    2b8c:	8f 92       	push	r8
    2b8e:	9f 92       	push	r9
    2b90:	af 92       	push	r10
    2b92:	bf 92       	push	r11
    2b94:	cf 92       	push	r12
    2b96:	df 92       	push	r13
    2b98:	ef 92       	push	r14
    2b9a:	ff 92       	push	r15
    2b9c:	0f 93       	push	r16
    2b9e:	1f 93       	push	r17
    2ba0:	cf 93       	push	r28
    2ba2:	df 93       	push	r29
    2ba4:	cd b7       	in	r28, 0x3d	; 61
    2ba6:	de b7       	in	r29, 0x3e	; 62
    2ba8:	ca 1b       	sub	r28, r26
    2baa:	db 0b       	sbc	r29, r27
    2bac:	0f b6       	in	r0, 0x3f	; 63
    2bae:	f8 94       	cli
    2bb0:	de bf       	out	0x3e, r29	; 62
    2bb2:	0f be       	out	0x3f, r0	; 63
    2bb4:	cd bf       	out	0x3d, r28	; 61
    2bb6:	09 94       	ijmp

00002bb8 <__epilogue_restores__>:
    2bb8:	2a 88       	ldd	r2, Y+18	; 0x12
    2bba:	39 88       	ldd	r3, Y+17	; 0x11
    2bbc:	48 88       	ldd	r4, Y+16	; 0x10
    2bbe:	5f 84       	ldd	r5, Y+15	; 0x0f
    2bc0:	6e 84       	ldd	r6, Y+14	; 0x0e
    2bc2:	7d 84       	ldd	r7, Y+13	; 0x0d
    2bc4:	8c 84       	ldd	r8, Y+12	; 0x0c
    2bc6:	9b 84       	ldd	r9, Y+11	; 0x0b
    2bc8:	aa 84       	ldd	r10, Y+10	; 0x0a
    2bca:	b9 84       	ldd	r11, Y+9	; 0x09
    2bcc:	c8 84       	ldd	r12, Y+8	; 0x08
    2bce:	df 80       	ldd	r13, Y+7	; 0x07
    2bd0:	ee 80       	ldd	r14, Y+6	; 0x06
    2bd2:	fd 80       	ldd	r15, Y+5	; 0x05
    2bd4:	0c 81       	ldd	r16, Y+4	; 0x04
    2bd6:	1b 81       	ldd	r17, Y+3	; 0x03
    2bd8:	aa 81       	ldd	r26, Y+2	; 0x02
    2bda:	b9 81       	ldd	r27, Y+1	; 0x01
    2bdc:	ce 0f       	add	r28, r30
    2bde:	d1 1d       	adc	r29, r1
    2be0:	0f b6       	in	r0, 0x3f	; 63
    2be2:	f8 94       	cli
    2be4:	de bf       	out	0x3e, r29	; 62
    2be6:	0f be       	out	0x3f, r0	; 63
    2be8:	cd bf       	out	0x3d, r28	; 61
    2bea:	ed 01       	movw	r28, r26
    2bec:	08 95       	ret

00002bee <ltoa>:
    2bee:	fa 01       	movw	r30, r20
    2bf0:	cf 93       	push	r28
    2bf2:	ff 93       	push	r31
    2bf4:	ef 93       	push	r30
    2bf6:	22 30       	cpi	r18, 0x02	; 2
    2bf8:	44 f1       	brlt	.+80     	; 0x2c4a <ltoa+0x5c>
    2bfa:	25 32       	cpi	r18, 0x25	; 37
    2bfc:	34 f5       	brge	.+76     	; 0x2c4a <ltoa+0x5c>
    2bfe:	c2 2f       	mov	r28, r18
    2c00:	e8 94       	clt
    2c02:	ca 30       	cpi	r28, 0x0A	; 10
    2c04:	49 f4       	brne	.+18     	; 0x2c18 <ltoa+0x2a>
    2c06:	97 fb       	bst	r25, 7
    2c08:	3e f4       	brtc	.+14     	; 0x2c18 <ltoa+0x2a>
    2c0a:	90 95       	com	r25
    2c0c:	80 95       	com	r24
    2c0e:	70 95       	com	r23
    2c10:	61 95       	neg	r22
    2c12:	7f 4f       	sbci	r23, 0xFF	; 255
    2c14:	8f 4f       	sbci	r24, 0xFF	; 255
    2c16:	9f 4f       	sbci	r25, 0xFF	; 255
    2c18:	2c 2f       	mov	r18, r28
    2c1a:	33 27       	eor	r19, r19
    2c1c:	44 27       	eor	r20, r20
    2c1e:	55 27       	eor	r21, r21
    2c20:	ff 93       	push	r31
    2c22:	ef 93       	push	r30
    2c24:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <__udivmodsi4>
    2c28:	ef 91       	pop	r30
    2c2a:	ff 91       	pop	r31
    2c2c:	60 5d       	subi	r22, 0xD0	; 208
    2c2e:	6a 33       	cpi	r22, 0x3A	; 58
    2c30:	0c f0       	brlt	.+2      	; 0x2c34 <ltoa+0x46>
    2c32:	69 5d       	subi	r22, 0xD9	; 217
    2c34:	61 93       	st	Z+, r22
    2c36:	b9 01       	movw	r22, r18
    2c38:	ca 01       	movw	r24, r20
    2c3a:	60 50       	subi	r22, 0x00	; 0
    2c3c:	70 40       	sbci	r23, 0x00	; 0
    2c3e:	80 40       	sbci	r24, 0x00	; 0
    2c40:	90 40       	sbci	r25, 0x00	; 0
    2c42:	51 f7       	brne	.-44     	; 0x2c18 <ltoa+0x2a>
    2c44:	16 f4       	brtc	.+4      	; 0x2c4a <ltoa+0x5c>
    2c46:	cd e2       	ldi	r28, 0x2D	; 45
    2c48:	c1 93       	st	Z+, r28
    2c4a:	10 82       	st	Z, r1
    2c4c:	8f 91       	pop	r24
    2c4e:	9f 91       	pop	r25
    2c50:	cf 91       	pop	r28
    2c52:	0c 94 2b 16 	jmp	0x2c56	; 0x2c56 <strrev>

00002c56 <strrev>:
    2c56:	dc 01       	movw	r26, r24
    2c58:	fc 01       	movw	r30, r24
    2c5a:	67 2f       	mov	r22, r23
    2c5c:	71 91       	ld	r23, Z+
    2c5e:	77 23       	and	r23, r23
    2c60:	e1 f7       	brne	.-8      	; 0x2c5a <strrev+0x4>
    2c62:	32 97       	sbiw	r30, 0x02	; 2
    2c64:	04 c0       	rjmp	.+8      	; 0x2c6e <strrev+0x18>
    2c66:	7c 91       	ld	r23, X
    2c68:	6d 93       	st	X+, r22
    2c6a:	70 83       	st	Z, r23
    2c6c:	62 91       	ld	r22, -Z
    2c6e:	ae 17       	cp	r26, r30
    2c70:	bf 07       	cpc	r27, r31
    2c72:	c8 f3       	brcs	.-14     	; 0x2c66 <strrev+0x10>
    2c74:	08 95       	ret

00002c76 <_exit>:
    2c76:	f8 94       	cli

00002c78 <__stop_program>:
    2c78:	ff cf       	rjmp	.-2      	; 0x2c78 <__stop_program>
